#!/usr/bin/env Rscript

## Run this if you want to recreate the test data for the standalone model.
## You might do this is say we add some new required data or if the data we are testing with
## changes for any reason

root_dir <- here::here()
save_root_dir <- "inst/standalone_model/data"

write_standalone_data <- function(input_data, data_map, dest) {
  t <- tempfile()
  dir.create(t)

  ## Basepop handled separately as we only save a slice of this out
  frogger:::serialize_r_to_tensor(demp$basepop[, , 1],
                                  file.path(t, "demography_base_pop"))
  for (r_name in setdiff(names(data_map), "basepop")) {
    frogger:::serialize_r_to_tensor(input_data[[r_name]], file.path(t, data_map[[r_name]]))
  }
  o <- zip::zip(dest,
                list.files(t, full.names = TRUE),
                include_directories = FALSE,
                root = save_root_dir,
                mode = "cherry-pick")
  file.path(save_root_dir, o)
}

build_name_mapping <- function(name_mapping, structs = NULL) {
  if (!is.null(structs)) {
    adult_model_data <- vapply(name_mapping, function(map) {
      map$struct %in% adult_model_structs
    }, logical(1))
    name_mapping <- name_mapping[adult_model_data]
  }
  data_cpp_name <- vapply(name_mapping, "[[", character(1), "cpp_name")
  data_struct <- vapply(name_mapping, "[[", character(1), "struct")
  data_map <- sprintf("%s_%s", tolower(data_struct), data_cpp_name)
  names(data_map) <- vapply(name_mapping, "[[", character(1), "r_name")
  data_map
}

## Map from name in demp/parameters to name expected in C++ code
name_mapping <- frogger::frogger_input_name_mapping()
adult_model_structs <- c("Demography", "Incidence", "NaturalHistory", "Art")

adult_model_data_map <- build_name_mapping(name_mapping, adult_model_structs)


demp <- readRDS(testthat::test_path("testdata/demographic_projection_object_adult.rds"))
parameters <- readRDS(testthat::test_path("testdata/projection_parameters_adult.rds"))
input_data <- c(demp, parameters)
input_data$cd4_initdist <- input_data[["cd4_initdist_full"]]
input_data$cd4_prog <- input_data[["cd4_prog_full"]]
input_data$cd4_mort <- input_data[["cd4_mort_full"]]
input_data$art_mort <- input_data[["art_mort_full"]]

path <- write_standalone_data(input_data, adult_model_data_map, "adult_data.zip")
message(sprintf("Wrote adult test data to %s", path))


child_model_data_map <- build_name_mapping(name_mapping)

source(file.path("R", "spectrum_inputs.R"))
child <- setup_childmodel(testthat::test_path("testdata/child_parms.rds"))
input_data <- c(child$demp, child$parameters)
input_data$cd4_initdist <- input_data[["cd4_initdist_full"]]
input_data$cd4_prog <- input_data[["cd4_prog_full"]]
input_data$cd4_mort <- input_data[["cd4_mort_full"]]
input_data$art_mort <- input_data[["art_mort_full"]]

path <- write_standalone_data(input_data, child_model_data_map, "child_data.zip")
message(sprintf("Wrote child test data to %s", path))
