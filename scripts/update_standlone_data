#!/usr/bin/env Rscript

## Run this if you want to recreate the test data for the standalone model.
## You might do this is say we add some new required data or if the data we are testing with
## changes for any reason

root_dir <- here::here()
save_root_dir <- "inst/standalone_model/data"

write_standalone_data <- function(input_data, data_map, dest) {
  t <- tempfile()
  dir.create(t)

  ## Basepop handled separately as we only save a slice of this out
  frogger:::serialize_r_to_tensor(demp$basepop[, , 1], file.path(t, "basepop"))
  for (r_name in names(data_map)) {
    frogger:::serialize_r_to_tensor(input_data[[r_name]], file.path(t, data_map[[r_name]]))
  }
  o <- zip::zip(dest,
                list.files(t, full.names = TRUE),
                include_directories = FALSE,
                root = save_root_dir,
                mode = "cherry-pick")
  file.path(save_root_dir, o)
}

## Map from name in demp/parameters to name expected in C++ code
adult_model_data_map <- list(
  Sx = "survival_probability",
  netmigr_adj = "net_migration",
  asfr = "age_specific_fertility_rate",
  births_sex_prop = "births_sex_prop",
  incidinput = "incidence_rate",
  incrr_age = "incidence_age_rate_ratio",
  incrr_sex = "incidence_sex_rate_ratio",
  cd4_mort_full = "cd4_mortality_full",
  cd4_prog_full = "cd4_progression_full",
  cd4_initdist_full = "cd4_initial_distribution_full",
  art_mort_full = "art_mortality_rate_full",
  artmx_timerr = "art_mortality_time_rate_ratio",
  art_dropout = "art_dropout",
  art15plus_num = "adults_on_art",
  art15plus_isperc = "adults_on_art_is_percent",
  artcd4elig_idx = "idx_hm_elig"
)

demp <- readRDS(testthat::test_path("testdata/demographic_projection_object_adult.rds"))
parameters <- readRDS(testthat::test_path("testdata/projection_parameters_adult.rds"))
input_data <- c(demp, parameters)
path <- write_standalone_data(input_data, adult_model_data_map, "adult_data.zip")
message(sprintf("Wrote adult test data to %s", path))


child_model_data_map <- list(
  Sx = "survival_probability",
  netmigr_adj = "net_migration",
  asfr = "age_specific_fertility_rate",
  births_sex_prop = "births_sex_prop",
  incidinput = "incidence_rate",
  incrr_age = "incidence_age_rate_ratio",
  incrr_sex = "incidence_sex_rate_ratio",
  cd4_mort_full = "cd4_mortality_full",
  cd4_prog_full = "cd4_progression_full",
  cd4_initdist_full = "cd4_initial_distribution_full",
  art_mort_full = "art_mortality_rate_full",
  artmx_timerr = "art_mortality_time_rate_ratio",
  art_dropout = "art_dropout",
  art15plus_num = "adults_on_art",
  art15plus_isperc = "adults_on_art_is_percent",
  artcd4elig_idx = "idx_hm_elig",
  paed_incid_input = "hc_nosocomial",
  paed_cd4_dist = "hc1_cd4_dist",
  paed_cd4_transition = "hc_cd4_transition",
  paed_cd4_mort = "hc1_cd4_mort",
  adol_cd4_mort = "hc2_cd4_mort",
  paed_cd4_prog = "hc1_cd4_prog",
  adol_cd4_prog = "hc2_cd4_prog",
  ctx_effect = "ctx_effect",
  ctx_val = "ctx_val",
  paed_art_elig_age = "hc_art_elig_age",
  paed_art_elig_cd4 = "hc_art_elig_cd4",
  mort_art_rr = "hc_art_mort_rr",
  paed_art_mort = "hc1_art_mort",
  adol_art_mort = "hc2_art_mort",
  artpaeds_isperc = "hc_art_isperc",
  paed_art_val = "hc_art_val",
  init_art_dist = "hc_art_init_dist",
  adult_cd4_dist = "adult_cd4_dist",
  fert_mult_by_age = "fert_mult_by_age",
  fert_mult_offart = "fert_mult_off_art",
  fert_mult_onart = "fert_mult_on_art",
  tfr = "total_fertility_rate",
  laf = "local_adj_factor",
  pmtct = "PMTCT",
  mtct = "vertical_transmission_rate",
  pmtct_mtct = "PMTCT_transmission_rate",
  pmtct_dropout = "PMTCT_dropout",
  pmtct_input_isperc = "PMTCT_input_is_percent",
  bf_duration_art = "breastfeeding_duration_art",
  bf_duration_no_art = "breastfeeding_duration_no_art",
  mat_hiv_births = "mat_hiv_births",
  mat_prev_input = "mat_prev_input",
  prop_lt200 = "prop_lt200",
  prop_gte350 = "prop_gte350",
  incrate = "incrate",
  ctx_val_ispercent = "ctx_val_is_percent",
  paed_art_age_spec = "hc_art_is_age_spec",
  hc_age_coarse = "hc_age_coarse"
)

source(file.path("R", "spectrum_inputs.R"))
child <- setup_childmodel(testthat::test_path("testdata/child_parms.rds"))
input_data <- c(child$demp, child$parameters)
path <- write_standalone_data(input_data, child_model_data_map, "child_data.zip")
message(sprintf("Wrote child test data to %s", path))
