// Generated by leapfrog cpp_generation: do not edit by hand
// This file is automatically generated. Do not edit this file. If you want to make changes
// edit leapfrog json files in `cpp_generation/modelSchemas` and run `uv run ./src/main.py` inside
// the `cpp_generation` folder.

#pragma once

#include "hdf5_utils.hpp"
#include "../config_mixer.hpp"

namespace leapfrog {
namespace internal {

template<typename real_type, MV ModelVariant>
struct DpAdapter<Language::Cpp, real_type, ModelVariant> {
  using SS = SSMixed<ModelVariant>;
  using Config = DpConfig<real_type, ModelVariant>;

  static Config::Pars get_pars(
    OwnedParsMixed<real_type, ModelVariant>::Pars& owned_pars
  ) {
    return {
      .base_pop = { owned_pars.dp.base_pop.data(), owned_pars.dp.base_pop.shape() },
      .survival_probability = { owned_pars.dp.survival_probability.data(), owned_pars.dp.survival_probability.shape() },
      .net_migration = { owned_pars.dp.net_migration.data(), owned_pars.dp.net_migration.shape() },
      .age_specific_fertility_rate = { owned_pars.dp.age_specific_fertility_rate.data(), owned_pars.dp.age_specific_fertility_rate.shape() },
      .births_sex_prop = { owned_pars.dp.births_sex_prop.data(), owned_pars.dp.births_sex_prop.shape() }
    };
  };

  static constexpr int output_count = 3;

  static int build_output(
    int index,
    const Config::OutputState& state,
    std::filesystem::path& output_file
  ) {
    write_data<real_type, typename Config::OutputState::shape_p_total_pop>(output_file, "p_total_pop", state.p_total_pop);
    write_data<real_type, typename Config::OutputState::shape_p_total_pop_background_deaths>(output_file, "p_total_pop_background_deaths", state.p_total_pop_background_deaths);
    write_data<real_type, typename Config::OutputState::shape_births>(output_file, "births", state.births);
    return index + output_count;
  };
};

template<typename real_type, MV ModelVariant>
struct HaAdapter<Language::Cpp, real_type, ModelVariant> {
  using SS = SSMixed<ModelVariant>;
  using Config = HaConfig<real_type, ModelVariant>;

  static Config::Pars get_pars(
    OwnedParsMixed<real_type, ModelVariant>::Pars& owned_pars
  ) {
    return {
      .total_rate = { owned_pars.ha.total_rate.data(), owned_pars.ha.total_rate.shape() },
      .relative_risk_age = { owned_pars.ha.relative_risk_age.data(), owned_pars.ha.relative_risk_age.shape() },
      .relative_risk_sex = { owned_pars.ha.relative_risk_sex.data(), owned_pars.ha.relative_risk_sex.shape() },
      .cd4_mortality = { owned_pars.ha.cd4_mortality.data(), owned_pars.ha.cd4_mortality.shape() },
      .cd4_progression = { owned_pars.ha.cd4_progression.data(), owned_pars.ha.cd4_progression.shape() },
      .cd4_initial_distribution = { owned_pars.ha.cd4_initial_distribution.data(), owned_pars.ha.cd4_initial_distribution.shape() },
      .scale_cd4_mortality = owned_pars.ha.scale_cd4_mortality,
      .idx_hm_elig = { owned_pars.ha.idx_hm_elig.data(), owned_pars.ha.idx_hm_elig.shape() },
      .mortality = { owned_pars.ha.mortality.data(), owned_pars.ha.mortality.shape() },
      .mortality_time_rate_ratio = { owned_pars.ha.mortality_time_rate_ratio.data(), owned_pars.ha.mortality_time_rate_ratio.shape() },
      .dropout_recover_cd4 = owned_pars.ha.dropout_recover_cd4,
      .dropout_rate = { owned_pars.ha.dropout_rate.data(), owned_pars.ha.dropout_rate.shape() },
      .adults_on_art = { owned_pars.ha.adults_on_art.data(), owned_pars.ha.adults_on_art.shape() },
      .adults_on_art_is_percent = { owned_pars.ha.adults_on_art_is_percent.data(), owned_pars.ha.adults_on_art_is_percent.shape() },
      .initiation_mortality_weight = owned_pars.ha.initiation_mortality_weight,
      .h_art_stage_dur = { owned_pars.ha.h_art_stage_dur.data(), owned_pars.ha.h_art_stage_dur.shape() }
    };
  };

  static constexpr int output_count = 9;

  static int build_output(
    int index,
    const Config::OutputState& state,
    std::filesystem::path& output_file
  ) {
    write_data<real_type, typename Config::OutputState::shape_p_hiv_pop>(output_file, "p_hiv_pop", state.p_hiv_pop);
    write_data<real_type, typename Config::OutputState::shape_p_hiv_pop_background_deaths>(output_file, "p_hiv_pop_background_deaths", state.p_hiv_pop_background_deaths);
    write_data<real_type, typename Config::OutputState::shape_h_hiv_adult>(output_file, "h_hiv_adult", state.h_hiv_adult);
    write_data<real_type, typename Config::OutputState::shape_h_art_adult>(output_file, "h_art_adult", state.h_art_adult);
    write_data<real_type, typename Config::OutputState::shape_h_hiv_deaths_no_art>(output_file, "h_hiv_deaths_no_art", state.h_hiv_deaths_no_art);
    write_data<real_type, typename Config::OutputState::shape_p_infections>(output_file, "p_infections", state.p_infections);
    write_data<real_type, typename Config::OutputState::shape_h_hiv_deaths_art>(output_file, "h_hiv_deaths_art", state.h_hiv_deaths_art);
    write_data<real_type, typename Config::OutputState::shape_h_art_initiation>(output_file, "h_art_initiation", state.h_art_initiation);
    write_data<real_type, typename Config::OutputState::shape_p_hiv_deaths>(output_file, "p_hiv_deaths", state.p_hiv_deaths);
    return index + output_count;
  };
};

template<typename real_type, MV ModelVariant>
struct HcAdapter<Language::Cpp, real_type, ModelVariant> {
  using SS = SSMixed<ModelVariant>;
  using Config = HcConfig<real_type, ModelVariant>;

  static Config::Pars get_pars(
    OwnedParsMixed<real_type, ModelVariant>::Pars& owned_pars
  ) {
    return {
      .hc_nosocomial = { owned_pars.hc.hc_nosocomial.data(), owned_pars.hc.hc_nosocomial.shape() },
      .hc1_cd4_dist = { owned_pars.hc.hc1_cd4_dist.data(), owned_pars.hc.hc1_cd4_dist.shape() },
      .hc1_cd4_mort = { owned_pars.hc.hc1_cd4_mort.data(), owned_pars.hc.hc1_cd4_mort.shape() },
      .hc2_cd4_mort = { owned_pars.hc.hc2_cd4_mort.data(), owned_pars.hc.hc2_cd4_mort.shape() },
      .hc1_cd4_prog = { owned_pars.hc.hc1_cd4_prog.data(), owned_pars.hc.hc1_cd4_prog.shape() },
      .hc2_cd4_prog = { owned_pars.hc.hc2_cd4_prog.data(), owned_pars.hc.hc2_cd4_prog.shape() },
      .ctx_val = { owned_pars.hc.ctx_val.data(), owned_pars.hc.ctx_val.shape() },
      .hc_art_elig_age = { owned_pars.hc.hc_art_elig_age.data(), owned_pars.hc.hc_art_elig_age.shape() },
      .hc_art_elig_cd4 = { owned_pars.hc.hc_art_elig_cd4.data(), owned_pars.hc.hc_art_elig_cd4.shape() },
      .hc_art_mort_rr = { owned_pars.hc.hc_art_mort_rr.data(), owned_pars.hc.hc_art_mort_rr.shape() },
      .hc1_art_mort = { owned_pars.hc.hc1_art_mort.data(), owned_pars.hc.hc1_art_mort.shape() },
      .hc2_art_mort = { owned_pars.hc.hc2_art_mort.data(), owned_pars.hc.hc2_art_mort.shape() },
      .hc_art_isperc = { owned_pars.hc.hc_art_isperc.data(), owned_pars.hc.hc_art_isperc.shape() },
      .hc_art_val = { owned_pars.hc.hc_art_val.data(), owned_pars.hc.hc_art_val.shape() },
      .hc_art_init_dist = { owned_pars.hc.hc_art_init_dist.data(), owned_pars.hc.hc_art_init_dist.shape() },
      .fert_mult_by_age = { owned_pars.hc.fert_mult_by_age.data(), owned_pars.hc.fert_mult_by_age.shape() },
      .fert_mult_off_art = { owned_pars.hc.fert_mult_off_art.data(), owned_pars.hc.fert_mult_off_art.shape() },
      .fert_mult_on_art = { owned_pars.hc.fert_mult_on_art.data(), owned_pars.hc.fert_mult_on_art.shape() },
      .total_fertility_rate = { owned_pars.hc.total_fertility_rate.data(), owned_pars.hc.total_fertility_rate.shape() },
      .PMTCT = { owned_pars.hc.PMTCT.data(), owned_pars.hc.PMTCT.shape() },
      .vertical_transmission_rate = { owned_pars.hc.vertical_transmission_rate.data(), owned_pars.hc.vertical_transmission_rate.shape() },
      .PMTCT_transmission_rate = { owned_pars.hc.PMTCT_transmission_rate.data(), owned_pars.hc.PMTCT_transmission_rate.shape() },
      .PMTCT_dropout = { owned_pars.hc.PMTCT_dropout.data(), owned_pars.hc.PMTCT_dropout.shape() },
      .PMTCT_input_is_percent = { owned_pars.hc.PMTCT_input_is_percent.data(), owned_pars.hc.PMTCT_input_is_percent.shape() },
      .breastfeeding_duration_art = { owned_pars.hc.breastfeeding_duration_art.data(), owned_pars.hc.breastfeeding_duration_art.shape() },
      .breastfeeding_duration_no_art = { owned_pars.hc.breastfeeding_duration_no_art.data(), owned_pars.hc.breastfeeding_duration_no_art.shape() },
      .mat_hiv_births = { owned_pars.hc.mat_hiv_births.data(), owned_pars.hc.mat_hiv_births.shape() },
      .mat_prev_input = { owned_pars.hc.mat_prev_input.data(), owned_pars.hc.mat_prev_input.shape() },
      .prop_lt200 = { owned_pars.hc.prop_lt200.data(), owned_pars.hc.prop_lt200.shape() },
      .prop_gte350 = { owned_pars.hc.prop_gte350.data(), owned_pars.hc.prop_gte350.shape() },
      .ctx_val_is_percent = { owned_pars.hc.ctx_val_is_percent.data(), owned_pars.hc.ctx_val_is_percent.shape() },
      .hc_art_is_age_spec = { owned_pars.hc.hc_art_is_age_spec.data(), owned_pars.hc.hc_art_is_age_spec.shape() },
      .abortion = { owned_pars.hc.abortion.data(), owned_pars.hc.abortion.shape() },
      .patients_reallocated = { owned_pars.hc.patients_reallocated.data(), owned_pars.hc.patients_reallocated.shape() },
      .hc_art_ltfu = { owned_pars.hc.hc_art_ltfu.data(), owned_pars.hc.hc_art_ltfu.shape() },
      .adult_female_infections = { owned_pars.hc.adult_female_infections.data(), owned_pars.hc.adult_female_infections.shape() },
      .adult_female_hivnpop = { owned_pars.hc.adult_female_hivnpop.data(), owned_pars.hc.adult_female_hivnpop.shape() },
      .total_births = { owned_pars.hc.total_births.data(), owned_pars.hc.total_births.shape() },
      .ctx_effect = { owned_pars.hc.ctx_effect.data(), owned_pars.hc.ctx_effect.shape() },
      .hc_art_start = owned_pars.hc.hc_art_start,
      .local_adj_factor = owned_pars.hc.local_adj_factor,
      .hc_age_specific_fertility_rate = { owned_pars.hc.hc_age_specific_fertility_rate.data(), owned_pars.hc.hc_age_specific_fertility_rate.shape() }
    };
  };

  static constexpr int output_count = 13;

  static int build_output(
    int index,
    const Config::OutputState& state,
    std::filesystem::path& output_file
  ) {
    write_data<real_type, typename Config::OutputState::shape_hc1_hiv_pop>(output_file, "hc1_hiv_pop", state.hc1_hiv_pop);
    write_data<real_type, typename Config::OutputState::shape_hc2_hiv_pop>(output_file, "hc2_hiv_pop", state.hc2_hiv_pop);
    write_data<real_type, typename Config::OutputState::shape_hc1_art_pop>(output_file, "hc1_art_pop", state.hc1_art_pop);
    write_data<real_type, typename Config::OutputState::shape_hc2_art_pop>(output_file, "hc2_art_pop", state.hc2_art_pop);
    write_data<real_type, typename Config::OutputState::shape_hc1_noart_aids_deaths>(output_file, "hc1_noart_aids_deaths", state.hc1_noart_aids_deaths);
    write_data<real_type, typename Config::OutputState::shape_hc2_noart_aids_deaths>(output_file, "hc2_noart_aids_deaths", state.hc2_noart_aids_deaths);
    write_data<real_type, typename Config::OutputState::shape_hc1_art_aids_deaths>(output_file, "hc1_art_aids_deaths", state.hc1_art_aids_deaths);
    write_data<real_type, typename Config::OutputState::shape_hc2_art_aids_deaths>(output_file, "hc2_art_aids_deaths", state.hc2_art_aids_deaths);
    write_data<real_type, typename Config::OutputState::shape_hc_art_init>(output_file, "hc_art_init", state.hc_art_init);
    write_data<real_type, typename Config::OutputState::shape_hc_art_need_init>(output_file, "hc_art_need_init", state.hc_art_need_init);
    write_data<real_type, typename Config::OutputState::shape_hiv_births>(output_file, "hiv_births", state.hiv_births);
    write_data<real_type, typename Config::OutputState::shape_ctx_need>(output_file, "ctx_need", state.ctx_need);
    write_data<real_type, typename Config::OutputState::shape_infection_by_type>(output_file, "infection_by_type", state.infection_by_type);
    return index + output_count;
  };
};

} // namespace internal
} // namespace leapfrog
