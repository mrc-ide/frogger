// Generated by leapfrog cpp_generation: do not edit by hand
// This file is automatically generated. Do not edit this file. If you want to make changes
// edit leapfrog json files in `cpp_generation/modelSchemas` and run `uv run ./src/main.py` inside
// the `cpp_generation` folder.

#pragma once

#include <nanobind/nanobind.h>
#include <nanobind/ndarray.h>
#include <sstream>
#include <stdexcept>
#include <iostream>

#include "../config_mixer.hpp"

namespace nb = nanobind;

namespace leapfrog {
namespace internal {

template <typename T, size_t Rank>
nda::array_ref_of_rank<T, Rank> parse_data(const nb::dict& data, char const* key, nda::shape_of_rank<Rank> shape) {
  auto array = nb::cast<nb::ndarray<T, nb::numpy>>(data[key]);
  T* array_data = array.data();

  int actual_length = array.size();
  int expected_length = shape.flat_max() + 1;

  if (actual_length < expected_length) {
    std::ostringstream oss;
    oss << "Invalid size of data for '" << key << "', expected " << expected_length
        << " got " << actual_length;
    throw std::invalid_argument(oss.str());
  }
  return { array_data, shape };
}

template <typename T, typename Shape>
void fill_initial_state(const nb::dict& data, char const* key, nda::array<T, Shape>& array) {
  auto array_data = nb::cast<nb::ndarray<T, nb::numpy>>(data[key]).data();

  nda::array_ref<T, Shape> array_ref(array_data);

  nda::for_each_index(Shape(), [&](auto i) {
    array[i] = array_ref[i];
  });
}

template<typename T, nb::ssize_t ...Args>
using py_array = nb::ndarray<const T, nb::numpy, nb::shape<Args...>, nb::f_contig>;

template<typename real_type, MV ModelVariant>
struct DpAdapter<Language::Py, real_type, ModelVariant> {
  using SS = SSMixed<ModelVariant>;
  using Config = DpConfig<real_type, ModelVariant>;

  static Config::Pars get_pars(
    const nb::dict &data,
    const Options<real_type> &opts
  ) {
    return {
      .base_pop = parse_data<real_type, 2>(data, "basepop", { nda::dim<>(0, SS::pAG, 1), nda::dim<>(0, SS::NS, (SS::pAG)) }),
      .survival_probability = parse_data<real_type, 3>(data, "Sx", { nda::dim<>(0, SS::pAG + 1, 1), nda::dim<>(0, SS::NS, (SS::pAG + 1)), nda::dim<>(0, opts.proj_steps, (SS::pAG + 1) * (SS::NS)) }),
      .net_migration = parse_data<real_type, 3>(data, "netmigr_adj", { nda::dim<>(0, SS::pAG, 1), nda::dim<>(0, SS::NS, (SS::pAG)), nda::dim<>(0, opts.proj_steps, (SS::pAG) * (SS::NS)) }),
      .age_specific_fertility_rate = parse_data<real_type, 2>(data, "asfr", { nda::dim<>(0, SS::p_fertility_age_groups, 1), nda::dim<>(0, opts.proj_steps, (SS::p_fertility_age_groups)) }),
      .births_sex_prop = parse_data<real_type, 2>(data, "births_sex_prop", { nda::dim<>(0, SS::NS, 1), nda::dim<>(0, opts.proj_steps, (SS::NS)) })
    };
  };

  static Config::State get_initial_state(
    const nb::dict &data
  ) {
    typename Config::State state;
    fill_initial_state<real_type, typename Config::State::shape_p_total_pop>(data, "p_total_pop", state.p_total_pop);
    fill_initial_state<real_type, typename Config::State::shape_p_total_pop_background_deaths>(data, "p_total_pop_background_deaths", state.p_total_pop_background_deaths);
    state.births = nb::cast<real_type>(data["births"]);
    return state;
  };

  static constexpr int output_count = 3;

  static int build_output(
    int index,
    const Config::OutputState& state,
    nb::dict& ret,
    const size_t& output_years
  ) {
    const int py_rank_p_total_pop = 3;
    size_t py_dims_p_total_pop[py_rank_p_total_pop] = { SS::pAG, SS::NS, output_years };
    ret["p_total_pop"] = py_array<real_type>(state.p_total_pop.data(), py_rank_p_total_pop, py_dims_p_total_pop);
    const int py_rank_p_total_pop_background_deaths = 3;
    size_t py_dims_p_total_pop_background_deaths[py_rank_p_total_pop_background_deaths] = { SS::pAG, SS::NS, output_years };
    ret["p_total_pop_background_deaths"] = py_array<real_type>(state.p_total_pop_background_deaths.data(), py_rank_p_total_pop_background_deaths, py_dims_p_total_pop_background_deaths);
    const int py_rank_births = 1;
    size_t py_dims_births[py_rank_births] = { output_years };
    ret["births"] = py_array<real_type>(state.births.data(), py_rank_births, py_dims_births);
    return index + output_count;
  };

  static int build_output_single_year(
    int index,
    const Config::State& state,
    nb::dict& ret
  ) {
    const int py_rank_p_total_pop = 2;
    size_t py_dims_p_total_pop[py_rank_p_total_pop] = { SS::pAG, SS::NS };
    ret["p_total_pop"] = py_array<real_type>(state.p_total_pop.data(), py_rank_p_total_pop, py_dims_p_total_pop);
    const int py_rank_p_total_pop_background_deaths = 2;
    size_t py_dims_p_total_pop_background_deaths[py_rank_p_total_pop_background_deaths] = { SS::pAG, SS::NS };
    ret["p_total_pop_background_deaths"] = py_array<real_type>(state.p_total_pop_background_deaths.data(), py_rank_p_total_pop_background_deaths, py_dims_p_total_pop_background_deaths);
    ret["births"] = state.births;
    return index + output_count;
  };
};

template<typename real_type, MV ModelVariant>
struct HaAdapter<Language::Py, real_type, ModelVariant> {
  using SS = SSMixed<ModelVariant>;
  using Config = HaConfig<real_type, ModelVariant>;

  static Config::Pars get_pars(
    const nb::dict &data,
    const Options<real_type> &opts
  ) {
    return {
      .total_rate = parse_data<real_type, 1>(data, "incidinput", { nda::dim<>(0, opts.proj_steps, 1) }),
      .relative_risk_age = parse_data<real_type, 3>(data, "incrr_age", { nda::dim<>(0, SS::pAG - SS::p_idx_hiv_first_adult, 1), nda::dim<>(0, SS::NS, (SS::pAG - SS::p_idx_hiv_first_adult)), nda::dim<>(0, opts.proj_steps, (SS::pAG - SS::p_idx_hiv_first_adult) * (SS::NS)) }),
      .relative_risk_sex = parse_data<real_type, 1>(data, "incrr_sex", { nda::dim<>(0, opts.proj_steps, 1) }),
      .cd4_mortality = parse_data<real_type, 3>(data, "cd4_mort", { nda::dim<>(0, SS::hDS, 1), nda::dim<>(0, SS::hAG, (SS::hDS)), nda::dim<>(0, SS::NS, (SS::hDS) * (SS::hAG)) }),
      .cd4_progression = parse_data<real_type, 3>(data, "cd4_prog", { nda::dim<>(0, SS::hDS - 1, 1), nda::dim<>(0, SS::hAG, (SS::hDS - 1)), nda::dim<>(0, SS::NS, (SS::hDS - 1) * (SS::hAG)) }),
      .cd4_initial_distribution = parse_data<real_type, 3>(data, "cd4_initdist", { nda::dim<>(0, SS::hDS, 1), nda::dim<>(0, SS::hAG, (SS::hDS)), nda::dim<>(0, SS::NS, (SS::hDS) * (SS::hAG)) }),
      .scale_cd4_mortality = nb::cast<int>(data["scale_cd4_mort"]),
      .idx_hm_elig = parse_data<int, 1>(data, "artcd4elig_idx", { nda::dim<>(0, opts.proj_steps, 1) }),
      .mortality = parse_data<real_type, 4>(data, "art_mort", { nda::dim<>(0, SS::hTS, 1), nda::dim<>(0, SS::hDS, (SS::hTS)), nda::dim<>(0, SS::hAG, (SS::hTS) * (SS::hDS)), nda::dim<>(0, SS::NS, (SS::hTS) * (SS::hDS) * (SS::hAG)) }),
      .mortality_time_rate_ratio = parse_data<real_type, 2>(data, "artmx_timerr", { nda::dim<>(0, SS::hTS, 1), nda::dim<>(0, opts.proj_steps, (SS::hTS)) }),
      .dropout_recover_cd4 = nb::cast<int>(data["art_dropout_recover_cd4"]),
      .dropout_rate = parse_data<real_type, 1>(data, "art_dropout_rate", { nda::dim<>(0, opts.proj_steps, 1) }),
      .adults_on_art = parse_data<real_type, 2>(data, "art15plus_num", { nda::dim<>(0, SS::NS, 1), nda::dim<>(0, opts.proj_steps, (SS::NS)) }),
      .adults_on_art_is_percent = parse_data<int, 2>(data, "art15plus_isperc", { nda::dim<>(0, SS::NS, 1), nda::dim<>(0, opts.proj_steps, (SS::NS)) }),
      .initiation_mortality_weight = nb::cast<real_type>(data["art_alloc_mxweight"]),
      .h_art_stage_dur = parse_data<real_type, 1>(data, "h_art_stage_dur", { nda::dim<>(0, SS::hTS - 1, 1) }),
      .pAG_INCIDPOP = nb::cast<int>(data["pAG_INCIDPOP"]),
      .pIDX_INCIDPOP = nb::cast<int>(data["pIDX_INCIDPOP"])
    };
  };

  static Config::State get_initial_state(
    const nb::dict &data
  ) {
    typename Config::State state;
    fill_initial_state<real_type, typename Config::State::shape_p_hiv_pop>(data, "p_hiv_pop", state.p_hiv_pop);
    fill_initial_state<real_type, typename Config::State::shape_p_hiv_pop_background_deaths>(data, "p_hiv_pop_background_deaths", state.p_hiv_pop_background_deaths);
    fill_initial_state<real_type, typename Config::State::shape_h_hiv_adult>(data, "h_hiv_adult", state.h_hiv_adult);
    fill_initial_state<real_type, typename Config::State::shape_h_art_adult>(data, "h_art_adult", state.h_art_adult);
    fill_initial_state<real_type, typename Config::State::shape_h_hiv_deaths_no_art>(data, "h_hiv_deaths_no_art", state.h_hiv_deaths_no_art);
    fill_initial_state<real_type, typename Config::State::shape_p_infections>(data, "p_infections", state.p_infections);
    fill_initial_state<real_type, typename Config::State::shape_h_hiv_deaths_art>(data, "h_hiv_deaths_art", state.h_hiv_deaths_art);
    fill_initial_state<real_type, typename Config::State::shape_h_art_initiation>(data, "h_art_initiation", state.h_art_initiation);
    fill_initial_state<real_type, typename Config::State::shape_p_hiv_deaths>(data, "p_hiv_deaths", state.p_hiv_deaths);
    fill_initial_state<real_type, typename Config::State::shape_p_hiv_net_migration>(data, "p_hiv_net_migration", state.p_hiv_net_migration);
    return state;
  };

  static constexpr int output_count = 10;

  static int build_output(
    int index,
    const Config::OutputState& state,
    nb::dict& ret,
    const size_t& output_years
  ) {
    const int py_rank_p_hiv_pop = 3;
    size_t py_dims_p_hiv_pop[py_rank_p_hiv_pop] = { SS::pAG, SS::NS, output_years };
    ret["p_hiv_pop"] = py_array<real_type>(state.p_hiv_pop.data(), py_rank_p_hiv_pop, py_dims_p_hiv_pop);
    const int py_rank_p_hiv_pop_background_deaths = 3;
    size_t py_dims_p_hiv_pop_background_deaths[py_rank_p_hiv_pop_background_deaths] = { SS::pAG, SS::NS, output_years };
    ret["p_hiv_pop_background_deaths"] = py_array<real_type>(state.p_hiv_pop_background_deaths.data(), py_rank_p_hiv_pop_background_deaths, py_dims_p_hiv_pop_background_deaths);
    const int py_rank_h_hiv_adult = 4;
    size_t py_dims_h_hiv_adult[py_rank_h_hiv_adult] = { SS::hDS, SS::hAG, SS::NS, output_years };
    ret["h_hiv_adult"] = py_array<real_type>(state.h_hiv_adult.data(), py_rank_h_hiv_adult, py_dims_h_hiv_adult);
    const int py_rank_h_art_adult = 5;
    size_t py_dims_h_art_adult[py_rank_h_art_adult] = { SS::hTS, SS::hDS, SS::hAG, SS::NS, output_years };
    ret["h_art_adult"] = py_array<real_type>(state.h_art_adult.data(), py_rank_h_art_adult, py_dims_h_art_adult);
    const int py_rank_h_hiv_deaths_no_art = 4;
    size_t py_dims_h_hiv_deaths_no_art[py_rank_h_hiv_deaths_no_art] = { SS::hDS, SS::hAG, SS::NS, output_years };
    ret["h_hiv_deaths_no_art"] = py_array<real_type>(state.h_hiv_deaths_no_art.data(), py_rank_h_hiv_deaths_no_art, py_dims_h_hiv_deaths_no_art);
    const int py_rank_p_infections = 3;
    size_t py_dims_p_infections[py_rank_p_infections] = { SS::pAG, SS::NS, output_years };
    ret["p_infections"] = py_array<real_type>(state.p_infections.data(), py_rank_p_infections, py_dims_p_infections);
    const int py_rank_h_hiv_deaths_art = 5;
    size_t py_dims_h_hiv_deaths_art[py_rank_h_hiv_deaths_art] = { SS::hTS, SS::hDS, SS::hAG, SS::NS, output_years };
    ret["h_hiv_deaths_art"] = py_array<real_type>(state.h_hiv_deaths_art.data(), py_rank_h_hiv_deaths_art, py_dims_h_hiv_deaths_art);
    const int py_rank_h_art_initiation = 4;
    size_t py_dims_h_art_initiation[py_rank_h_art_initiation] = { SS::hDS, SS::hAG, SS::NS, output_years };
    ret["h_art_initiation"] = py_array<real_type>(state.h_art_initiation.data(), py_rank_h_art_initiation, py_dims_h_art_initiation);
    const int py_rank_p_hiv_deaths = 3;
    size_t py_dims_p_hiv_deaths[py_rank_p_hiv_deaths] = { SS::pAG, SS::NS, output_years };
    ret["p_hiv_deaths"] = py_array<real_type>(state.p_hiv_deaths.data(), py_rank_p_hiv_deaths, py_dims_p_hiv_deaths);
    const int py_rank_p_hiv_net_migration = 3;
    size_t py_dims_p_hiv_net_migration[py_rank_p_hiv_net_migration] = { SS::pAG, SS::NS, output_years };
    ret["p_hiv_net_migration"] = py_array<real_type>(state.p_hiv_net_migration.data(), py_rank_p_hiv_net_migration, py_dims_p_hiv_net_migration);
    return index + output_count;
  };

  static int build_output_single_year(
    int index,
    const Config::State& state,
    nb::dict& ret
  ) {
    const int py_rank_p_hiv_pop = 2;
    size_t py_dims_p_hiv_pop[py_rank_p_hiv_pop] = { SS::pAG, SS::NS };
    ret["p_hiv_pop"] = py_array<real_type>(state.p_hiv_pop.data(), py_rank_p_hiv_pop, py_dims_p_hiv_pop);
    const int py_rank_p_hiv_pop_background_deaths = 2;
    size_t py_dims_p_hiv_pop_background_deaths[py_rank_p_hiv_pop_background_deaths] = { SS::pAG, SS::NS };
    ret["p_hiv_pop_background_deaths"] = py_array<real_type>(state.p_hiv_pop_background_deaths.data(), py_rank_p_hiv_pop_background_deaths, py_dims_p_hiv_pop_background_deaths);
    const int py_rank_h_hiv_adult = 3;
    size_t py_dims_h_hiv_adult[py_rank_h_hiv_adult] = { SS::hDS, SS::hAG, SS::NS };
    ret["h_hiv_adult"] = py_array<real_type>(state.h_hiv_adult.data(), py_rank_h_hiv_adult, py_dims_h_hiv_adult);
    const int py_rank_h_art_adult = 4;
    size_t py_dims_h_art_adult[py_rank_h_art_adult] = { SS::hTS, SS::hDS, SS::hAG, SS::NS };
    ret["h_art_adult"] = py_array<real_type>(state.h_art_adult.data(), py_rank_h_art_adult, py_dims_h_art_adult);
    const int py_rank_h_hiv_deaths_no_art = 3;
    size_t py_dims_h_hiv_deaths_no_art[py_rank_h_hiv_deaths_no_art] = { SS::hDS, SS::hAG, SS::NS };
    ret["h_hiv_deaths_no_art"] = py_array<real_type>(state.h_hiv_deaths_no_art.data(), py_rank_h_hiv_deaths_no_art, py_dims_h_hiv_deaths_no_art);
    const int py_rank_p_infections = 2;
    size_t py_dims_p_infections[py_rank_p_infections] = { SS::pAG, SS::NS };
    ret["p_infections"] = py_array<real_type>(state.p_infections.data(), py_rank_p_infections, py_dims_p_infections);
    const int py_rank_h_hiv_deaths_art = 4;
    size_t py_dims_h_hiv_deaths_art[py_rank_h_hiv_deaths_art] = { SS::hTS, SS::hDS, SS::hAG, SS::NS };
    ret["h_hiv_deaths_art"] = py_array<real_type>(state.h_hiv_deaths_art.data(), py_rank_h_hiv_deaths_art, py_dims_h_hiv_deaths_art);
    const int py_rank_h_art_initiation = 3;
    size_t py_dims_h_art_initiation[py_rank_h_art_initiation] = { SS::hDS, SS::hAG, SS::NS };
    ret["h_art_initiation"] = py_array<real_type>(state.h_art_initiation.data(), py_rank_h_art_initiation, py_dims_h_art_initiation);
    const int py_rank_p_hiv_deaths = 2;
    size_t py_dims_p_hiv_deaths[py_rank_p_hiv_deaths] = { SS::pAG, SS::NS };
    ret["p_hiv_deaths"] = py_array<real_type>(state.p_hiv_deaths.data(), py_rank_p_hiv_deaths, py_dims_p_hiv_deaths);
    const int py_rank_p_hiv_net_migration = 2;
    size_t py_dims_p_hiv_net_migration[py_rank_p_hiv_net_migration] = { SS::pAG, SS::NS };
    ret["p_hiv_net_migration"] = py_array<real_type>(state.p_hiv_net_migration.data(), py_rank_p_hiv_net_migration, py_dims_p_hiv_net_migration);
    return index + output_count;
  };
};

template<typename real_type, MV ModelVariant>
struct HcAdapter<Language::Py, real_type, ModelVariant> {
  using SS = SSMixed<ModelVariant>;
  using Config = HcConfig<real_type, ModelVariant>;

  static Config::Pars get_pars(
    const nb::dict &data,
    const Options<real_type> &opts
  ) {
    return {
      .hc_nosocomial = parse_data<real_type, 1>(data, "paed_incid_input", { nda::dim<>(0, opts.proj_steps, 1) }),
      .hc1_cd4_dist = parse_data<real_type, 1>(data, "paed_cd4_dist", { nda::dim<>(0, SS::hc1DS, 1) }),
      .hc1_cd4_mort = parse_data<real_type, 3>(data, "paed_cd4_mort", { nda::dim<>(0, SS::hc1DS, 1), nda::dim<>(0, SS::hcTT, (SS::hc1DS)), nda::dim<>(0, SS::hc1AG, (SS::hc1DS) * (SS::hcTT)) }),
      .hc2_cd4_mort = parse_data<real_type, 3>(data, "adol_cd4_mort", { nda::dim<>(0, SS::hc2DS, 1), nda::dim<>(0, SS::hcTT, (SS::hc2DS)), nda::dim<>(0, SS::hc2AG, (SS::hc2DS) * (SS::hcTT)) }),
      .hc1_cd4_prog = parse_data<real_type, 3>(data, "paed_cd4_prog", { nda::dim<>(0, SS::hc1DS, 1), nda::dim<>(0, SS::hc1AG_c, (SS::hc1DS)), nda::dim<>(0, SS::NS, (SS::hc1DS) * (SS::hc1AG_c)) }),
      .hc2_cd4_prog = parse_data<real_type, 3>(data, "adol_cd4_prog", { nda::dim<>(0, SS::hc2DS, 1), nda::dim<>(0, SS::hc2AG_c, (SS::hc2DS)), nda::dim<>(0, SS::NS, (SS::hc2DS) * (SS::hc2AG_c)) }),
      .ctx_val = parse_data<real_type, 1>(data, "ctx_val", { nda::dim<>(0, opts.proj_steps, 1) }),
      .hc_art_elig_age = parse_data<int, 1>(data, "paed_art_elig_age", { nda::dim<>(0, opts.proj_steps, 1) }),
      .hc_art_elig_cd4 = parse_data<int, 2>(data, "paed_art_elig_cd4", { nda::dim<>(0, SS::p_idx_hiv_first_adult, 1), nda::dim<>(0, opts.proj_steps, (SS::p_idx_hiv_first_adult)) }),
      .hc_art_mort_rr = parse_data<real_type, 3>(data, "mort_art_rr", { nda::dim<>(0, SS::hTS, 1), nda::dim<>(0, SS::p_idx_hiv_first_adult, (SS::hTS)), nda::dim<>(0, opts.proj_steps, (SS::hTS) * (SS::p_idx_hiv_first_adult)) }),
      .hc1_art_mort = parse_data<real_type, 3>(data, "paed_art_mort", { nda::dim<>(0, SS::hc1DS, 1), nda::dim<>(0, SS::hTS, (SS::hc1DS)), nda::dim<>(0, SS::hc1AG, (SS::hc1DS) * (SS::hTS)) }),
      .hc2_art_mort = parse_data<real_type, 3>(data, "adol_art_mort", { nda::dim<>(0, SS::hc2DS, 1), nda::dim<>(0, SS::hTS, (SS::hc2DS)), nda::dim<>(0, SS::hc2AG, (SS::hc2DS) * (SS::hTS)) }),
      .hc_art_isperc = parse_data<int, 1>(data, "artpaeds_isperc", { nda::dim<>(0, opts.proj_steps, 1) }),
      .hc_art_val = parse_data<real_type, 2>(data, "paed_art_val", { nda::dim<>(0, SS::hcAG_coarse, 1), nda::dim<>(0, opts.proj_steps, (SS::hcAG_coarse)) }),
      .hc_art_init_dist = parse_data<real_type, 2>(data, "init_art_dist", { nda::dim<>(0, SS::p_idx_hiv_first_adult, 1), nda::dim<>(0, opts.proj_steps, (SS::p_idx_hiv_first_adult)) }),
      .fert_mult_by_age = parse_data<real_type, 2>(data, "fert_rat", { nda::dim<>(0, SS::hc_p_fertility_age_groups, 1), nda::dim<>(0, opts.proj_steps, (SS::hc_p_fertility_age_groups)) }),
      .fert_mult_off_art = parse_data<real_type, 1>(data, "cd4fert_rat", { nda::dim<>(0, SS::hDS, 1) }),
      .fert_mult_on_art = parse_data<real_type, 1>(data, "frr_art6mos", { nda::dim<>(0, SS::hc_p_fertility_age_groups, 1) }),
      .total_fertility_rate = parse_data<real_type, 1>(data, "tfr", { nda::dim<>(0, opts.proj_steps, 1) }),
      .PMTCT = parse_data<real_type, 2>(data, "pmtct", { nda::dim<>(0, SS::hPS, 1), nda::dim<>(0, opts.proj_steps, (SS::hPS)) }),
      .vertical_transmission_rate = parse_data<real_type, 2>(data, "mtct", { nda::dim<>(0, SS::hDS + 1, 1), nda::dim<>(0, SS::hVT, (SS::hDS + 1)) }),
      .PMTCT_transmission_rate = parse_data<real_type, 3>(data, "pmtct_mtct", { nda::dim<>(0, SS::hDS, 1), nda::dim<>(0, SS::hPS, (SS::hDS)), nda::dim<>(0, SS::hVT, (SS::hDS) * (SS::hPS)) }),
      .PMTCT_dropout = parse_data<real_type, 3>(data, "pmtct_dropout", { nda::dim<>(0, SS::hPS, 1), nda::dim<>(0, SS::hVT_dropout, (SS::hPS)), nda::dim<>(0, opts.proj_steps, (SS::hPS) * (SS::hVT_dropout)) }),
      .PMTCT_input_is_percent = parse_data<int, 1>(data, "pmtct_input_isperc", { nda::dim<>(0, opts.proj_steps, 1) }),
      .breastfeeding_duration_art = parse_data<real_type, 2>(data, "bf_duration_art", { nda::dim<>(0, SS::hBF, 1), nda::dim<>(0, opts.proj_steps, (SS::hBF)) }),
      .breastfeeding_duration_no_art = parse_data<real_type, 2>(data, "bf_duration_no_art", { nda::dim<>(0, SS::hBF, 1), nda::dim<>(0, opts.proj_steps, (SS::hBF)) }),
      .infant_pop = parse_data<real_type, 3>(data, "infant_pop", { nda::dim<>(0, SS::hc_infant, 1), nda::dim<>(0, SS::NS, (SS::hc_infant)), nda::dim<>(0, opts.proj_steps, (SS::hc_infant) * (SS::NS)) }),
      .mat_hiv_births = parse_data<real_type, 1>(data, "mat_hiv_births", { nda::dim<>(0, opts.proj_steps, 1) }),
      .mat_prev_input = parse_data<int, 1>(data, "mat_prev_input", { nda::dim<>(0, opts.proj_steps, 1) }),
      .prop_lt200 = parse_data<real_type, 1>(data, "prop_lt200", { nda::dim<>(0, opts.proj_steps, 1) }),
      .prop_gte350 = parse_data<real_type, 1>(data, "prop_gte350", { nda::dim<>(0, opts.proj_steps, 1) }),
      .ctx_val_is_percent = parse_data<int, 1>(data, "ctx_val_ispercent", { nda::dim<>(0, opts.proj_steps, 1) }),
      .hc_art_is_age_spec = parse_data<int, 1>(data, "paed_art_age_spec", { nda::dim<>(0, opts.proj_steps, 1) }),
      .abortion = parse_data<real_type, 2>(data, "abortion", { nda::dim<>(0, SS::hAB_ind, 1), nda::dim<>(0, opts.proj_steps, (SS::hAB_ind)) }),
      .patients_reallocated = parse_data<real_type, 1>(data, "patients_reallocated", { nda::dim<>(0, opts.proj_steps, 1) }),
      .hc_art_ltfu = parse_data<real_type, 1>(data, "paed_art_ltfu", { nda::dim<>(0, opts.proj_steps, 1) }),
      .adult_female_infections = parse_data<real_type, 2>(data, "adult_female_infections", { nda::dim<>(0, SS::hc_p_fertility_age_groups, 1), nda::dim<>(0, opts.proj_steps, (SS::hc_p_fertility_age_groups)) }),
      .adult_female_hivnpop = parse_data<real_type, 2>(data, "hivnpop", { nda::dim<>(0, SS::hc_p_fertility_age_groups, 1), nda::dim<>(0, opts.proj_steps, (SS::hc_p_fertility_age_groups)) }),
      .total_births = parse_data<real_type, 1>(data, "total_births", { nda::dim<>(0, opts.proj_steps, 1) }),
      .ctx_effect = parse_data<real_type, 1>(data, "ctx_effect", { nda::dim<>(0, 3, 1) }),
      .hc_art_start = nb::cast<int>(data["hc_art_start"]),
      .local_adj_factor = nb::cast<real_type>(data["frr_scalar"]),
      .hc_age_specific_fertility_rate = parse_data<real_type, 2>(data, "hc_asfr", { nda::dim<>(0, SS::hc_p_fertility_age_groups, 1), nda::dim<>(0, opts.proj_steps, (SS::hc_p_fertility_age_groups)) })
    };
  };

  static Config::State get_initial_state(
    const nb::dict &data
  ) {
    typename Config::State state;
    fill_initial_state<real_type, typename Config::State::shape_hiv_births_by_mat_age>(data, "hiv_births_by_mat_age", state.hiv_births_by_mat_age);
    fill_initial_state<real_type, typename Config::State::shape_hc1_hiv_pop>(data, "hc1_hiv_pop", state.hc1_hiv_pop);
    fill_initial_state<real_type, typename Config::State::shape_hc2_hiv_pop>(data, "hc2_hiv_pop", state.hc2_hiv_pop);
    fill_initial_state<real_type, typename Config::State::shape_hc1_art_pop>(data, "hc1_art_pop", state.hc1_art_pop);
    fill_initial_state<real_type, typename Config::State::shape_hc2_art_pop>(data, "hc2_art_pop", state.hc2_art_pop);
    fill_initial_state<real_type, typename Config::State::shape_hc1_noart_aids_deaths>(data, "hc1_noart_aids_deaths", state.hc1_noart_aids_deaths);
    fill_initial_state<real_type, typename Config::State::shape_hc2_noart_aids_deaths>(data, "hc2_noart_aids_deaths", state.hc2_noart_aids_deaths);
    fill_initial_state<real_type, typename Config::State::shape_hc1_art_aids_deaths>(data, "hc1_art_aids_deaths", state.hc1_art_aids_deaths);
    fill_initial_state<real_type, typename Config::State::shape_hc2_art_aids_deaths>(data, "hc2_art_aids_deaths", state.hc2_art_aids_deaths);
    fill_initial_state<real_type, typename Config::State::shape_hc_art_init>(data, "hc_art_init", state.hc_art_init);
    fill_initial_state<real_type, typename Config::State::shape_hc_art_need_init>(data, "hc_art_need_init", state.hc_art_need_init);
    state.hiv_births = nb::cast<real_type>(data["hiv_births"]);
    state.ctx_need = nb::cast<real_type>(data["ctx_need"]);
    fill_initial_state<real_type, typename Config::State::shape_infection_by_type>(data, "infection_by_type", state.infection_by_type);
    fill_initial_state<real_type, typename Config::State::shape_mtct_by_source_tr>(data, "mtct_by_source_tr", state.mtct_by_source_tr);
    fill_initial_state<real_type, typename Config::State::shape_mtct_by_source_women>(data, "mtct_by_source_women", state.mtct_by_source_women);
    fill_initial_state<real_type, typename Config::State::shape_mtct_by_source_hc_infections>(data, "mtct_by_source_hc_infections", state.mtct_by_source_hc_infections);
    return state;
  };

  static constexpr int output_count = 17;

  static int build_output(
    int index,
    const Config::OutputState& state,
    nb::dict& ret,
    const size_t& output_years
  ) {
    const int py_rank_hiv_births_by_mat_age = 2;
    size_t py_dims_hiv_births_by_mat_age[py_rank_hiv_births_by_mat_age] = { SS::hc_p_fertility_age_groups, output_years };
    ret["hiv_births_by_mat_age"] = py_array<real_type>(state.hiv_births_by_mat_age.data(), py_rank_hiv_births_by_mat_age, py_dims_hiv_births_by_mat_age);
    const int py_rank_hc1_hiv_pop = 5;
    size_t py_dims_hc1_hiv_pop[py_rank_hc1_hiv_pop] = { SS::hc1DS, SS::hcTT, SS::hc1AG, SS::NS, output_years };
    ret["hc1_hiv_pop"] = py_array<real_type>(state.hc1_hiv_pop.data(), py_rank_hc1_hiv_pop, py_dims_hc1_hiv_pop);
    const int py_rank_hc2_hiv_pop = 5;
    size_t py_dims_hc2_hiv_pop[py_rank_hc2_hiv_pop] = { SS::hc2DS, SS::hcTT, SS::hc2AG, SS::NS, output_years };
    ret["hc2_hiv_pop"] = py_array<real_type>(state.hc2_hiv_pop.data(), py_rank_hc2_hiv_pop, py_dims_hc2_hiv_pop);
    const int py_rank_hc1_art_pop = 5;
    size_t py_dims_hc1_art_pop[py_rank_hc1_art_pop] = { SS::hTS, SS::hc1DS, SS::hc1AG, SS::NS, output_years };
    ret["hc1_art_pop"] = py_array<real_type>(state.hc1_art_pop.data(), py_rank_hc1_art_pop, py_dims_hc1_art_pop);
    const int py_rank_hc2_art_pop = 5;
    size_t py_dims_hc2_art_pop[py_rank_hc2_art_pop] = { SS::hTS, SS::hc2DS, SS::hc2AG, SS::NS, output_years };
    ret["hc2_art_pop"] = py_array<real_type>(state.hc2_art_pop.data(), py_rank_hc2_art_pop, py_dims_hc2_art_pop);
    const int py_rank_hc1_noart_aids_deaths = 5;
    size_t py_dims_hc1_noart_aids_deaths[py_rank_hc1_noart_aids_deaths] = { SS::hc1DS, SS::hcTT, SS::hc1AG, SS::NS, output_years };
    ret["hc1_noart_aids_deaths"] = py_array<real_type>(state.hc1_noart_aids_deaths.data(), py_rank_hc1_noart_aids_deaths, py_dims_hc1_noart_aids_deaths);
    const int py_rank_hc2_noart_aids_deaths = 5;
    size_t py_dims_hc2_noart_aids_deaths[py_rank_hc2_noart_aids_deaths] = { SS::hc2DS, SS::hcTT, SS::hc2AG, SS::NS, output_years };
    ret["hc2_noart_aids_deaths"] = py_array<real_type>(state.hc2_noart_aids_deaths.data(), py_rank_hc2_noart_aids_deaths, py_dims_hc2_noart_aids_deaths);
    const int py_rank_hc1_art_aids_deaths = 5;
    size_t py_dims_hc1_art_aids_deaths[py_rank_hc1_art_aids_deaths] = { SS::hTS, SS::hc1DS, SS::hc1AG, SS::NS, output_years };
    ret["hc1_art_aids_deaths"] = py_array<real_type>(state.hc1_art_aids_deaths.data(), py_rank_hc1_art_aids_deaths, py_dims_hc1_art_aids_deaths);
    const int py_rank_hc2_art_aids_deaths = 5;
    size_t py_dims_hc2_art_aids_deaths[py_rank_hc2_art_aids_deaths] = { SS::hTS, SS::hc2DS, SS::hc2AG, SS::NS, output_years };
    ret["hc2_art_aids_deaths"] = py_array<real_type>(state.hc2_art_aids_deaths.data(), py_rank_hc2_art_aids_deaths, py_dims_hc2_art_aids_deaths);
    const int py_rank_hc_art_init = 2;
    size_t py_dims_hc_art_init[py_rank_hc_art_init] = { SS::hcAG_coarse, output_years };
    ret["hc_art_init"] = py_array<real_type>(state.hc_art_init.data(), py_rank_hc_art_init, py_dims_hc_art_init);
    const int py_rank_hc_art_need_init = 5;
    size_t py_dims_hc_art_need_init[py_rank_hc_art_need_init] = { SS::hc1DS, SS::hcTT, SS::hcAG_end, SS::NS, output_years };
    ret["hc_art_need_init"] = py_array<real_type>(state.hc_art_need_init.data(), py_rank_hc_art_need_init, py_dims_hc_art_need_init);
    const int py_rank_hiv_births = 1;
    size_t py_dims_hiv_births[py_rank_hiv_births] = { output_years };
    ret["hiv_births"] = py_array<real_type>(state.hiv_births.data(), py_rank_hiv_births, py_dims_hiv_births);
    const int py_rank_ctx_need = 1;
    size_t py_dims_ctx_need[py_rank_ctx_need] = { output_years };
    ret["ctx_need"] = py_array<real_type>(state.ctx_need.data(), py_rank_ctx_need, py_dims_ctx_need);
    const int py_rank_infection_by_type = 4;
    size_t py_dims_infection_by_type[py_rank_infection_by_type] = { SS::hcTT, SS::hc1AG, SS::NS, output_years };
    ret["infection_by_type"] = py_array<real_type>(state.infection_by_type.data(), py_rank_infection_by_type, py_dims_infection_by_type);
    const int py_rank_mtct_by_source_tr = 3;
    size_t py_dims_mtct_by_source_tr[py_rank_mtct_by_source_tr] = { SS::mtct_source, SS::hcTT_expanded, output_years };
    ret["mtct_by_source_tr"] = py_array<real_type>(state.mtct_by_source_tr.data(), py_rank_mtct_by_source_tr, py_dims_mtct_by_source_tr);
    const int py_rank_mtct_by_source_women = 2;
    size_t py_dims_mtct_by_source_women[py_rank_mtct_by_source_women] = { SS::mtct_source, output_years };
    ret["mtct_by_source_women"] = py_array<real_type>(state.mtct_by_source_women.data(), py_rank_mtct_by_source_women, py_dims_mtct_by_source_women);
    const int py_rank_mtct_by_source_hc_infections = 3;
    size_t py_dims_mtct_by_source_hc_infections[py_rank_mtct_by_source_hc_infections] = { SS::mtct_source, SS::hcTT_expanded, output_years };
    ret["mtct_by_source_hc_infections"] = py_array<real_type>(state.mtct_by_source_hc_infections.data(), py_rank_mtct_by_source_hc_infections, py_dims_mtct_by_source_hc_infections);
    return index + output_count;
  };

  static int build_output_single_year(
    int index,
    const Config::State& state,
    nb::dict& ret
  ) {
    const int py_rank_hiv_births_by_mat_age = 1;
    size_t py_dims_hiv_births_by_mat_age[py_rank_hiv_births_by_mat_age] = { SS::hc_p_fertility_age_groups };
    ret["hiv_births_by_mat_age"] = py_array<real_type>(state.hiv_births_by_mat_age.data(), py_rank_hiv_births_by_mat_age, py_dims_hiv_births_by_mat_age);
    const int py_rank_hc1_hiv_pop = 4;
    size_t py_dims_hc1_hiv_pop[py_rank_hc1_hiv_pop] = { SS::hc1DS, SS::hcTT, SS::hc1AG, SS::NS };
    ret["hc1_hiv_pop"] = py_array<real_type>(state.hc1_hiv_pop.data(), py_rank_hc1_hiv_pop, py_dims_hc1_hiv_pop);
    const int py_rank_hc2_hiv_pop = 4;
    size_t py_dims_hc2_hiv_pop[py_rank_hc2_hiv_pop] = { SS::hc2DS, SS::hcTT, SS::hc2AG, SS::NS };
    ret["hc2_hiv_pop"] = py_array<real_type>(state.hc2_hiv_pop.data(), py_rank_hc2_hiv_pop, py_dims_hc2_hiv_pop);
    const int py_rank_hc1_art_pop = 4;
    size_t py_dims_hc1_art_pop[py_rank_hc1_art_pop] = { SS::hTS, SS::hc1DS, SS::hc1AG, SS::NS };
    ret["hc1_art_pop"] = py_array<real_type>(state.hc1_art_pop.data(), py_rank_hc1_art_pop, py_dims_hc1_art_pop);
    const int py_rank_hc2_art_pop = 4;
    size_t py_dims_hc2_art_pop[py_rank_hc2_art_pop] = { SS::hTS, SS::hc2DS, SS::hc2AG, SS::NS };
    ret["hc2_art_pop"] = py_array<real_type>(state.hc2_art_pop.data(), py_rank_hc2_art_pop, py_dims_hc2_art_pop);
    const int py_rank_hc1_noart_aids_deaths = 4;
    size_t py_dims_hc1_noart_aids_deaths[py_rank_hc1_noart_aids_deaths] = { SS::hc1DS, SS::hcTT, SS::hc1AG, SS::NS };
    ret["hc1_noart_aids_deaths"] = py_array<real_type>(state.hc1_noart_aids_deaths.data(), py_rank_hc1_noart_aids_deaths, py_dims_hc1_noart_aids_deaths);
    const int py_rank_hc2_noart_aids_deaths = 4;
    size_t py_dims_hc2_noart_aids_deaths[py_rank_hc2_noart_aids_deaths] = { SS::hc2DS, SS::hcTT, SS::hc2AG, SS::NS };
    ret["hc2_noart_aids_deaths"] = py_array<real_type>(state.hc2_noart_aids_deaths.data(), py_rank_hc2_noart_aids_deaths, py_dims_hc2_noart_aids_deaths);
    const int py_rank_hc1_art_aids_deaths = 4;
    size_t py_dims_hc1_art_aids_deaths[py_rank_hc1_art_aids_deaths] = { SS::hTS, SS::hc1DS, SS::hc1AG, SS::NS };
    ret["hc1_art_aids_deaths"] = py_array<real_type>(state.hc1_art_aids_deaths.data(), py_rank_hc1_art_aids_deaths, py_dims_hc1_art_aids_deaths);
    const int py_rank_hc2_art_aids_deaths = 4;
    size_t py_dims_hc2_art_aids_deaths[py_rank_hc2_art_aids_deaths] = { SS::hTS, SS::hc2DS, SS::hc2AG, SS::NS };
    ret["hc2_art_aids_deaths"] = py_array<real_type>(state.hc2_art_aids_deaths.data(), py_rank_hc2_art_aids_deaths, py_dims_hc2_art_aids_deaths);
    const int py_rank_hc_art_init = 1;
    size_t py_dims_hc_art_init[py_rank_hc_art_init] = { SS::hcAG_coarse };
    ret["hc_art_init"] = py_array<real_type>(state.hc_art_init.data(), py_rank_hc_art_init, py_dims_hc_art_init);
    const int py_rank_hc_art_need_init = 4;
    size_t py_dims_hc_art_need_init[py_rank_hc_art_need_init] = { SS::hc1DS, SS::hcTT, SS::hcAG_end, SS::NS };
    ret["hc_art_need_init"] = py_array<real_type>(state.hc_art_need_init.data(), py_rank_hc_art_need_init, py_dims_hc_art_need_init);
    ret["hiv_births"] = state.hiv_births;
    ret["ctx_need"] = state.ctx_need;
    const int py_rank_infection_by_type = 3;
    size_t py_dims_infection_by_type[py_rank_infection_by_type] = { SS::hcTT, SS::hc1AG, SS::NS };
    ret["infection_by_type"] = py_array<real_type>(state.infection_by_type.data(), py_rank_infection_by_type, py_dims_infection_by_type);
    const int py_rank_mtct_by_source_tr = 2;
    size_t py_dims_mtct_by_source_tr[py_rank_mtct_by_source_tr] = { SS::mtct_source, SS::hcTT_expanded };
    ret["mtct_by_source_tr"] = py_array<real_type>(state.mtct_by_source_tr.data(), py_rank_mtct_by_source_tr, py_dims_mtct_by_source_tr);
    const int py_rank_mtct_by_source_women = 1;
    size_t py_dims_mtct_by_source_women[py_rank_mtct_by_source_women] = { SS::mtct_source };
    ret["mtct_by_source_women"] = py_array<real_type>(state.mtct_by_source_women.data(), py_rank_mtct_by_source_women, py_dims_mtct_by_source_women);
    const int py_rank_mtct_by_source_hc_infections = 2;
    size_t py_dims_mtct_by_source_hc_infections[py_rank_mtct_by_source_hc_infections] = { SS::mtct_source, SS::hcTT_expanded };
    ret["mtct_by_source_hc_infections"] = py_array<real_type>(state.mtct_by_source_hc_infections.data(), py_rank_mtct_by_source_hc_infections, py_dims_mtct_by_source_hc_infections);
    return index + output_count;
  };
};

} // namespace internal
} // namespace leapfrog
