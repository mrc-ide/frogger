// Generated by leapfrog cpp_generation: do not edit by hand
// This file is automatically generated. Do not edit this file. If you want to make changes
// edit leapfrog json files in `cpp_generation/modelSchemas` and run `uv run ./src/main.py` inside
// the `cpp_generation` folder.

#pragma once

#include <Rcpp.h>

#include "../config_mixer.hpp"

namespace leapfrog {
namespace internal {

template <typename T>
T* r_data(SEXP x) {
  static_assert(sizeof(T) == 0, "Only specializations of r_data can be used");
}

template <>
double* r_data(SEXP x) {
  return REAL(x);
}

template <>
int* r_data(SEXP x) {
  return INTEGER(x);
}

template <typename T, size_t Rank>
nda::array_ref_of_rank<T, Rank> parse_data(const Rcpp::List& data, const std::string& key, nda::shape_of_rank<Rank> shape) {
  SEXP array_data = data[key];

  int actual_length = LENGTH(array_data);
  int expected_length = shape.flat_max() + 1;

  if (actual_length < expected_length) {
    Rcpp::stop(
      "Invalid size of data for '%s', expected %d got %d",
      key, expected_length, actual_length
    );
  }
  return { r_data<T>(array_data), shape };
}

template <typename T, typename Shape>
void fill_initial_state(const Rcpp::List& data, const std::string& key, nda::array<T, Shape>& array) {
  SEXP array_data = data[key];

  nda::array_ref<T, Shape> array_ref(r_data<T>(array_data));

  nda::for_each_index(Shape(), [&](auto i) {
    array[i] = array_ref[i];
  });
}

template<typename real_type, MV ModelVariant>
struct DpAdapter<Language::R, real_type, ModelVariant> {
  using SS = SSMixed<ModelVariant>;
  using Config = DpConfig<real_type, ModelVariant>;

  static Config::Pars get_pars(
    const Rcpp::List &data,
    const Options<real_type> &opts
  ) {
    return {
      .base_pop = parse_data<real_type, 2>(data, "basepop", { nda::dim<>(0, SS::pAG, 1), nda::dim<>(0, SS::NS, (SS::pAG)) }),
      .survival_probability = parse_data<real_type, 3>(data, "Sx", { nda::dim<>(0, SS::pAG + 1, 1), nda::dim<>(0, SS::NS, (SS::pAG + 1)), nda::dim<>(0, opts.proj_steps, (SS::pAG + 1) * (SS::NS)) }),
      .net_migration = parse_data<real_type, 3>(data, "netmigr_adj", { nda::dim<>(0, SS::pAG, 1), nda::dim<>(0, SS::NS, (SS::pAG)), nda::dim<>(0, opts.proj_steps, (SS::pAG) * (SS::NS)) }),
      .age_specific_fertility_rate = parse_data<real_type, 2>(data, "asfr", { nda::dim<>(0, SS::p_fertility_age_groups, 1), nda::dim<>(0, opts.proj_steps, (SS::p_fertility_age_groups)) }),
      .births_sex_prop = parse_data<real_type, 2>(data, "births_sex_prop", { nda::dim<>(0, SS::NS, 1), nda::dim<>(0, opts.proj_steps, (SS::NS)) })
    };
  };

  static Config::State get_initial_state(
    const Rcpp::List &data
  ) {
    typename Config::State state;
    fill_initial_state<real_type, typename Config::State::shape_p_total_pop>(data, "p_total_pop", state.p_total_pop);
    fill_initial_state<real_type, typename Config::State::shape_p_total_pop_background_deaths>(data, "p_total_pop_background_deaths", state.p_total_pop_background_deaths);
    state.births = Rcpp::as<real_type>(data["births"]);
    return state;
  };

  static constexpr int output_count = 3;

  static int build_output(
    int index,
    const Config::OutputState& state,
    Rcpp::List& ret,
    Rcpp::CharacterVector& names,
    const size_t& output_years
  ) {
    Rcpp::NumericVector r_p_total_pop(SS::pAG * SS::NS * output_years);
    r_p_total_pop.attr("dim") = Rcpp::IntegerVector::create(SS::pAG, SS::NS, output_years);
    std::copy_n(state.p_total_pop.data(), state.p_total_pop.size(), REAL(r_p_total_pop));
    names[index + 0] = "p_total_pop";
    ret[index + 0] = r_p_total_pop;
    Rcpp::NumericVector r_p_total_pop_background_deaths(SS::pAG * SS::NS * output_years);
    r_p_total_pop_background_deaths.attr("dim") = Rcpp::IntegerVector::create(SS::pAG, SS::NS, output_years);
    std::copy_n(state.p_total_pop_background_deaths.data(), state.p_total_pop_background_deaths.size(), REAL(r_p_total_pop_background_deaths));
    names[index + 1] = "p_total_pop_background_deaths";
    ret[index + 1] = r_p_total_pop_background_deaths;
    Rcpp::NumericVector r_births(output_years);
    r_births.attr("dim") = Rcpp::IntegerVector::create(output_years);
    std::copy_n(state.births.data(), state.births.size(), REAL(r_births));
    names[index + 2] = "births";
    ret[index + 2] = r_births;
    return index + output_count;
  };

  static int build_output_single_year(
    int index,
    const Config::State& state,
    Rcpp::List& ret,
    Rcpp::CharacterVector& names
  ) {
    Rcpp::NumericVector r_p_total_pop(SS::pAG * SS::NS);
    r_p_total_pop.attr("dim") = Rcpp::IntegerVector::create(SS::pAG, SS::NS);
    std::copy_n(state.p_total_pop.data(), state.p_total_pop.size(), REAL(r_p_total_pop));
    names[index + 0] = "p_total_pop";
    ret[index + 0] = r_p_total_pop;
    Rcpp::NumericVector r_p_total_pop_background_deaths(SS::pAG * SS::NS);
    r_p_total_pop_background_deaths.attr("dim") = Rcpp::IntegerVector::create(SS::pAG, SS::NS);
    std::copy_n(state.p_total_pop_background_deaths.data(), state.p_total_pop_background_deaths.size(), REAL(r_p_total_pop_background_deaths));
    names[index + 1] = "p_total_pop_background_deaths";
    ret[index + 1] = r_p_total_pop_background_deaths;
    names[index + 2] = "births";
    ret[index + 2] = state.births;
    return index + output_count;
  };
};

template<typename real_type, MV ModelVariant>
struct HaAdapter<Language::R, real_type, ModelVariant> {
  using SS = SSMixed<ModelVariant>;
  using Config = HaConfig<real_type, ModelVariant>;

  static Config::Pars get_pars(
    const Rcpp::List &data,
    const Options<real_type> &opts
  ) {
    return {
      .total_rate = parse_data<real_type, 1>(data, "incidinput", { nda::dim<>(0, opts.proj_steps, 1) }),
      .relative_risk_age = parse_data<real_type, 3>(data, "incrr_age", { nda::dim<>(0, SS::pAG - SS::p_idx_hiv_first_adult, 1), nda::dim<>(0, SS::NS, (SS::pAG - SS::p_idx_hiv_first_adult)), nda::dim<>(0, opts.proj_steps, (SS::pAG - SS::p_idx_hiv_first_adult) * (SS::NS)) }),
      .relative_risk_sex = parse_data<real_type, 1>(data, "incrr_sex", { nda::dim<>(0, opts.proj_steps, 1) }),
      .cd4_mortality = parse_data<real_type, 3>(data, "cd4_mort_full", { nda::dim<>(0, SS::hDS, 1), nda::dim<>(0, SS::hAG, (SS::hDS)), nda::dim<>(0, SS::NS, (SS::hDS) * (SS::hAG)) }),
      .cd4_progression = parse_data<real_type, 3>(data, "cd4_prog_full", { nda::dim<>(0, SS::hDS - 1, 1), nda::dim<>(0, SS::hAG, (SS::hDS - 1)), nda::dim<>(0, SS::NS, (SS::hDS - 1) * (SS::hAG)) }),
      .cd4_initial_distribution = parse_data<real_type, 3>(data, "cd4_initdist_full", { nda::dim<>(0, SS::hDS, 1), nda::dim<>(0, SS::hAG, (SS::hDS)), nda::dim<>(0, SS::NS, (SS::hDS) * (SS::hAG)) }),
      .scale_cd4_mortality = Rcpp::as<int>(data["scale_cd4_mort"]),
      .idx_hm_elig = parse_data<int, 1>(data, "artcd4elig_idx", { nda::dim<>(0, opts.proj_steps, 1) }),
      .mortality = parse_data<real_type, 4>(data, "art_mort_full", { nda::dim<>(0, SS::hTS, 1), nda::dim<>(0, SS::hDS, (SS::hTS)), nda::dim<>(0, SS::hAG, (SS::hTS) * (SS::hDS)), nda::dim<>(0, SS::NS, (SS::hTS) * (SS::hDS) * (SS::hAG)) }),
      .mortality_time_rate_ratio = parse_data<real_type, 2>(data, "artmx_timerr", { nda::dim<>(0, SS::hTS, 1), nda::dim<>(0, opts.proj_steps, (SS::hTS)) }),
      .dropout_recover_cd4 = Rcpp::as<int>(data["art_dropout_recover_cd4"]),
      .dropout_rate = parse_data<real_type, 1>(data, "art_dropout_rate", { nda::dim<>(0, opts.proj_steps, 1) }),
      .adults_on_art = parse_data<real_type, 2>(data, "art15plus_num", { nda::dim<>(0, SS::NS, 1), nda::dim<>(0, opts.proj_steps, (SS::NS)) }),
      .adults_on_art_is_percent = parse_data<int, 2>(data, "art15plus_isperc", { nda::dim<>(0, SS::NS, 1), nda::dim<>(0, opts.proj_steps, (SS::NS)) }),
      .initiation_mortality_weight = Rcpp::as<real_type>(data["art_alloc_mxweight"]),
      .h_art_stage_dur = parse_data<real_type, 1>(data, "h_art_stage_dur", { nda::dim<>(0, SS::hTS - 1, 1) })
    };
  };

  static Config::State get_initial_state(
    const Rcpp::List &data
  ) {
    typename Config::State state;
    fill_initial_state<real_type, typename Config::State::shape_p_hiv_pop>(data, "p_hiv_pop", state.p_hiv_pop);
    fill_initial_state<real_type, typename Config::State::shape_p_hiv_pop_background_deaths>(data, "p_hiv_pop_background_deaths", state.p_hiv_pop_background_deaths);
    fill_initial_state<real_type, typename Config::State::shape_h_hiv_adult>(data, "h_hiv_adult", state.h_hiv_adult);
    fill_initial_state<real_type, typename Config::State::shape_h_art_adult>(data, "h_art_adult", state.h_art_adult);
    fill_initial_state<real_type, typename Config::State::shape_h_hiv_deaths_no_art>(data, "h_hiv_deaths_no_art", state.h_hiv_deaths_no_art);
    fill_initial_state<real_type, typename Config::State::shape_p_infections>(data, "p_infections", state.p_infections);
    fill_initial_state<real_type, typename Config::State::shape_h_hiv_deaths_art>(data, "h_hiv_deaths_art", state.h_hiv_deaths_art);
    fill_initial_state<real_type, typename Config::State::shape_h_art_initiation>(data, "h_art_initiation", state.h_art_initiation);
    fill_initial_state<real_type, typename Config::State::shape_p_hiv_deaths>(data, "p_hiv_deaths", state.p_hiv_deaths);
    return state;
  };

  static constexpr int output_count = 9;

  static int build_output(
    int index,
    const Config::OutputState& state,
    Rcpp::List& ret,
    Rcpp::CharacterVector& names,
    const size_t& output_years
  ) {
    Rcpp::NumericVector r_p_hiv_pop(SS::pAG * SS::NS * output_years);
    r_p_hiv_pop.attr("dim") = Rcpp::IntegerVector::create(SS::pAG, SS::NS, output_years);
    std::copy_n(state.p_hiv_pop.data(), state.p_hiv_pop.size(), REAL(r_p_hiv_pop));
    names[index + 0] = "p_hiv_pop";
    ret[index + 0] = r_p_hiv_pop;
    Rcpp::NumericVector r_p_hiv_pop_background_deaths(SS::pAG * SS::NS * output_years);
    r_p_hiv_pop_background_deaths.attr("dim") = Rcpp::IntegerVector::create(SS::pAG, SS::NS, output_years);
    std::copy_n(state.p_hiv_pop_background_deaths.data(), state.p_hiv_pop_background_deaths.size(), REAL(r_p_hiv_pop_background_deaths));
    names[index + 1] = "p_hiv_pop_background_deaths";
    ret[index + 1] = r_p_hiv_pop_background_deaths;
    Rcpp::NumericVector r_h_hiv_adult(SS::hDS * SS::hAG * SS::NS * output_years);
    r_h_hiv_adult.attr("dim") = Rcpp::IntegerVector::create(SS::hDS, SS::hAG, SS::NS, output_years);
    std::copy_n(state.h_hiv_adult.data(), state.h_hiv_adult.size(), REAL(r_h_hiv_adult));
    names[index + 2] = "h_hiv_adult";
    ret[index + 2] = r_h_hiv_adult;
    Rcpp::NumericVector r_h_art_adult(SS::hTS * SS::hDS * SS::hAG * SS::NS * output_years);
    r_h_art_adult.attr("dim") = Rcpp::IntegerVector::create(SS::hTS, SS::hDS, SS::hAG, SS::NS, output_years);
    std::copy_n(state.h_art_adult.data(), state.h_art_adult.size(), REAL(r_h_art_adult));
    names[index + 3] = "h_art_adult";
    ret[index + 3] = r_h_art_adult;
    Rcpp::NumericVector r_h_hiv_deaths_no_art(SS::hDS * SS::hAG * SS::NS * output_years);
    r_h_hiv_deaths_no_art.attr("dim") = Rcpp::IntegerVector::create(SS::hDS, SS::hAG, SS::NS, output_years);
    std::copy_n(state.h_hiv_deaths_no_art.data(), state.h_hiv_deaths_no_art.size(), REAL(r_h_hiv_deaths_no_art));
    names[index + 4] = "h_hiv_deaths_no_art";
    ret[index + 4] = r_h_hiv_deaths_no_art;
    Rcpp::NumericVector r_p_infections(SS::pAG * SS::NS * output_years);
    r_p_infections.attr("dim") = Rcpp::IntegerVector::create(SS::pAG, SS::NS, output_years);
    std::copy_n(state.p_infections.data(), state.p_infections.size(), REAL(r_p_infections));
    names[index + 5] = "p_infections";
    ret[index + 5] = r_p_infections;
    Rcpp::NumericVector r_h_hiv_deaths_art(SS::hTS * SS::hDS * SS::hAG * SS::NS * output_years);
    r_h_hiv_deaths_art.attr("dim") = Rcpp::IntegerVector::create(SS::hTS, SS::hDS, SS::hAG, SS::NS, output_years);
    std::copy_n(state.h_hiv_deaths_art.data(), state.h_hiv_deaths_art.size(), REAL(r_h_hiv_deaths_art));
    names[index + 6] = "h_hiv_deaths_art";
    ret[index + 6] = r_h_hiv_deaths_art;
    Rcpp::NumericVector r_h_art_initiation(SS::hDS * SS::hAG * SS::NS * output_years);
    r_h_art_initiation.attr("dim") = Rcpp::IntegerVector::create(SS::hDS, SS::hAG, SS::NS, output_years);
    std::copy_n(state.h_art_initiation.data(), state.h_art_initiation.size(), REAL(r_h_art_initiation));
    names[index + 7] = "h_art_initiation";
    ret[index + 7] = r_h_art_initiation;
    Rcpp::NumericVector r_p_hiv_deaths(SS::pAG * SS::NS * output_years);
    r_p_hiv_deaths.attr("dim") = Rcpp::IntegerVector::create(SS::pAG, SS::NS, output_years);
    std::copy_n(state.p_hiv_deaths.data(), state.p_hiv_deaths.size(), REAL(r_p_hiv_deaths));
    names[index + 8] = "p_hiv_deaths";
    ret[index + 8] = r_p_hiv_deaths;
    return index + output_count;
  };

  static int build_output_single_year(
    int index,
    const Config::State& state,
    Rcpp::List& ret,
    Rcpp::CharacterVector& names
  ) {
    Rcpp::NumericVector r_p_hiv_pop(SS::pAG * SS::NS);
    r_p_hiv_pop.attr("dim") = Rcpp::IntegerVector::create(SS::pAG, SS::NS);
    std::copy_n(state.p_hiv_pop.data(), state.p_hiv_pop.size(), REAL(r_p_hiv_pop));
    names[index + 0] = "p_hiv_pop";
    ret[index + 0] = r_p_hiv_pop;
    Rcpp::NumericVector r_p_hiv_pop_background_deaths(SS::pAG * SS::NS);
    r_p_hiv_pop_background_deaths.attr("dim") = Rcpp::IntegerVector::create(SS::pAG, SS::NS);
    std::copy_n(state.p_hiv_pop_background_deaths.data(), state.p_hiv_pop_background_deaths.size(), REAL(r_p_hiv_pop_background_deaths));
    names[index + 1] = "p_hiv_pop_background_deaths";
    ret[index + 1] = r_p_hiv_pop_background_deaths;
    Rcpp::NumericVector r_h_hiv_adult(SS::hDS * SS::hAG * SS::NS);
    r_h_hiv_adult.attr("dim") = Rcpp::IntegerVector::create(SS::hDS, SS::hAG, SS::NS);
    std::copy_n(state.h_hiv_adult.data(), state.h_hiv_adult.size(), REAL(r_h_hiv_adult));
    names[index + 2] = "h_hiv_adult";
    ret[index + 2] = r_h_hiv_adult;
    Rcpp::NumericVector r_h_art_adult(SS::hTS * SS::hDS * SS::hAG * SS::NS);
    r_h_art_adult.attr("dim") = Rcpp::IntegerVector::create(SS::hTS, SS::hDS, SS::hAG, SS::NS);
    std::copy_n(state.h_art_adult.data(), state.h_art_adult.size(), REAL(r_h_art_adult));
    names[index + 3] = "h_art_adult";
    ret[index + 3] = r_h_art_adult;
    Rcpp::NumericVector r_h_hiv_deaths_no_art(SS::hDS * SS::hAG * SS::NS);
    r_h_hiv_deaths_no_art.attr("dim") = Rcpp::IntegerVector::create(SS::hDS, SS::hAG, SS::NS);
    std::copy_n(state.h_hiv_deaths_no_art.data(), state.h_hiv_deaths_no_art.size(), REAL(r_h_hiv_deaths_no_art));
    names[index + 4] = "h_hiv_deaths_no_art";
    ret[index + 4] = r_h_hiv_deaths_no_art;
    Rcpp::NumericVector r_p_infections(SS::pAG * SS::NS);
    r_p_infections.attr("dim") = Rcpp::IntegerVector::create(SS::pAG, SS::NS);
    std::copy_n(state.p_infections.data(), state.p_infections.size(), REAL(r_p_infections));
    names[index + 5] = "p_infections";
    ret[index + 5] = r_p_infections;
    Rcpp::NumericVector r_h_hiv_deaths_art(SS::hTS * SS::hDS * SS::hAG * SS::NS);
    r_h_hiv_deaths_art.attr("dim") = Rcpp::IntegerVector::create(SS::hTS, SS::hDS, SS::hAG, SS::NS);
    std::copy_n(state.h_hiv_deaths_art.data(), state.h_hiv_deaths_art.size(), REAL(r_h_hiv_deaths_art));
    names[index + 6] = "h_hiv_deaths_art";
    ret[index + 6] = r_h_hiv_deaths_art;
    Rcpp::NumericVector r_h_art_initiation(SS::hDS * SS::hAG * SS::NS);
    r_h_art_initiation.attr("dim") = Rcpp::IntegerVector::create(SS::hDS, SS::hAG, SS::NS);
    std::copy_n(state.h_art_initiation.data(), state.h_art_initiation.size(), REAL(r_h_art_initiation));
    names[index + 7] = "h_art_initiation";
    ret[index + 7] = r_h_art_initiation;
    Rcpp::NumericVector r_p_hiv_deaths(SS::pAG * SS::NS);
    r_p_hiv_deaths.attr("dim") = Rcpp::IntegerVector::create(SS::pAG, SS::NS);
    std::copy_n(state.p_hiv_deaths.data(), state.p_hiv_deaths.size(), REAL(r_p_hiv_deaths));
    names[index + 8] = "p_hiv_deaths";
    ret[index + 8] = r_p_hiv_deaths;
    return index + output_count;
  };
};

template<typename real_type, MV ModelVariant>
struct HcAdapter<Language::R, real_type, ModelVariant> {
  using SS = SSMixed<ModelVariant>;
  using Config = HcConfig<real_type, ModelVariant>;

  static Config::Pars get_pars(
    const Rcpp::List &data,
    const Options<real_type> &opts
  ) {
    return {
      .hc_nosocomial = parse_data<real_type, 1>(data, "paed_incid_input", { nda::dim<>(0, opts.proj_steps, 1) }),
      .hc1_cd4_dist = parse_data<real_type, 1>(data, "paed_cd4_dist", { nda::dim<>(0, SS::hc1DS, 1) }),
      .hc1_cd4_mort = parse_data<real_type, 3>(data, "paed_cd4_mort", { nda::dim<>(0, SS::hc1DS, 1), nda::dim<>(0, SS::hcTT, (SS::hc1DS)), nda::dim<>(0, SS::hc1AG, (SS::hc1DS) * (SS::hcTT)) }),
      .hc2_cd4_mort = parse_data<real_type, 3>(data, "adol_cd4_mort", { nda::dim<>(0, SS::hc2DS, 1), nda::dim<>(0, SS::hcTT, (SS::hc2DS)), nda::dim<>(0, SS::hc2AG, (SS::hc2DS) * (SS::hcTT)) }),
      .hc1_cd4_prog = parse_data<real_type, 3>(data, "paed_cd4_prog", { nda::dim<>(0, SS::hc1DS, 1), nda::dim<>(0, SS::hc1AG_c, (SS::hc1DS)), nda::dim<>(0, SS::NS, (SS::hc1DS) * (SS::hc1AG_c)) }),
      .hc2_cd4_prog = parse_data<real_type, 3>(data, "adol_cd4_prog", { nda::dim<>(0, SS::hc2DS, 1), nda::dim<>(0, SS::hc2AG_c, (SS::hc2DS)), nda::dim<>(0, SS::NS, (SS::hc2DS) * (SS::hc2AG_c)) }),
      .ctx_val = parse_data<real_type, 1>(data, "ctx_val", { nda::dim<>(0, opts.proj_steps, 1) }),
      .hc_art_elig_age = parse_data<int, 1>(data, "paed_art_elig_age", { nda::dim<>(0, opts.proj_steps, 1) }),
      .hc_art_elig_cd4 = parse_data<int, 2>(data, "paed_art_elig_cd4", { nda::dim<>(0, SS::p_idx_hiv_first_adult, 1), nda::dim<>(0, opts.proj_steps, (SS::p_idx_hiv_first_adult)) }),
      .hc_art_mort_rr = parse_data<real_type, 3>(data, "mort_art_rr", { nda::dim<>(0, SS::hTS, 1), nda::dim<>(0, SS::p_idx_hiv_first_adult, (SS::hTS)), nda::dim<>(0, opts.proj_steps, (SS::hTS) * (SS::p_idx_hiv_first_adult)) }),
      .hc1_art_mort = parse_data<real_type, 3>(data, "paed_art_mort", { nda::dim<>(0, SS::hc1DS, 1), nda::dim<>(0, SS::hTS, (SS::hc1DS)), nda::dim<>(0, SS::hc1AG, (SS::hc1DS) * (SS::hTS)) }),
      .hc2_art_mort = parse_data<real_type, 3>(data, "adol_art_mort", { nda::dim<>(0, SS::hc2DS, 1), nda::dim<>(0, SS::hTS, (SS::hc2DS)), nda::dim<>(0, SS::hc2AG, (SS::hc2DS) * (SS::hTS)) }),
      .hc_art_isperc = parse_data<int, 1>(data, "artpaeds_isperc", { nda::dim<>(0, opts.proj_steps, 1) }),
      .hc_art_val = parse_data<real_type, 2>(data, "paed_art_val", { nda::dim<>(0, SS::hcAG_coarse, 1), nda::dim<>(0, opts.proj_steps, (SS::hcAG_coarse)) }),
      .hc_art_init_dist = parse_data<real_type, 2>(data, "init_art_dist", { nda::dim<>(0, SS::p_idx_hiv_first_adult, 1), nda::dim<>(0, opts.proj_steps, (SS::p_idx_hiv_first_adult)) }),
      .fert_mult_by_age = parse_data<real_type, 2>(data, "fert_rat_full", { nda::dim<>(0, SS::hc_p_fertility_age_groups, 1), nda::dim<>(0, opts.proj_steps, (SS::hc_p_fertility_age_groups)) }),
      .fert_mult_off_art = parse_data<real_type, 1>(data, "cd4fert_rat", { nda::dim<>(0, SS::hDS, 1) }),
      .fert_mult_on_art = parse_data<real_type, 1>(data, "frr_art6mos_full", { nda::dim<>(0, SS::hc_p_fertility_age_groups, 1) }),
      .total_fertility_rate = parse_data<real_type, 1>(data, "tfr", { nda::dim<>(0, opts.proj_steps, 1) }),
      .PMTCT = parse_data<real_type, 2>(data, "pmtct", { nda::dim<>(0, SS::hPS, 1), nda::dim<>(0, opts.proj_steps, (SS::hPS)) }),
      .vertical_transmission_rate = parse_data<real_type, 2>(data, "mtct", { nda::dim<>(0, SS::hDS + 1, 1), nda::dim<>(0, SS::hVT, (SS::hDS + 1)) }),
      .PMTCT_transmission_rate = parse_data<real_type, 3>(data, "pmtct_mtct", { nda::dim<>(0, SS::hDS, 1), nda::dim<>(0, SS::hPS, (SS::hDS)), nda::dim<>(0, SS::hVT, (SS::hDS) * (SS::hPS)) }),
      .PMTCT_dropout = parse_data<real_type, 2>(data, "pmtct_dropout", { nda::dim<>(0, SS::hPS_dropout, 1), nda::dim<>(0, opts.proj_steps, (SS::hPS_dropout)) }),
      .PMTCT_input_is_percent = parse_data<int, 1>(data, "pmtct_input_isperc", { nda::dim<>(0, opts.proj_steps, 1) }),
      .breastfeeding_duration_art = parse_data<real_type, 2>(data, "bf_duration_art", { nda::dim<>(0, SS::hBF, 1), nda::dim<>(0, opts.proj_steps, (SS::hBF)) }),
      .breastfeeding_duration_no_art = parse_data<real_type, 2>(data, "bf_duration_no_art", { nda::dim<>(0, SS::hBF, 1), nda::dim<>(0, opts.proj_steps, (SS::hBF)) }),
      .mat_hiv_births = parse_data<real_type, 1>(data, "mat_hiv_births", { nda::dim<>(0, opts.proj_steps, 1) }),
      .mat_prev_input = parse_data<int, 1>(data, "mat_prev_input", { nda::dim<>(0, opts.proj_steps, 1) }),
      .prop_lt200 = parse_data<real_type, 1>(data, "prop_lt200", { nda::dim<>(0, opts.proj_steps, 1) }),
      .prop_gte350 = parse_data<real_type, 1>(data, "prop_gte350", { nda::dim<>(0, opts.proj_steps, 1) }),
      .ctx_val_is_percent = parse_data<int, 1>(data, "ctx_val_ispercent", { nda::dim<>(0, opts.proj_steps, 1) }),
      .hc_art_is_age_spec = parse_data<int, 1>(data, "paed_art_age_spec", { nda::dim<>(0, opts.proj_steps, 1) }),
      .abortion = parse_data<real_type, 2>(data, "abortion", { nda::dim<>(0, SS::hAB_ind, 1), nda::dim<>(0, opts.proj_steps, (SS::hAB_ind)) }),
      .patients_reallocated = parse_data<real_type, 1>(data, "patients_reallocated", { nda::dim<>(0, opts.proj_steps, 1) }),
      .hc_art_ltfu = parse_data<real_type, 1>(data, "paed_art_ltfu", { nda::dim<>(0, opts.proj_steps, 1) }),
      .adult_female_infections = parse_data<real_type, 2>(data, "adult_female_infections_full", { nda::dim<>(0, SS::hc_p_fertility_age_groups, 1), nda::dim<>(0, opts.proj_steps, (SS::hc_p_fertility_age_groups)) }),
      .adult_female_hivnpop = parse_data<real_type, 2>(data, "hivnpop_full", { nda::dim<>(0, SS::hc_p_fertility_age_groups, 1), nda::dim<>(0, opts.proj_steps, (SS::hc_p_fertility_age_groups)) }),
      .total_births = parse_data<real_type, 1>(data, "total_births", { nda::dim<>(0, opts.proj_steps, 1) }),
      .ctx_effect = parse_data<real_type, 1>(data, "ctx_effect", { nda::dim<>(0, 3, 1) }),
      .hc_art_start = Rcpp::as<int>(data["hc_art_start"]),
      .local_adj_factor = Rcpp::as<real_type>(data["frr_scalar"]),
      .hc_age_specific_fertility_rate = parse_data<real_type, 2>(data, "asfr_coarse", { nda::dim<>(0, SS::hc_p_fertility_age_groups, 1), nda::dim<>(0, opts.proj_steps, (SS::hc_p_fertility_age_groups)) })
    };
  };

  static Config::State get_initial_state(
    const Rcpp::List &data
  ) {
    typename Config::State state;
    fill_initial_state<real_type, typename Config::State::shape_hc1_hiv_pop>(data, "hc1_hiv_pop", state.hc1_hiv_pop);
    fill_initial_state<real_type, typename Config::State::shape_hc2_hiv_pop>(data, "hc2_hiv_pop", state.hc2_hiv_pop);
    fill_initial_state<real_type, typename Config::State::shape_hc1_art_pop>(data, "hc1_art_pop", state.hc1_art_pop);
    fill_initial_state<real_type, typename Config::State::shape_hc2_art_pop>(data, "hc2_art_pop", state.hc2_art_pop);
    fill_initial_state<real_type, typename Config::State::shape_hc1_noart_aids_deaths>(data, "hc1_noart_aids_deaths", state.hc1_noart_aids_deaths);
    fill_initial_state<real_type, typename Config::State::shape_hc2_noart_aids_deaths>(data, "hc2_noart_aids_deaths", state.hc2_noart_aids_deaths);
    fill_initial_state<real_type, typename Config::State::shape_hc1_art_aids_deaths>(data, "hc1_art_aids_deaths", state.hc1_art_aids_deaths);
    fill_initial_state<real_type, typename Config::State::shape_hc2_art_aids_deaths>(data, "hc2_art_aids_deaths", state.hc2_art_aids_deaths);
    fill_initial_state<real_type, typename Config::State::shape_hc_art_init>(data, "hc_art_init", state.hc_art_init);
    fill_initial_state<real_type, typename Config::State::shape_hc_art_need_init>(data, "hc_art_need_init", state.hc_art_need_init);
    state.hiv_births = Rcpp::as<real_type>(data["hiv_births"]);
    state.ctx_need = Rcpp::as<real_type>(data["ctx_need"]);
    fill_initial_state<real_type, typename Config::State::shape_infection_by_type>(data, "infection_by_type", state.infection_by_type);
    return state;
  };

  static constexpr int output_count = 13;

  static int build_output(
    int index,
    const Config::OutputState& state,
    Rcpp::List& ret,
    Rcpp::CharacterVector& names,
    const size_t& output_years
  ) {
    Rcpp::NumericVector r_hc1_hiv_pop(SS::hc1DS * SS::hcTT * SS::hc1AG * SS::NS * output_years);
    r_hc1_hiv_pop.attr("dim") = Rcpp::IntegerVector::create(SS::hc1DS, SS::hcTT, SS::hc1AG, SS::NS, output_years);
    std::copy_n(state.hc1_hiv_pop.data(), state.hc1_hiv_pop.size(), REAL(r_hc1_hiv_pop));
    names[index + 0] = "hc1_hiv_pop";
    ret[index + 0] = r_hc1_hiv_pop;
    Rcpp::NumericVector r_hc2_hiv_pop(SS::hc2DS * SS::hcTT * SS::hc2AG * SS::NS * output_years);
    r_hc2_hiv_pop.attr("dim") = Rcpp::IntegerVector::create(SS::hc2DS, SS::hcTT, SS::hc2AG, SS::NS, output_years);
    std::copy_n(state.hc2_hiv_pop.data(), state.hc2_hiv_pop.size(), REAL(r_hc2_hiv_pop));
    names[index + 1] = "hc2_hiv_pop";
    ret[index + 1] = r_hc2_hiv_pop;
    Rcpp::NumericVector r_hc1_art_pop(SS::hTS * SS::hc1DS * SS::hc1AG * SS::NS * output_years);
    r_hc1_art_pop.attr("dim") = Rcpp::IntegerVector::create(SS::hTS, SS::hc1DS, SS::hc1AG, SS::NS, output_years);
    std::copy_n(state.hc1_art_pop.data(), state.hc1_art_pop.size(), REAL(r_hc1_art_pop));
    names[index + 2] = "hc1_art_pop";
    ret[index + 2] = r_hc1_art_pop;
    Rcpp::NumericVector r_hc2_art_pop(SS::hTS * SS::hc2DS * SS::hc2AG * SS::NS * output_years);
    r_hc2_art_pop.attr("dim") = Rcpp::IntegerVector::create(SS::hTS, SS::hc2DS, SS::hc2AG, SS::NS, output_years);
    std::copy_n(state.hc2_art_pop.data(), state.hc2_art_pop.size(), REAL(r_hc2_art_pop));
    names[index + 3] = "hc2_art_pop";
    ret[index + 3] = r_hc2_art_pop;
    Rcpp::NumericVector r_hc1_noart_aids_deaths(SS::hc1DS * SS::hcTT * SS::hc1AG * SS::NS * output_years);
    r_hc1_noart_aids_deaths.attr("dim") = Rcpp::IntegerVector::create(SS::hc1DS, SS::hcTT, SS::hc1AG, SS::NS, output_years);
    std::copy_n(state.hc1_noart_aids_deaths.data(), state.hc1_noart_aids_deaths.size(), REAL(r_hc1_noart_aids_deaths));
    names[index + 4] = "hc1_noart_aids_deaths";
    ret[index + 4] = r_hc1_noart_aids_deaths;
    Rcpp::NumericVector r_hc2_noart_aids_deaths(SS::hc2DS * SS::hcTT * SS::hc2AG * SS::NS * output_years);
    r_hc2_noart_aids_deaths.attr("dim") = Rcpp::IntegerVector::create(SS::hc2DS, SS::hcTT, SS::hc2AG, SS::NS, output_years);
    std::copy_n(state.hc2_noart_aids_deaths.data(), state.hc2_noart_aids_deaths.size(), REAL(r_hc2_noart_aids_deaths));
    names[index + 5] = "hc2_noart_aids_deaths";
    ret[index + 5] = r_hc2_noart_aids_deaths;
    Rcpp::NumericVector r_hc1_art_aids_deaths(SS::hTS * SS::hc1DS * SS::hc1AG * SS::NS * output_years);
    r_hc1_art_aids_deaths.attr("dim") = Rcpp::IntegerVector::create(SS::hTS, SS::hc1DS, SS::hc1AG, SS::NS, output_years);
    std::copy_n(state.hc1_art_aids_deaths.data(), state.hc1_art_aids_deaths.size(), REAL(r_hc1_art_aids_deaths));
    names[index + 6] = "hc1_art_aids_deaths";
    ret[index + 6] = r_hc1_art_aids_deaths;
    Rcpp::NumericVector r_hc2_art_aids_deaths(SS::hTS * SS::hc2DS * SS::hc2AG * SS::NS * output_years);
    r_hc2_art_aids_deaths.attr("dim") = Rcpp::IntegerVector::create(SS::hTS, SS::hc2DS, SS::hc2AG, SS::NS, output_years);
    std::copy_n(state.hc2_art_aids_deaths.data(), state.hc2_art_aids_deaths.size(), REAL(r_hc2_art_aids_deaths));
    names[index + 7] = "hc2_art_aids_deaths";
    ret[index + 7] = r_hc2_art_aids_deaths;
    Rcpp::NumericVector r_hc_art_init(SS::hcAG_coarse * output_years);
    r_hc_art_init.attr("dim") = Rcpp::IntegerVector::create(SS::hcAG_coarse, output_years);
    std::copy_n(state.hc_art_init.data(), state.hc_art_init.size(), REAL(r_hc_art_init));
    names[index + 8] = "hc_art_init";
    ret[index + 8] = r_hc_art_init;
    Rcpp::NumericVector r_hc_art_need_init(SS::hc1DS * SS::hcTT * SS::hcAG_end * SS::NS * output_years);
    r_hc_art_need_init.attr("dim") = Rcpp::IntegerVector::create(SS::hc1DS, SS::hcTT, SS::hcAG_end, SS::NS, output_years);
    std::copy_n(state.hc_art_need_init.data(), state.hc_art_need_init.size(), REAL(r_hc_art_need_init));
    names[index + 9] = "hc_art_need_init";
    ret[index + 9] = r_hc_art_need_init;
    Rcpp::NumericVector r_hiv_births(output_years);
    r_hiv_births.attr("dim") = Rcpp::IntegerVector::create(output_years);
    std::copy_n(state.hiv_births.data(), state.hiv_births.size(), REAL(r_hiv_births));
    names[index + 10] = "hiv_births";
    ret[index + 10] = r_hiv_births;
    Rcpp::NumericVector r_ctx_need(output_years);
    r_ctx_need.attr("dim") = Rcpp::IntegerVector::create(output_years);
    std::copy_n(state.ctx_need.data(), state.ctx_need.size(), REAL(r_ctx_need));
    names[index + 11] = "ctx_need";
    ret[index + 11] = r_ctx_need;
    Rcpp::NumericVector r_infection_by_type(SS::hcTT * SS::hc1AG * SS::NS * output_years);
    r_infection_by_type.attr("dim") = Rcpp::IntegerVector::create(SS::hcTT, SS::hc1AG, SS::NS, output_years);
    std::copy_n(state.infection_by_type.data(), state.infection_by_type.size(), REAL(r_infection_by_type));
    names[index + 12] = "infection_by_type";
    ret[index + 12] = r_infection_by_type;
    return index + output_count;
  };

  static int build_output_single_year(
    int index,
    const Config::State& state,
    Rcpp::List& ret,
    Rcpp::CharacterVector& names
  ) {
    Rcpp::NumericVector r_hc1_hiv_pop(SS::hc1DS * SS::hcTT * SS::hc1AG * SS::NS);
    r_hc1_hiv_pop.attr("dim") = Rcpp::IntegerVector::create(SS::hc1DS, SS::hcTT, SS::hc1AG, SS::NS);
    std::copy_n(state.hc1_hiv_pop.data(), state.hc1_hiv_pop.size(), REAL(r_hc1_hiv_pop));
    names[index + 0] = "hc1_hiv_pop";
    ret[index + 0] = r_hc1_hiv_pop;
    Rcpp::NumericVector r_hc2_hiv_pop(SS::hc2DS * SS::hcTT * SS::hc2AG * SS::NS);
    r_hc2_hiv_pop.attr("dim") = Rcpp::IntegerVector::create(SS::hc2DS, SS::hcTT, SS::hc2AG, SS::NS);
    std::copy_n(state.hc2_hiv_pop.data(), state.hc2_hiv_pop.size(), REAL(r_hc2_hiv_pop));
    names[index + 1] = "hc2_hiv_pop";
    ret[index + 1] = r_hc2_hiv_pop;
    Rcpp::NumericVector r_hc1_art_pop(SS::hTS * SS::hc1DS * SS::hc1AG * SS::NS);
    r_hc1_art_pop.attr("dim") = Rcpp::IntegerVector::create(SS::hTS, SS::hc1DS, SS::hc1AG, SS::NS);
    std::copy_n(state.hc1_art_pop.data(), state.hc1_art_pop.size(), REAL(r_hc1_art_pop));
    names[index + 2] = "hc1_art_pop";
    ret[index + 2] = r_hc1_art_pop;
    Rcpp::NumericVector r_hc2_art_pop(SS::hTS * SS::hc2DS * SS::hc2AG * SS::NS);
    r_hc2_art_pop.attr("dim") = Rcpp::IntegerVector::create(SS::hTS, SS::hc2DS, SS::hc2AG, SS::NS);
    std::copy_n(state.hc2_art_pop.data(), state.hc2_art_pop.size(), REAL(r_hc2_art_pop));
    names[index + 3] = "hc2_art_pop";
    ret[index + 3] = r_hc2_art_pop;
    Rcpp::NumericVector r_hc1_noart_aids_deaths(SS::hc1DS * SS::hcTT * SS::hc1AG * SS::NS);
    r_hc1_noart_aids_deaths.attr("dim") = Rcpp::IntegerVector::create(SS::hc1DS, SS::hcTT, SS::hc1AG, SS::NS);
    std::copy_n(state.hc1_noart_aids_deaths.data(), state.hc1_noart_aids_deaths.size(), REAL(r_hc1_noart_aids_deaths));
    names[index + 4] = "hc1_noart_aids_deaths";
    ret[index + 4] = r_hc1_noart_aids_deaths;
    Rcpp::NumericVector r_hc2_noart_aids_deaths(SS::hc2DS * SS::hcTT * SS::hc2AG * SS::NS);
    r_hc2_noart_aids_deaths.attr("dim") = Rcpp::IntegerVector::create(SS::hc2DS, SS::hcTT, SS::hc2AG, SS::NS);
    std::copy_n(state.hc2_noart_aids_deaths.data(), state.hc2_noart_aids_deaths.size(), REAL(r_hc2_noart_aids_deaths));
    names[index + 5] = "hc2_noart_aids_deaths";
    ret[index + 5] = r_hc2_noart_aids_deaths;
    Rcpp::NumericVector r_hc1_art_aids_deaths(SS::hTS * SS::hc1DS * SS::hc1AG * SS::NS);
    r_hc1_art_aids_deaths.attr("dim") = Rcpp::IntegerVector::create(SS::hTS, SS::hc1DS, SS::hc1AG, SS::NS);
    std::copy_n(state.hc1_art_aids_deaths.data(), state.hc1_art_aids_deaths.size(), REAL(r_hc1_art_aids_deaths));
    names[index + 6] = "hc1_art_aids_deaths";
    ret[index + 6] = r_hc1_art_aids_deaths;
    Rcpp::NumericVector r_hc2_art_aids_deaths(SS::hTS * SS::hc2DS * SS::hc2AG * SS::NS);
    r_hc2_art_aids_deaths.attr("dim") = Rcpp::IntegerVector::create(SS::hTS, SS::hc2DS, SS::hc2AG, SS::NS);
    std::copy_n(state.hc2_art_aids_deaths.data(), state.hc2_art_aids_deaths.size(), REAL(r_hc2_art_aids_deaths));
    names[index + 7] = "hc2_art_aids_deaths";
    ret[index + 7] = r_hc2_art_aids_deaths;
    Rcpp::NumericVector r_hc_art_init(SS::hcAG_coarse);
    r_hc_art_init.attr("dim") = Rcpp::IntegerVector::create(SS::hcAG_coarse);
    std::copy_n(state.hc_art_init.data(), state.hc_art_init.size(), REAL(r_hc_art_init));
    names[index + 8] = "hc_art_init";
    ret[index + 8] = r_hc_art_init;
    Rcpp::NumericVector r_hc_art_need_init(SS::hc1DS * SS::hcTT * SS::hcAG_end * SS::NS);
    r_hc_art_need_init.attr("dim") = Rcpp::IntegerVector::create(SS::hc1DS, SS::hcTT, SS::hcAG_end, SS::NS);
    std::copy_n(state.hc_art_need_init.data(), state.hc_art_need_init.size(), REAL(r_hc_art_need_init));
    names[index + 9] = "hc_art_need_init";
    ret[index + 9] = r_hc_art_need_init;
    names[index + 10] = "hiv_births";
    ret[index + 10] = state.hiv_births;
    names[index + 11] = "ctx_need";
    ret[index + 11] = state.ctx_need;
    Rcpp::NumericVector r_infection_by_type(SS::hcTT * SS::hc1AG * SS::NS);
    r_infection_by_type.attr("dim") = Rcpp::IntegerVector::create(SS::hcTT, SS::hc1AG, SS::NS);
    std::copy_n(state.infection_by_type.data(), state.infection_by_type.size(), REAL(r_infection_by_type));
    names[index + 12] = "infection_by_type";
    ret[index + 12] = r_infection_by_type;
    return index + output_count;
  };
};


template<typename real_type, MV ModelVariant>
requires(ModelVariant::use_coarse_stratification)
struct HaAdapter<Language::R, real_type, ModelVariant> {
  using SS = SSMixed<ModelVariant>;
  using Config = HaConfig<real_type, ModelVariant>;

  static Config::Pars get_pars(
    const Rcpp::List &data,
    const Options<real_type> &opts
  ) {
    return {
      .total_rate = parse_data<real_type, 1>(data, "incidinput", { nda::dim<>(0, opts.proj_steps, 1) }),
      .relative_risk_age = parse_data<real_type, 3>(data, "incrr_age", { nda::dim<>(0, SS::pAG - SS::p_idx_hiv_first_adult, 1), nda::dim<>(0, SS::NS, (SS::pAG - SS::p_idx_hiv_first_adult)), nda::dim<>(0, opts.proj_steps, (SS::pAG - SS::p_idx_hiv_first_adult) * (SS::NS)) }),
      .relative_risk_sex = parse_data<real_type, 1>(data, "incrr_sex", { nda::dim<>(0, opts.proj_steps, 1) }),
      .cd4_mortality = parse_data<real_type, 3>(data, "cd4_mort_coarse", { nda::dim<>(0, SS::hDS, 1), nda::dim<>(0, SS::hAG, (SS::hDS)), nda::dim<>(0, SS::NS, (SS::hDS) * (SS::hAG)) }),
      .cd4_progression = parse_data<real_type, 3>(data, "cd4_prog_coarse", { nda::dim<>(0, SS::hDS - 1, 1), nda::dim<>(0, SS::hAG, (SS::hDS - 1)), nda::dim<>(0, SS::NS, (SS::hDS - 1) * (SS::hAG)) }),
      .cd4_initial_distribution = parse_data<real_type, 3>(data, "cd4_initdist_coarse", { nda::dim<>(0, SS::hDS, 1), nda::dim<>(0, SS::hAG, (SS::hDS)), nda::dim<>(0, SS::NS, (SS::hDS) * (SS::hAG)) }),
      .scale_cd4_mortality = Rcpp::as<int>(data["scale_cd4_mort"]),
      .idx_hm_elig = parse_data<int, 1>(data, "artcd4elig_idx", { nda::dim<>(0, opts.proj_steps, 1) }),
      .mortality = parse_data<real_type, 4>(data, "art_mort_coarse", { nda::dim<>(0, SS::hTS, 1), nda::dim<>(0, SS::hDS, (SS::hTS)), nda::dim<>(0, SS::hAG, (SS::hTS) * (SS::hDS)), nda::dim<>(0, SS::NS, (SS::hTS) * (SS::hDS) * (SS::hAG)) }),
      .mortality_time_rate_ratio = parse_data<real_type, 2>(data, "artmx_timerr", { nda::dim<>(0, SS::hTS, 1), nda::dim<>(0, opts.proj_steps, (SS::hTS)) }),
      .dropout_recover_cd4 = Rcpp::as<int>(data["art_dropout_recover_cd4"]),
      .dropout_rate = parse_data<real_type, 1>(data, "art_dropout_rate", { nda::dim<>(0, opts.proj_steps, 1) }),
      .adults_on_art = parse_data<real_type, 2>(data, "art15plus_num", { nda::dim<>(0, SS::NS, 1), nda::dim<>(0, opts.proj_steps, (SS::NS)) }),
      .adults_on_art_is_percent = parse_data<int, 2>(data, "art15plus_isperc", { nda::dim<>(0, SS::NS, 1), nda::dim<>(0, opts.proj_steps, (SS::NS)) }),
      .initiation_mortality_weight = Rcpp::as<real_type>(data["art_alloc_mxweight"]),
      .h_art_stage_dur = parse_data<real_type, 1>(data, "h_art_stage_dur", { nda::dim<>(0, SS::hTS - 1, 1) })
    };
  };

  static Config::State get_initial_state(
    const Rcpp::List &data
  ) {
    typename Config::State state;
    fill_initial_state<real_type, typename Config::State::shape_p_hiv_pop>(data, "p_hiv_pop", state.p_hiv_pop);
    fill_initial_state<real_type, typename Config::State::shape_p_hiv_pop_background_deaths>(data, "p_hiv_pop_background_deaths", state.p_hiv_pop_background_deaths);
    fill_initial_state<real_type, typename Config::State::shape_h_hiv_adult>(data, "h_hiv_adult", state.h_hiv_adult);
    fill_initial_state<real_type, typename Config::State::shape_h_art_adult>(data, "h_art_adult", state.h_art_adult);
    fill_initial_state<real_type, typename Config::State::shape_h_hiv_deaths_no_art>(data, "h_hiv_deaths_no_art", state.h_hiv_deaths_no_art);
    fill_initial_state<real_type, typename Config::State::shape_p_infections>(data, "p_infections", state.p_infections);
    fill_initial_state<real_type, typename Config::State::shape_h_hiv_deaths_art>(data, "h_hiv_deaths_art", state.h_hiv_deaths_art);
    fill_initial_state<real_type, typename Config::State::shape_h_art_initiation>(data, "h_art_initiation", state.h_art_initiation);
    fill_initial_state<real_type, typename Config::State::shape_p_hiv_deaths>(data, "p_hiv_deaths", state.p_hiv_deaths);
    return state;
  };

  static constexpr int output_count = 9;

  static int build_output(
    int index,
    const Config::OutputState& state,
    Rcpp::List& ret,
    Rcpp::CharacterVector& names,
    const size_t& output_years
  ) {
    Rcpp::NumericVector r_p_hiv_pop(SS::pAG * SS::NS * output_years);
    r_p_hiv_pop.attr("dim") = Rcpp::IntegerVector::create(SS::pAG, SS::NS, output_years);
    std::copy_n(state.p_hiv_pop.data(), state.p_hiv_pop.size(), REAL(r_p_hiv_pop));
    names[index + 0] = "p_hiv_pop";
    ret[index + 0] = r_p_hiv_pop;
    Rcpp::NumericVector r_p_hiv_pop_background_deaths(SS::pAG * SS::NS * output_years);
    r_p_hiv_pop_background_deaths.attr("dim") = Rcpp::IntegerVector::create(SS::pAG, SS::NS, output_years);
    std::copy_n(state.p_hiv_pop_background_deaths.data(), state.p_hiv_pop_background_deaths.size(), REAL(r_p_hiv_pop_background_deaths));
    names[index + 1] = "p_hiv_pop_background_deaths";
    ret[index + 1] = r_p_hiv_pop_background_deaths;
    Rcpp::NumericVector r_h_hiv_adult(SS::hDS * SS::hAG * SS::NS * output_years);
    r_h_hiv_adult.attr("dim") = Rcpp::IntegerVector::create(SS::hDS, SS::hAG, SS::NS, output_years);
    std::copy_n(state.h_hiv_adult.data(), state.h_hiv_adult.size(), REAL(r_h_hiv_adult));
    names[index + 2] = "h_hiv_adult";
    ret[index + 2] = r_h_hiv_adult;
    Rcpp::NumericVector r_h_art_adult(SS::hTS * SS::hDS * SS::hAG * SS::NS * output_years);
    r_h_art_adult.attr("dim") = Rcpp::IntegerVector::create(SS::hTS, SS::hDS, SS::hAG, SS::NS, output_years);
    std::copy_n(state.h_art_adult.data(), state.h_art_adult.size(), REAL(r_h_art_adult));
    names[index + 3] = "h_art_adult";
    ret[index + 3] = r_h_art_adult;
    Rcpp::NumericVector r_h_hiv_deaths_no_art(SS::hDS * SS::hAG * SS::NS * output_years);
    r_h_hiv_deaths_no_art.attr("dim") = Rcpp::IntegerVector::create(SS::hDS, SS::hAG, SS::NS, output_years);
    std::copy_n(state.h_hiv_deaths_no_art.data(), state.h_hiv_deaths_no_art.size(), REAL(r_h_hiv_deaths_no_art));
    names[index + 4] = "h_hiv_deaths_no_art";
    ret[index + 4] = r_h_hiv_deaths_no_art;
    Rcpp::NumericVector r_p_infections(SS::pAG * SS::NS * output_years);
    r_p_infections.attr("dim") = Rcpp::IntegerVector::create(SS::pAG, SS::NS, output_years);
    std::copy_n(state.p_infections.data(), state.p_infections.size(), REAL(r_p_infections));
    names[index + 5] = "p_infections";
    ret[index + 5] = r_p_infections;
    Rcpp::NumericVector r_h_hiv_deaths_art(SS::hTS * SS::hDS * SS::hAG * SS::NS * output_years);
    r_h_hiv_deaths_art.attr("dim") = Rcpp::IntegerVector::create(SS::hTS, SS::hDS, SS::hAG, SS::NS, output_years);
    std::copy_n(state.h_hiv_deaths_art.data(), state.h_hiv_deaths_art.size(), REAL(r_h_hiv_deaths_art));
    names[index + 6] = "h_hiv_deaths_art";
    ret[index + 6] = r_h_hiv_deaths_art;
    Rcpp::NumericVector r_h_art_initiation(SS::hDS * SS::hAG * SS::NS * output_years);
    r_h_art_initiation.attr("dim") = Rcpp::IntegerVector::create(SS::hDS, SS::hAG, SS::NS, output_years);
    std::copy_n(state.h_art_initiation.data(), state.h_art_initiation.size(), REAL(r_h_art_initiation));
    names[index + 7] = "h_art_initiation";
    ret[index + 7] = r_h_art_initiation;
    Rcpp::NumericVector r_p_hiv_deaths(SS::pAG * SS::NS * output_years);
    r_p_hiv_deaths.attr("dim") = Rcpp::IntegerVector::create(SS::pAG, SS::NS, output_years);
    std::copy_n(state.p_hiv_deaths.data(), state.p_hiv_deaths.size(), REAL(r_p_hiv_deaths));
    names[index + 8] = "p_hiv_deaths";
    ret[index + 8] = r_p_hiv_deaths;
    return index + output_count;
  };

  static int build_output_single_year(
    int index,
    const Config::State& state,
    Rcpp::List& ret,
    Rcpp::CharacterVector& names
  ) {
    Rcpp::NumericVector r_p_hiv_pop(SS::pAG * SS::NS);
    r_p_hiv_pop.attr("dim") = Rcpp::IntegerVector::create(SS::pAG, SS::NS);
    std::copy_n(state.p_hiv_pop.data(), state.p_hiv_pop.size(), REAL(r_p_hiv_pop));
    names[index + 0] = "p_hiv_pop";
    ret[index + 0] = r_p_hiv_pop;
    Rcpp::NumericVector r_p_hiv_pop_background_deaths(SS::pAG * SS::NS);
    r_p_hiv_pop_background_deaths.attr("dim") = Rcpp::IntegerVector::create(SS::pAG, SS::NS);
    std::copy_n(state.p_hiv_pop_background_deaths.data(), state.p_hiv_pop_background_deaths.size(), REAL(r_p_hiv_pop_background_deaths));
    names[index + 1] = "p_hiv_pop_background_deaths";
    ret[index + 1] = r_p_hiv_pop_background_deaths;
    Rcpp::NumericVector r_h_hiv_adult(SS::hDS * SS::hAG * SS::NS);
    r_h_hiv_adult.attr("dim") = Rcpp::IntegerVector::create(SS::hDS, SS::hAG, SS::NS);
    std::copy_n(state.h_hiv_adult.data(), state.h_hiv_adult.size(), REAL(r_h_hiv_adult));
    names[index + 2] = "h_hiv_adult";
    ret[index + 2] = r_h_hiv_adult;
    Rcpp::NumericVector r_h_art_adult(SS::hTS * SS::hDS * SS::hAG * SS::NS);
    r_h_art_adult.attr("dim") = Rcpp::IntegerVector::create(SS::hTS, SS::hDS, SS::hAG, SS::NS);
    std::copy_n(state.h_art_adult.data(), state.h_art_adult.size(), REAL(r_h_art_adult));
    names[index + 3] = "h_art_adult";
    ret[index + 3] = r_h_art_adult;
    Rcpp::NumericVector r_h_hiv_deaths_no_art(SS::hDS * SS::hAG * SS::NS);
    r_h_hiv_deaths_no_art.attr("dim") = Rcpp::IntegerVector::create(SS::hDS, SS::hAG, SS::NS);
    std::copy_n(state.h_hiv_deaths_no_art.data(), state.h_hiv_deaths_no_art.size(), REAL(r_h_hiv_deaths_no_art));
    names[index + 4] = "h_hiv_deaths_no_art";
    ret[index + 4] = r_h_hiv_deaths_no_art;
    Rcpp::NumericVector r_p_infections(SS::pAG * SS::NS);
    r_p_infections.attr("dim") = Rcpp::IntegerVector::create(SS::pAG, SS::NS);
    std::copy_n(state.p_infections.data(), state.p_infections.size(), REAL(r_p_infections));
    names[index + 5] = "p_infections";
    ret[index + 5] = r_p_infections;
    Rcpp::NumericVector r_h_hiv_deaths_art(SS::hTS * SS::hDS * SS::hAG * SS::NS);
    r_h_hiv_deaths_art.attr("dim") = Rcpp::IntegerVector::create(SS::hTS, SS::hDS, SS::hAG, SS::NS);
    std::copy_n(state.h_hiv_deaths_art.data(), state.h_hiv_deaths_art.size(), REAL(r_h_hiv_deaths_art));
    names[index + 6] = "h_hiv_deaths_art";
    ret[index + 6] = r_h_hiv_deaths_art;
    Rcpp::NumericVector r_h_art_initiation(SS::hDS * SS::hAG * SS::NS);
    r_h_art_initiation.attr("dim") = Rcpp::IntegerVector::create(SS::hDS, SS::hAG, SS::NS);
    std::copy_n(state.h_art_initiation.data(), state.h_art_initiation.size(), REAL(r_h_art_initiation));
    names[index + 7] = "h_art_initiation";
    ret[index + 7] = r_h_art_initiation;
    Rcpp::NumericVector r_p_hiv_deaths(SS::pAG * SS::NS);
    r_p_hiv_deaths.attr("dim") = Rcpp::IntegerVector::create(SS::pAG, SS::NS);
    std::copy_n(state.p_hiv_deaths.data(), state.p_hiv_deaths.size(), REAL(r_p_hiv_deaths));
    names[index + 8] = "p_hiv_deaths";
    ret[index + 8] = r_p_hiv_deaths;
    return index + output_count;
  };
};

template<typename real_type, MV ModelVariant>
requires(ModelVariant::use_coarse_stratification)
struct HcAdapter<Language::R, real_type, ModelVariant> {
  using SS = SSMixed<ModelVariant>;
  using Config = HcConfig<real_type, ModelVariant>;

  static Config::Pars get_pars(
    const Rcpp::List &data,
    const Options<real_type> &opts
  ) {
    return {
      .hc_nosocomial = parse_data<real_type, 1>(data, "paed_incid_input", { nda::dim<>(0, opts.proj_steps, 1) }),
      .hc1_cd4_dist = parse_data<real_type, 1>(data, "paed_cd4_dist", { nda::dim<>(0, SS::hc1DS, 1) }),
      .hc1_cd4_mort = parse_data<real_type, 3>(data, "paed_cd4_mort", { nda::dim<>(0, SS::hc1DS, 1), nda::dim<>(0, SS::hcTT, (SS::hc1DS)), nda::dim<>(0, SS::hc1AG, (SS::hc1DS) * (SS::hcTT)) }),
      .hc2_cd4_mort = parse_data<real_type, 3>(data, "adol_cd4_mort", { nda::dim<>(0, SS::hc2DS, 1), nda::dim<>(0, SS::hcTT, (SS::hc2DS)), nda::dim<>(0, SS::hc2AG, (SS::hc2DS) * (SS::hcTT)) }),
      .hc1_cd4_prog = parse_data<real_type, 3>(data, "paed_cd4_prog", { nda::dim<>(0, SS::hc1DS, 1), nda::dim<>(0, SS::hc1AG_c, (SS::hc1DS)), nda::dim<>(0, SS::NS, (SS::hc1DS) * (SS::hc1AG_c)) }),
      .hc2_cd4_prog = parse_data<real_type, 3>(data, "adol_cd4_prog", { nda::dim<>(0, SS::hc2DS, 1), nda::dim<>(0, SS::hc2AG_c, (SS::hc2DS)), nda::dim<>(0, SS::NS, (SS::hc2DS) * (SS::hc2AG_c)) }),
      .ctx_val = parse_data<real_type, 1>(data, "ctx_val", { nda::dim<>(0, opts.proj_steps, 1) }),
      .hc_art_elig_age = parse_data<int, 1>(data, "paed_art_elig_age", { nda::dim<>(0, opts.proj_steps, 1) }),
      .hc_art_elig_cd4 = parse_data<int, 2>(data, "paed_art_elig_cd4", { nda::dim<>(0, SS::p_idx_hiv_first_adult, 1), nda::dim<>(0, opts.proj_steps, (SS::p_idx_hiv_first_adult)) }),
      .hc_art_mort_rr = parse_data<real_type, 3>(data, "mort_art_rr", { nda::dim<>(0, SS::hTS, 1), nda::dim<>(0, SS::p_idx_hiv_first_adult, (SS::hTS)), nda::dim<>(0, opts.proj_steps, (SS::hTS) * (SS::p_idx_hiv_first_adult)) }),
      .hc1_art_mort = parse_data<real_type, 3>(data, "paed_art_mort", { nda::dim<>(0, SS::hc1DS, 1), nda::dim<>(0, SS::hTS, (SS::hc1DS)), nda::dim<>(0, SS::hc1AG, (SS::hc1DS) * (SS::hTS)) }),
      .hc2_art_mort = parse_data<real_type, 3>(data, "adol_art_mort", { nda::dim<>(0, SS::hc2DS, 1), nda::dim<>(0, SS::hTS, (SS::hc2DS)), nda::dim<>(0, SS::hc2AG, (SS::hc2DS) * (SS::hTS)) }),
      .hc_art_isperc = parse_data<int, 1>(data, "artpaeds_isperc", { nda::dim<>(0, opts.proj_steps, 1) }),
      .hc_art_val = parse_data<real_type, 2>(data, "paed_art_val", { nda::dim<>(0, SS::hcAG_coarse, 1), nda::dim<>(0, opts.proj_steps, (SS::hcAG_coarse)) }),
      .hc_art_init_dist = parse_data<real_type, 2>(data, "init_art_dist", { nda::dim<>(0, SS::p_idx_hiv_first_adult, 1), nda::dim<>(0, opts.proj_steps, (SS::p_idx_hiv_first_adult)) }),
      .fert_mult_by_age = parse_data<real_type, 2>(data, "fert_rat_coarse", { nda::dim<>(0, SS::hc_p_fertility_age_groups, 1), nda::dim<>(0, opts.proj_steps, (SS::hc_p_fertility_age_groups)) }),
      .fert_mult_off_art = parse_data<real_type, 1>(data, "cd4fert_rat", { nda::dim<>(0, SS::hDS, 1) }),
      .fert_mult_on_art = parse_data<real_type, 1>(data, "frr_art6mos_coarse", { nda::dim<>(0, SS::hc_p_fertility_age_groups, 1) }),
      .total_fertility_rate = parse_data<real_type, 1>(data, "tfr", { nda::dim<>(0, opts.proj_steps, 1) }),
      .PMTCT = parse_data<real_type, 2>(data, "pmtct", { nda::dim<>(0, SS::hPS, 1), nda::dim<>(0, opts.proj_steps, (SS::hPS)) }),
      .vertical_transmission_rate = parse_data<real_type, 2>(data, "mtct", { nda::dim<>(0, SS::hDS + 1, 1), nda::dim<>(0, SS::hVT, (SS::hDS + 1)) }),
      .PMTCT_transmission_rate = parse_data<real_type, 3>(data, "pmtct_mtct", { nda::dim<>(0, SS::hDS, 1), nda::dim<>(0, SS::hPS, (SS::hDS)), nda::dim<>(0, SS::hVT, (SS::hDS) * (SS::hPS)) }),
      .PMTCT_dropout = parse_data<real_type, 2>(data, "pmtct_dropout", { nda::dim<>(0, SS::hPS_dropout, 1), nda::dim<>(0, opts.proj_steps, (SS::hPS_dropout)) }),
      .PMTCT_input_is_percent = parse_data<int, 1>(data, "pmtct_input_isperc", { nda::dim<>(0, opts.proj_steps, 1) }),
      .breastfeeding_duration_art = parse_data<real_type, 2>(data, "bf_duration_art", { nda::dim<>(0, SS::hBF, 1), nda::dim<>(0, opts.proj_steps, (SS::hBF)) }),
      .breastfeeding_duration_no_art = parse_data<real_type, 2>(data, "bf_duration_no_art", { nda::dim<>(0, SS::hBF, 1), nda::dim<>(0, opts.proj_steps, (SS::hBF)) }),
      .mat_hiv_births = parse_data<real_type, 1>(data, "mat_hiv_births", { nda::dim<>(0, opts.proj_steps, 1) }),
      .mat_prev_input = parse_data<int, 1>(data, "mat_prev_input", { nda::dim<>(0, opts.proj_steps, 1) }),
      .prop_lt200 = parse_data<real_type, 1>(data, "prop_lt200", { nda::dim<>(0, opts.proj_steps, 1) }),
      .prop_gte350 = parse_data<real_type, 1>(data, "prop_gte350", { nda::dim<>(0, opts.proj_steps, 1) }),
      .ctx_val_is_percent = parse_data<int, 1>(data, "ctx_val_ispercent", { nda::dim<>(0, opts.proj_steps, 1) }),
      .hc_art_is_age_spec = parse_data<int, 1>(data, "paed_art_age_spec", { nda::dim<>(0, opts.proj_steps, 1) }),
      .abortion = parse_data<real_type, 2>(data, "abortion", { nda::dim<>(0, SS::hAB_ind, 1), nda::dim<>(0, opts.proj_steps, (SS::hAB_ind)) }),
      .patients_reallocated = parse_data<real_type, 1>(data, "patients_reallocated", { nda::dim<>(0, opts.proj_steps, 1) }),
      .hc_art_ltfu = parse_data<real_type, 1>(data, "paed_art_ltfu", { nda::dim<>(0, opts.proj_steps, 1) }),
      .adult_female_infections = parse_data<real_type, 2>(data, "adult_female_infections_coarse", { nda::dim<>(0, SS::hc_p_fertility_age_groups, 1), nda::dim<>(0, opts.proj_steps, (SS::hc_p_fertility_age_groups)) }),
      .adult_female_hivnpop = parse_data<real_type, 2>(data, "hivnpop_coarse", { nda::dim<>(0, SS::hc_p_fertility_age_groups, 1), nda::dim<>(0, opts.proj_steps, (SS::hc_p_fertility_age_groups)) }),
      .total_births = parse_data<real_type, 1>(data, "total_births", { nda::dim<>(0, opts.proj_steps, 1) }),
      .ctx_effect = parse_data<real_type, 1>(data, "ctx_effect", { nda::dim<>(0, 3, 1) }),
      .hc_art_start = Rcpp::as<int>(data["hc_art_start"]),
      .local_adj_factor = Rcpp::as<real_type>(data["frr_scalar"]),
      .hc_age_specific_fertility_rate = parse_data<real_type, 2>(data, "asfr_coarse", { nda::dim<>(0, SS::hc_p_fertility_age_groups, 1), nda::dim<>(0, opts.proj_steps, (SS::hc_p_fertility_age_groups)) })
    };
  };

  static Config::State get_initial_state(
    const Rcpp::List &data
  ) {
    typename Config::State state;
    fill_initial_state<real_type, typename Config::State::shape_hc1_hiv_pop>(data, "hc1_hiv_pop", state.hc1_hiv_pop);
    fill_initial_state<real_type, typename Config::State::shape_hc2_hiv_pop>(data, "hc2_hiv_pop", state.hc2_hiv_pop);
    fill_initial_state<real_type, typename Config::State::shape_hc1_art_pop>(data, "hc1_art_pop", state.hc1_art_pop);
    fill_initial_state<real_type, typename Config::State::shape_hc2_art_pop>(data, "hc2_art_pop", state.hc2_art_pop);
    fill_initial_state<real_type, typename Config::State::shape_hc1_noart_aids_deaths>(data, "hc1_noart_aids_deaths", state.hc1_noart_aids_deaths);
    fill_initial_state<real_type, typename Config::State::shape_hc2_noart_aids_deaths>(data, "hc2_noart_aids_deaths", state.hc2_noart_aids_deaths);
    fill_initial_state<real_type, typename Config::State::shape_hc1_art_aids_deaths>(data, "hc1_art_aids_deaths", state.hc1_art_aids_deaths);
    fill_initial_state<real_type, typename Config::State::shape_hc2_art_aids_deaths>(data, "hc2_art_aids_deaths", state.hc2_art_aids_deaths);
    fill_initial_state<real_type, typename Config::State::shape_hc_art_init>(data, "hc_art_init", state.hc_art_init);
    fill_initial_state<real_type, typename Config::State::shape_hc_art_need_init>(data, "hc_art_need_init", state.hc_art_need_init);
    state.hiv_births = Rcpp::as<real_type>(data["hiv_births"]);
    state.ctx_need = Rcpp::as<real_type>(data["ctx_need"]);
    fill_initial_state<real_type, typename Config::State::shape_infection_by_type>(data, "infection_by_type", state.infection_by_type);
    return state;
  };

  static constexpr int output_count = 13;

  static int build_output(
    int index,
    const Config::OutputState& state,
    Rcpp::List& ret,
    Rcpp::CharacterVector& names,
    const size_t& output_years
  ) {
    Rcpp::NumericVector r_hc1_hiv_pop(SS::hc1DS * SS::hcTT * SS::hc1AG * SS::NS * output_years);
    r_hc1_hiv_pop.attr("dim") = Rcpp::IntegerVector::create(SS::hc1DS, SS::hcTT, SS::hc1AG, SS::NS, output_years);
    std::copy_n(state.hc1_hiv_pop.data(), state.hc1_hiv_pop.size(), REAL(r_hc1_hiv_pop));
    names[index + 0] = "hc1_hiv_pop";
    ret[index + 0] = r_hc1_hiv_pop;
    Rcpp::NumericVector r_hc2_hiv_pop(SS::hc2DS * SS::hcTT * SS::hc2AG * SS::NS * output_years);
    r_hc2_hiv_pop.attr("dim") = Rcpp::IntegerVector::create(SS::hc2DS, SS::hcTT, SS::hc2AG, SS::NS, output_years);
    std::copy_n(state.hc2_hiv_pop.data(), state.hc2_hiv_pop.size(), REAL(r_hc2_hiv_pop));
    names[index + 1] = "hc2_hiv_pop";
    ret[index + 1] = r_hc2_hiv_pop;
    Rcpp::NumericVector r_hc1_art_pop(SS::hTS * SS::hc1DS * SS::hc1AG * SS::NS * output_years);
    r_hc1_art_pop.attr("dim") = Rcpp::IntegerVector::create(SS::hTS, SS::hc1DS, SS::hc1AG, SS::NS, output_years);
    std::copy_n(state.hc1_art_pop.data(), state.hc1_art_pop.size(), REAL(r_hc1_art_pop));
    names[index + 2] = "hc1_art_pop";
    ret[index + 2] = r_hc1_art_pop;
    Rcpp::NumericVector r_hc2_art_pop(SS::hTS * SS::hc2DS * SS::hc2AG * SS::NS * output_years);
    r_hc2_art_pop.attr("dim") = Rcpp::IntegerVector::create(SS::hTS, SS::hc2DS, SS::hc2AG, SS::NS, output_years);
    std::copy_n(state.hc2_art_pop.data(), state.hc2_art_pop.size(), REAL(r_hc2_art_pop));
    names[index + 3] = "hc2_art_pop";
    ret[index + 3] = r_hc2_art_pop;
    Rcpp::NumericVector r_hc1_noart_aids_deaths(SS::hc1DS * SS::hcTT * SS::hc1AG * SS::NS * output_years);
    r_hc1_noart_aids_deaths.attr("dim") = Rcpp::IntegerVector::create(SS::hc1DS, SS::hcTT, SS::hc1AG, SS::NS, output_years);
    std::copy_n(state.hc1_noart_aids_deaths.data(), state.hc1_noart_aids_deaths.size(), REAL(r_hc1_noart_aids_deaths));
    names[index + 4] = "hc1_noart_aids_deaths";
    ret[index + 4] = r_hc1_noart_aids_deaths;
    Rcpp::NumericVector r_hc2_noart_aids_deaths(SS::hc2DS * SS::hcTT * SS::hc2AG * SS::NS * output_years);
    r_hc2_noart_aids_deaths.attr("dim") = Rcpp::IntegerVector::create(SS::hc2DS, SS::hcTT, SS::hc2AG, SS::NS, output_years);
    std::copy_n(state.hc2_noart_aids_deaths.data(), state.hc2_noart_aids_deaths.size(), REAL(r_hc2_noart_aids_deaths));
    names[index + 5] = "hc2_noart_aids_deaths";
    ret[index + 5] = r_hc2_noart_aids_deaths;
    Rcpp::NumericVector r_hc1_art_aids_deaths(SS::hTS * SS::hc1DS * SS::hc1AG * SS::NS * output_years);
    r_hc1_art_aids_deaths.attr("dim") = Rcpp::IntegerVector::create(SS::hTS, SS::hc1DS, SS::hc1AG, SS::NS, output_years);
    std::copy_n(state.hc1_art_aids_deaths.data(), state.hc1_art_aids_deaths.size(), REAL(r_hc1_art_aids_deaths));
    names[index + 6] = "hc1_art_aids_deaths";
    ret[index + 6] = r_hc1_art_aids_deaths;
    Rcpp::NumericVector r_hc2_art_aids_deaths(SS::hTS * SS::hc2DS * SS::hc2AG * SS::NS * output_years);
    r_hc2_art_aids_deaths.attr("dim") = Rcpp::IntegerVector::create(SS::hTS, SS::hc2DS, SS::hc2AG, SS::NS, output_years);
    std::copy_n(state.hc2_art_aids_deaths.data(), state.hc2_art_aids_deaths.size(), REAL(r_hc2_art_aids_deaths));
    names[index + 7] = "hc2_art_aids_deaths";
    ret[index + 7] = r_hc2_art_aids_deaths;
    Rcpp::NumericVector r_hc_art_init(SS::hcAG_coarse * output_years);
    r_hc_art_init.attr("dim") = Rcpp::IntegerVector::create(SS::hcAG_coarse, output_years);
    std::copy_n(state.hc_art_init.data(), state.hc_art_init.size(), REAL(r_hc_art_init));
    names[index + 8] = "hc_art_init";
    ret[index + 8] = r_hc_art_init;
    Rcpp::NumericVector r_hc_art_need_init(SS::hc1DS * SS::hcTT * SS::hcAG_end * SS::NS * output_years);
    r_hc_art_need_init.attr("dim") = Rcpp::IntegerVector::create(SS::hc1DS, SS::hcTT, SS::hcAG_end, SS::NS, output_years);
    std::copy_n(state.hc_art_need_init.data(), state.hc_art_need_init.size(), REAL(r_hc_art_need_init));
    names[index + 9] = "hc_art_need_init";
    ret[index + 9] = r_hc_art_need_init;
    Rcpp::NumericVector r_hiv_births(output_years);
    r_hiv_births.attr("dim") = Rcpp::IntegerVector::create(output_years);
    std::copy_n(state.hiv_births.data(), state.hiv_births.size(), REAL(r_hiv_births));
    names[index + 10] = "hiv_births";
    ret[index + 10] = r_hiv_births;
    Rcpp::NumericVector r_ctx_need(output_years);
    r_ctx_need.attr("dim") = Rcpp::IntegerVector::create(output_years);
    std::copy_n(state.ctx_need.data(), state.ctx_need.size(), REAL(r_ctx_need));
    names[index + 11] = "ctx_need";
    ret[index + 11] = r_ctx_need;
    Rcpp::NumericVector r_infection_by_type(SS::hcTT * SS::hc1AG * SS::NS * output_years);
    r_infection_by_type.attr("dim") = Rcpp::IntegerVector::create(SS::hcTT, SS::hc1AG, SS::NS, output_years);
    std::copy_n(state.infection_by_type.data(), state.infection_by_type.size(), REAL(r_infection_by_type));
    names[index + 12] = "infection_by_type";
    ret[index + 12] = r_infection_by_type;
    return index + output_count;
  };

  static int build_output_single_year(
    int index,
    const Config::State& state,
    Rcpp::List& ret,
    Rcpp::CharacterVector& names
  ) {
    Rcpp::NumericVector r_hc1_hiv_pop(SS::hc1DS * SS::hcTT * SS::hc1AG * SS::NS);
    r_hc1_hiv_pop.attr("dim") = Rcpp::IntegerVector::create(SS::hc1DS, SS::hcTT, SS::hc1AG, SS::NS);
    std::copy_n(state.hc1_hiv_pop.data(), state.hc1_hiv_pop.size(), REAL(r_hc1_hiv_pop));
    names[index + 0] = "hc1_hiv_pop";
    ret[index + 0] = r_hc1_hiv_pop;
    Rcpp::NumericVector r_hc2_hiv_pop(SS::hc2DS * SS::hcTT * SS::hc2AG * SS::NS);
    r_hc2_hiv_pop.attr("dim") = Rcpp::IntegerVector::create(SS::hc2DS, SS::hcTT, SS::hc2AG, SS::NS);
    std::copy_n(state.hc2_hiv_pop.data(), state.hc2_hiv_pop.size(), REAL(r_hc2_hiv_pop));
    names[index + 1] = "hc2_hiv_pop";
    ret[index + 1] = r_hc2_hiv_pop;
    Rcpp::NumericVector r_hc1_art_pop(SS::hTS * SS::hc1DS * SS::hc1AG * SS::NS);
    r_hc1_art_pop.attr("dim") = Rcpp::IntegerVector::create(SS::hTS, SS::hc1DS, SS::hc1AG, SS::NS);
    std::copy_n(state.hc1_art_pop.data(), state.hc1_art_pop.size(), REAL(r_hc1_art_pop));
    names[index + 2] = "hc1_art_pop";
    ret[index + 2] = r_hc1_art_pop;
    Rcpp::NumericVector r_hc2_art_pop(SS::hTS * SS::hc2DS * SS::hc2AG * SS::NS);
    r_hc2_art_pop.attr("dim") = Rcpp::IntegerVector::create(SS::hTS, SS::hc2DS, SS::hc2AG, SS::NS);
    std::copy_n(state.hc2_art_pop.data(), state.hc2_art_pop.size(), REAL(r_hc2_art_pop));
    names[index + 3] = "hc2_art_pop";
    ret[index + 3] = r_hc2_art_pop;
    Rcpp::NumericVector r_hc1_noart_aids_deaths(SS::hc1DS * SS::hcTT * SS::hc1AG * SS::NS);
    r_hc1_noart_aids_deaths.attr("dim") = Rcpp::IntegerVector::create(SS::hc1DS, SS::hcTT, SS::hc1AG, SS::NS);
    std::copy_n(state.hc1_noart_aids_deaths.data(), state.hc1_noart_aids_deaths.size(), REAL(r_hc1_noart_aids_deaths));
    names[index + 4] = "hc1_noart_aids_deaths";
    ret[index + 4] = r_hc1_noart_aids_deaths;
    Rcpp::NumericVector r_hc2_noart_aids_deaths(SS::hc2DS * SS::hcTT * SS::hc2AG * SS::NS);
    r_hc2_noart_aids_deaths.attr("dim") = Rcpp::IntegerVector::create(SS::hc2DS, SS::hcTT, SS::hc2AG, SS::NS);
    std::copy_n(state.hc2_noart_aids_deaths.data(), state.hc2_noart_aids_deaths.size(), REAL(r_hc2_noart_aids_deaths));
    names[index + 5] = "hc2_noart_aids_deaths";
    ret[index + 5] = r_hc2_noart_aids_deaths;
    Rcpp::NumericVector r_hc1_art_aids_deaths(SS::hTS * SS::hc1DS * SS::hc1AG * SS::NS);
    r_hc1_art_aids_deaths.attr("dim") = Rcpp::IntegerVector::create(SS::hTS, SS::hc1DS, SS::hc1AG, SS::NS);
    std::copy_n(state.hc1_art_aids_deaths.data(), state.hc1_art_aids_deaths.size(), REAL(r_hc1_art_aids_deaths));
    names[index + 6] = "hc1_art_aids_deaths";
    ret[index + 6] = r_hc1_art_aids_deaths;
    Rcpp::NumericVector r_hc2_art_aids_deaths(SS::hTS * SS::hc2DS * SS::hc2AG * SS::NS);
    r_hc2_art_aids_deaths.attr("dim") = Rcpp::IntegerVector::create(SS::hTS, SS::hc2DS, SS::hc2AG, SS::NS);
    std::copy_n(state.hc2_art_aids_deaths.data(), state.hc2_art_aids_deaths.size(), REAL(r_hc2_art_aids_deaths));
    names[index + 7] = "hc2_art_aids_deaths";
    ret[index + 7] = r_hc2_art_aids_deaths;
    Rcpp::NumericVector r_hc_art_init(SS::hcAG_coarse);
    r_hc_art_init.attr("dim") = Rcpp::IntegerVector::create(SS::hcAG_coarse);
    std::copy_n(state.hc_art_init.data(), state.hc_art_init.size(), REAL(r_hc_art_init));
    names[index + 8] = "hc_art_init";
    ret[index + 8] = r_hc_art_init;
    Rcpp::NumericVector r_hc_art_need_init(SS::hc1DS * SS::hcTT * SS::hcAG_end * SS::NS);
    r_hc_art_need_init.attr("dim") = Rcpp::IntegerVector::create(SS::hc1DS, SS::hcTT, SS::hcAG_end, SS::NS);
    std::copy_n(state.hc_art_need_init.data(), state.hc_art_need_init.size(), REAL(r_hc_art_need_init));
    names[index + 9] = "hc_art_need_init";
    ret[index + 9] = r_hc_art_need_init;
    names[index + 10] = "hiv_births";
    ret[index + 10] = state.hiv_births;
    names[index + 11] = "ctx_need";
    ret[index + 11] = state.ctx_need;
    Rcpp::NumericVector r_infection_by_type(SS::hcTT * SS::hc1AG * SS::NS);
    r_infection_by_type.attr("dim") = Rcpp::IntegerVector::create(SS::hcTT, SS::hc1AG, SS::NS);
    std::copy_n(state.infection_by_type.data(), state.infection_by_type.size(), REAL(r_infection_by_type));
    names[index + 12] = "infection_by_type";
    ret[index + 12] = r_infection_by_type;
    return index + output_count;
  };
};

} // namespace internal
} // namespace leapfrog
