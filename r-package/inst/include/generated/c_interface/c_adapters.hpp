// Generated by leapfrog cpp_generation: do not edit by hand
// This file is automatically generated. Do not edit this file. If you want to make changes
// edit leapfrog json files in `cpp_generation/modelSchemas` and run `uv run ./src/main.py` inside
// the `cpp_generation` folder.

#pragma once

#include <filesystem>
#include <sstream>
#include <string_view>
#include <stdexcept>

#include "../../array/array.h"
#include "../config_mixer.hpp"
#include "c_types.hpp"

namespace leapfrog {
namespace internal {

template<typename T, size_t Rank>
auto read_data(T* data, int length, std::string_view name, nda::shape_of_rank<Rank> shape) {
  const auto size = shape.flat_max() + 1;
  if (length != size) {
    std::ostringstream oss;
    oss << "Input data '" << name << "' is the wrong size. "
        << "Received array of length '" << length << "', expected '" << size << "'.";
    throw std::invalid_argument(oss.str());
  }
  return nda::array_ref_of_rank<T, Rank>(data, shape);
}

template <typename T, typename Shape>
void fill_initial_state(T* data, int length, const std::string_view name, nda::array<T, Shape> array) {
  nda::array_ref<T, Shape> array_ref(data);

  nda::for_each_index(Shape(), [&](auto i) {
    array[i] = array_ref[i];
  });
}

template<typename T, typename Shape>
void write_data(const nda::array<T, Shape>& array, T* output, int length, std::string_view name) {
  const auto* dataPtr = array.data();
  std::size_t totalSize = array.size();

  if (length != totalSize) {
    std::ostringstream oss;
    oss << "Output data '" << name << "' is the wrong size. "
        << "Received array of length '" << length << "', expected '" << totalSize << "'.";
    throw std::invalid_argument(oss.str());
  }
  std::copy(dataPtr, dataPtr + totalSize, output);
}

template<typename real_type, MV ModelVariant>
struct DpAdapter<Language::C, real_type, ModelVariant> {
  using SS = SSMixed<ModelVariant>;
  using Config = DpConfig<real_type, ModelVariant>;

  static Config::Pars get_pars(
    const CParams<real_type> &params,
    const Options<real_type> &opts
  ) {
    return {
      .base_pop = read_data<real_type, 2>(params.dp->base_pop, params.dp->base_pop_length, "base_pop", { nda::dim<>(0, SS::pAG, 1), nda::dim<>(0, SS::NS, (SS::pAG)) }),
      .survival_probability = read_data<real_type, 3>(params.dp->survival_probability, params.dp->survival_probability_length, "survival_probability", { nda::dim<>(0, SS::pAG + 1, 1), nda::dim<>(0, SS::NS, (SS::pAG + 1)), nda::dim<>(0, opts.proj_steps, (SS::pAG + 1) * (SS::NS)) }),
      .net_migration = read_data<real_type, 3>(params.dp->net_migration, params.dp->net_migration_length, "net_migration", { nda::dim<>(0, SS::pAG, 1), nda::dim<>(0, SS::NS, (SS::pAG)), nda::dim<>(0, opts.proj_steps, (SS::pAG) * (SS::NS)) }),
      .age_specific_fertility_rate = read_data<real_type, 2>(params.dp->age_specific_fertility_rate, params.dp->age_specific_fertility_rate_length, "age_specific_fertility_rate", { nda::dim<>(0, SS::p_fertility_age_groups, 1), nda::dim<>(0, opts.proj_steps, (SS::p_fertility_age_groups)) }),
      .births_sex_prop = read_data<real_type, 2>(params.dp->births_sex_prop, params.dp->births_sex_prop_length, "births_sex_prop", { nda::dim<>(0, SS::NS, 1), nda::dim<>(0, opts.proj_steps, (SS::NS)) })
    };
  };

  static Config::State get_initial_state(
    const CState<real_type>& state
  ){
    typename Config::State initial_state;
    fill_initial_state<real_type, typename Config::State::shape_p_totpop>(state.dp->p_totpop, state.dp->p_totpop_length, "p_totpop", initial_state.p_totpop);
    fill_initial_state<real_type, typename Config::State::shape_p_background_deaths_totpop>(state.dp->p_background_deaths_totpop, state.dp->p_background_deaths_totpop_length, "p_background_deaths_totpop", initial_state.p_background_deaths_totpop);
    initial_state.births = *(state.dp->births);
    return initial_state;
  };

  static constexpr int output_count = 3;

  static int build_output(
    int index,
    const Config::OutputState& state,
    CState<real_type>& out
  ) {
    write_data<real_type, typename Config::OutputState::shape_p_totpop>(state.p_totpop, out.dp->p_totpop, out.dp->p_totpop_length, "p_totpop");
    write_data<real_type, typename Config::OutputState::shape_p_background_deaths_totpop>(state.p_background_deaths_totpop, out.dp->p_background_deaths_totpop, out.dp->p_background_deaths_totpop_length, "p_background_deaths_totpop");
    write_data<real_type, typename Config::OutputState::shape_births>(state.births, out.dp->births, out.dp->births_length, "births");
    return index + output_count;
  };

  static int build_output_single_year(
    int index,
    const Config::State& state,
    CState<real_type>& out
  ) {
    write_data<real_type, typename Config::State::shape_p_totpop>(state.p_totpop, out.dp->p_totpop, out.dp->p_totpop_length, "p_totpop");
    write_data<real_type, typename Config::State::shape_p_background_deaths_totpop>(state.p_background_deaths_totpop, out.dp->p_background_deaths_totpop, out.dp->p_background_deaths_totpop_length, "p_background_deaths_totpop");
    *(out.dp->births) = state.births;
    return index + output_count;
  };
};

template<typename real_type, MV ModelVariant>
struct HaAdapter<Language::C, real_type, ModelVariant> {
  using SS = SSMixed<ModelVariant>;
  using Config = HaConfig<real_type, ModelVariant>;

  static Config::Pars get_pars(
    const CParams<real_type> &params,
    const Options<real_type> &opts
  ) {
    return {
      .total_rate = read_data<real_type, 1>(params.ha->total_rate, params.ha->total_rate_length, "total_rate", { nda::dim<>(0, opts.proj_steps, 1) }),
      .relative_risk_age = read_data<real_type, 3>(params.ha->relative_risk_age, params.ha->relative_risk_age_length, "relative_risk_age", { nda::dim<>(0, SS::pAG - SS::p_idx_hiv_first_adult, 1), nda::dim<>(0, SS::NS, (SS::pAG - SS::p_idx_hiv_first_adult)), nda::dim<>(0, opts.proj_steps, (SS::pAG - SS::p_idx_hiv_first_adult) * (SS::NS)) }),
      .relative_risk_sex = read_data<real_type, 1>(params.ha->relative_risk_sex, params.ha->relative_risk_sex_length, "relative_risk_sex", { nda::dim<>(0, opts.proj_steps, 1) }),
      .cd4_mortality = read_data<real_type, 3>(params.ha->cd4_mortality, params.ha->cd4_mortality_length, "cd4_mortality", { nda::dim<>(0, SS::hDS, 1), nda::dim<>(0, SS::hAG, (SS::hDS)), nda::dim<>(0, SS::NS, (SS::hDS) * (SS::hAG)) }),
      .cd4_progression = read_data<real_type, 3>(params.ha->cd4_progression, params.ha->cd4_progression_length, "cd4_progression", { nda::dim<>(0, SS::hDS - 1, 1), nda::dim<>(0, SS::hAG, (SS::hDS - 1)), nda::dim<>(0, SS::NS, (SS::hDS - 1) * (SS::hAG)) }),
      .cd4_initial_distribution = read_data<real_type, 3>(params.ha->cd4_initial_distribution, params.ha->cd4_initial_distribution_length, "cd4_initial_distribution", { nda::dim<>(0, SS::hDS, 1), nda::dim<>(0, SS::hAG, (SS::hDS)), nda::dim<>(0, SS::NS, (SS::hDS) * (SS::hAG)) }),
      .scale_cd4_mortality = params.ha->scale_cd4_mortality,
      .idx_hm_elig = read_data<int, 1>(params.ha->idx_hm_elig, params.ha->idx_hm_elig_length, "idx_hm_elig", { nda::dim<>(0, opts.proj_steps, 1) }),
      .mortality = read_data<real_type, 4>(params.ha->mortality, params.ha->mortality_length, "mortality", { nda::dim<>(0, SS::hTS, 1), nda::dim<>(0, SS::hDS, (SS::hTS)), nda::dim<>(0, SS::hAG, (SS::hTS) * (SS::hDS)), nda::dim<>(0, SS::NS, (SS::hTS) * (SS::hDS) * (SS::hAG)) }),
      .mortality_time_rate_ratio = read_data<real_type, 2>(params.ha->mortality_time_rate_ratio, params.ha->mortality_time_rate_ratio_length, "mortality_time_rate_ratio", { nda::dim<>(0, SS::hTS, 1), nda::dim<>(0, opts.proj_steps, (SS::hTS)) }),
      .dropout_recover_cd4 = params.ha->dropout_recover_cd4,
      .dropout_rate = read_data<real_type, 1>(params.ha->dropout_rate, params.ha->dropout_rate_length, "dropout_rate", { nda::dim<>(0, opts.proj_steps, 1) }),
      .adults_on_art = read_data<real_type, 2>(params.ha->adults_on_art, params.ha->adults_on_art_length, "adults_on_art", { nda::dim<>(0, SS::NS, 1), nda::dim<>(0, opts.proj_steps, (SS::NS)) }),
      .adults_on_art_is_percent = read_data<int, 2>(params.ha->adults_on_art_is_percent, params.ha->adults_on_art_is_percent_length, "adults_on_art_is_percent", { nda::dim<>(0, SS::NS, 1), nda::dim<>(0, opts.proj_steps, (SS::NS)) }),
      .initiation_mortality_weight = params.ha->initiation_mortality_weight,
      .h_art_stage_dur = read_data<real_type, 1>(params.ha->h_art_stage_dur, params.ha->h_art_stage_dur_length, "h_art_stage_dur", { nda::dim<>(0, SS::hTS - 1, 1) }),
      .pAG_INCIDPOP = params.ha->pAG_INCIDPOP,
      .pIDX_INCIDPOP = params.ha->pIDX_INCIDPOP
    };
  };

  static Config::State get_initial_state(
    const CState<real_type>& state
  ){
    typename Config::State initial_state;
    fill_initial_state<real_type, typename Config::State::shape_p_hivpop>(state.ha->p_hivpop, state.ha->p_hivpop_length, "p_hivpop", initial_state.p_hivpop);
    fill_initial_state<real_type, typename Config::State::shape_p_background_deaths_hivpop>(state.ha->p_background_deaths_hivpop, state.ha->p_background_deaths_hivpop_length, "p_background_deaths_hivpop", initial_state.p_background_deaths_hivpop);
    fill_initial_state<real_type, typename Config::State::shape_h_hivpop>(state.ha->h_hivpop, state.ha->h_hivpop_length, "h_hivpop", initial_state.h_hivpop);
    fill_initial_state<real_type, typename Config::State::shape_h_artpop>(state.ha->h_artpop, state.ha->h_artpop_length, "h_artpop", initial_state.h_artpop);
    fill_initial_state<real_type, typename Config::State::shape_h_hiv_deaths_no_art>(state.ha->h_hiv_deaths_no_art, state.ha->h_hiv_deaths_no_art_length, "h_hiv_deaths_no_art", initial_state.h_hiv_deaths_no_art);
    fill_initial_state<real_type, typename Config::State::shape_p_infections>(state.ha->p_infections, state.ha->p_infections_length, "p_infections", initial_state.p_infections);
    fill_initial_state<real_type, typename Config::State::shape_h_hiv_deaths_art>(state.ha->h_hiv_deaths_art, state.ha->h_hiv_deaths_art_length, "h_hiv_deaths_art", initial_state.h_hiv_deaths_art);
    fill_initial_state<real_type, typename Config::State::shape_h_art_initiation>(state.ha->h_art_initiation, state.ha->h_art_initiation_length, "h_art_initiation", initial_state.h_art_initiation);
    fill_initial_state<real_type, typename Config::State::shape_p_hiv_deaths>(state.ha->p_hiv_deaths, state.ha->p_hiv_deaths_length, "p_hiv_deaths", initial_state.p_hiv_deaths);
    fill_initial_state<real_type, typename Config::State::shape_p_net_migration_hivpop>(state.ha->p_net_migration_hivpop, state.ha->p_net_migration_hivpop_length, "p_net_migration_hivpop", initial_state.p_net_migration_hivpop);
    return initial_state;
  };

  static constexpr int output_count = 10;

  static int build_output(
    int index,
    const Config::OutputState& state,
    CState<real_type>& out
  ) {
    write_data<real_type, typename Config::OutputState::shape_p_hivpop>(state.p_hivpop, out.ha->p_hivpop, out.ha->p_hivpop_length, "p_hivpop");
    write_data<real_type, typename Config::OutputState::shape_p_background_deaths_hivpop>(state.p_background_deaths_hivpop, out.ha->p_background_deaths_hivpop, out.ha->p_background_deaths_hivpop_length, "p_background_deaths_hivpop");
    write_data<real_type, typename Config::OutputState::shape_h_hivpop>(state.h_hivpop, out.ha->h_hivpop, out.ha->h_hivpop_length, "h_hivpop");
    write_data<real_type, typename Config::OutputState::shape_h_artpop>(state.h_artpop, out.ha->h_artpop, out.ha->h_artpop_length, "h_artpop");
    write_data<real_type, typename Config::OutputState::shape_h_hiv_deaths_no_art>(state.h_hiv_deaths_no_art, out.ha->h_hiv_deaths_no_art, out.ha->h_hiv_deaths_no_art_length, "h_hiv_deaths_no_art");
    write_data<real_type, typename Config::OutputState::shape_p_infections>(state.p_infections, out.ha->p_infections, out.ha->p_infections_length, "p_infections");
    write_data<real_type, typename Config::OutputState::shape_h_hiv_deaths_art>(state.h_hiv_deaths_art, out.ha->h_hiv_deaths_art, out.ha->h_hiv_deaths_art_length, "h_hiv_deaths_art");
    write_data<real_type, typename Config::OutputState::shape_h_art_initiation>(state.h_art_initiation, out.ha->h_art_initiation, out.ha->h_art_initiation_length, "h_art_initiation");
    write_data<real_type, typename Config::OutputState::shape_p_hiv_deaths>(state.p_hiv_deaths, out.ha->p_hiv_deaths, out.ha->p_hiv_deaths_length, "p_hiv_deaths");
    write_data<real_type, typename Config::OutputState::shape_p_net_migration_hivpop>(state.p_net_migration_hivpop, out.ha->p_net_migration_hivpop, out.ha->p_net_migration_hivpop_length, "p_net_migration_hivpop");
    return index + output_count;
  };

  static int build_output_single_year(
    int index,
    const Config::State& state,
    CState<real_type>& out
  ) {
    write_data<real_type, typename Config::State::shape_p_hivpop>(state.p_hivpop, out.ha->p_hivpop, out.ha->p_hivpop_length, "p_hivpop");
    write_data<real_type, typename Config::State::shape_p_background_deaths_hivpop>(state.p_background_deaths_hivpop, out.ha->p_background_deaths_hivpop, out.ha->p_background_deaths_hivpop_length, "p_background_deaths_hivpop");
    write_data<real_type, typename Config::State::shape_h_hivpop>(state.h_hivpop, out.ha->h_hivpop, out.ha->h_hivpop_length, "h_hivpop");
    write_data<real_type, typename Config::State::shape_h_artpop>(state.h_artpop, out.ha->h_artpop, out.ha->h_artpop_length, "h_artpop");
    write_data<real_type, typename Config::State::shape_h_hiv_deaths_no_art>(state.h_hiv_deaths_no_art, out.ha->h_hiv_deaths_no_art, out.ha->h_hiv_deaths_no_art_length, "h_hiv_deaths_no_art");
    write_data<real_type, typename Config::State::shape_p_infections>(state.p_infections, out.ha->p_infections, out.ha->p_infections_length, "p_infections");
    write_data<real_type, typename Config::State::shape_h_hiv_deaths_art>(state.h_hiv_deaths_art, out.ha->h_hiv_deaths_art, out.ha->h_hiv_deaths_art_length, "h_hiv_deaths_art");
    write_data<real_type, typename Config::State::shape_h_art_initiation>(state.h_art_initiation, out.ha->h_art_initiation, out.ha->h_art_initiation_length, "h_art_initiation");
    write_data<real_type, typename Config::State::shape_p_hiv_deaths>(state.p_hiv_deaths, out.ha->p_hiv_deaths, out.ha->p_hiv_deaths_length, "p_hiv_deaths");
    write_data<real_type, typename Config::State::shape_p_net_migration_hivpop>(state.p_net_migration_hivpop, out.ha->p_net_migration_hivpop, out.ha->p_net_migration_hivpop_length, "p_net_migration_hivpop");
    return index + output_count;
  };
};

template<typename real_type, MV ModelVariant>
struct HcAdapter<Language::C, real_type, ModelVariant> {
  using SS = SSMixed<ModelVariant>;
  using Config = HcConfig<real_type, ModelVariant>;

  static Config::Pars get_pars(
    const CParams<real_type> &params,
    const Options<real_type> &opts
  ) {
    return {
      .hc_nosocomial = read_data<real_type, 1>(params.hc->hc_nosocomial, params.hc->hc_nosocomial_length, "hc_nosocomial", { nda::dim<>(0, opts.proj_steps, 1) }),
      .hc1_cd4_dist = read_data<real_type, 1>(params.hc->hc1_cd4_dist, params.hc->hc1_cd4_dist_length, "hc1_cd4_dist", { nda::dim<>(0, SS::hc1DS, 1) }),
      .hc1_cd4_mort = read_data<real_type, 3>(params.hc->hc1_cd4_mort, params.hc->hc1_cd4_mort_length, "hc1_cd4_mort", { nda::dim<>(0, SS::hc1DS, 1), nda::dim<>(0, SS::hcTT, (SS::hc1DS)), nda::dim<>(0, SS::hc1AG, (SS::hc1DS) * (SS::hcTT)) }),
      .hc2_cd4_mort = read_data<real_type, 3>(params.hc->hc2_cd4_mort, params.hc->hc2_cd4_mort_length, "hc2_cd4_mort", { nda::dim<>(0, SS::hc2DS, 1), nda::dim<>(0, SS::hcTT, (SS::hc2DS)), nda::dim<>(0, SS::hc2AG, (SS::hc2DS) * (SS::hcTT)) }),
      .hc1_cd4_prog = read_data<real_type, 3>(params.hc->hc1_cd4_prog, params.hc->hc1_cd4_prog_length, "hc1_cd4_prog", { nda::dim<>(0, SS::hc1DS, 1), nda::dim<>(0, SS::hc1AG_c, (SS::hc1DS)), nda::dim<>(0, SS::NS, (SS::hc1DS) * (SS::hc1AG_c)) }),
      .hc2_cd4_prog = read_data<real_type, 3>(params.hc->hc2_cd4_prog, params.hc->hc2_cd4_prog_length, "hc2_cd4_prog", { nda::dim<>(0, SS::hc2DS, 1), nda::dim<>(0, SS::hc2AG_c, (SS::hc2DS)), nda::dim<>(0, SS::NS, (SS::hc2DS) * (SS::hc2AG_c)) }),
      .ctx_val = read_data<real_type, 1>(params.hc->ctx_val, params.hc->ctx_val_length, "ctx_val", { nda::dim<>(0, opts.proj_steps, 1) }),
      .hc_art_elig_age = read_data<int, 1>(params.hc->hc_art_elig_age, params.hc->hc_art_elig_age_length, "hc_art_elig_age", { nda::dim<>(0, opts.proj_steps, 1) }),
      .hc_art_elig_cd4 = read_data<int, 2>(params.hc->hc_art_elig_cd4, params.hc->hc_art_elig_cd4_length, "hc_art_elig_cd4", { nda::dim<>(0, SS::p_idx_hiv_first_adult, 1), nda::dim<>(0, opts.proj_steps, (SS::p_idx_hiv_first_adult)) }),
      .hc_art_mort_rr = read_data<real_type, 3>(params.hc->hc_art_mort_rr, params.hc->hc_art_mort_rr_length, "hc_art_mort_rr", { nda::dim<>(0, SS::hTS, 1), nda::dim<>(0, SS::p_idx_hiv_first_adult, (SS::hTS)), nda::dim<>(0, opts.proj_steps, (SS::hTS) * (SS::p_idx_hiv_first_adult)) }),
      .hc1_art_mort = read_data<real_type, 3>(params.hc->hc1_art_mort, params.hc->hc1_art_mort_length, "hc1_art_mort", { nda::dim<>(0, SS::hc1DS, 1), nda::dim<>(0, SS::hTS, (SS::hc1DS)), nda::dim<>(0, SS::hc1AG, (SS::hc1DS) * (SS::hTS)) }),
      .hc2_art_mort = read_data<real_type, 3>(params.hc->hc2_art_mort, params.hc->hc2_art_mort_length, "hc2_art_mort", { nda::dim<>(0, SS::hc2DS, 1), nda::dim<>(0, SS::hTS, (SS::hc2DS)), nda::dim<>(0, SS::hc2AG, (SS::hc2DS) * (SS::hTS)) }),
      .hc_art_isperc = read_data<int, 1>(params.hc->hc_art_isperc, params.hc->hc_art_isperc_length, "hc_art_isperc", { nda::dim<>(0, opts.proj_steps, 1) }),
      .hc_art_val = read_data<real_type, 2>(params.hc->hc_art_val, params.hc->hc_art_val_length, "hc_art_val", { nda::dim<>(0, SS::hcAG_coarse, 1), nda::dim<>(0, opts.proj_steps, (SS::hcAG_coarse)) }),
      .hc_art_init_dist = read_data<real_type, 2>(params.hc->hc_art_init_dist, params.hc->hc_art_init_dist_length, "hc_art_init_dist", { nda::dim<>(0, SS::p_idx_hiv_first_adult, 1), nda::dim<>(0, opts.proj_steps, (SS::p_idx_hiv_first_adult)) }),
      .fert_mult_by_age = read_data<real_type, 2>(params.hc->fert_mult_by_age, params.hc->fert_mult_by_age_length, "fert_mult_by_age", { nda::dim<>(0, SS::hc_p_fertility_age_groups, 1), nda::dim<>(0, opts.proj_steps, (SS::hc_p_fertility_age_groups)) }),
      .fert_mult_off_art = read_data<real_type, 1>(params.hc->fert_mult_off_art, params.hc->fert_mult_off_art_length, "fert_mult_off_art", { nda::dim<>(0, SS::hDS, 1) }),
      .fert_mult_on_art = read_data<real_type, 1>(params.hc->fert_mult_on_art, params.hc->fert_mult_on_art_length, "fert_mult_on_art", { nda::dim<>(0, SS::hc_p_fertility_age_groups, 1) }),
      .total_fertility_rate = read_data<real_type, 1>(params.hc->total_fertility_rate, params.hc->total_fertility_rate_length, "total_fertility_rate", { nda::dim<>(0, opts.proj_steps, 1) }),
      .PMTCT = read_data<real_type, 2>(params.hc->PMTCT, params.hc->PMTCT_length, "PMTCT", { nda::dim<>(0, SS::hPS, 1), nda::dim<>(0, opts.proj_steps, (SS::hPS)) }),
      .vertical_transmission_rate = read_data<real_type, 2>(params.hc->vertical_transmission_rate, params.hc->vertical_transmission_rate_length, "vertical_transmission_rate", { nda::dim<>(0, SS::hDS + 1, 1), nda::dim<>(0, SS::hVT, (SS::hDS + 1)) }),
      .PMTCT_transmission_rate = read_data<real_type, 3>(params.hc->PMTCT_transmission_rate, params.hc->PMTCT_transmission_rate_length, "PMTCT_transmission_rate", { nda::dim<>(0, SS::hDS, 1), nda::dim<>(0, SS::hPS, (SS::hDS)), nda::dim<>(0, SS::hVT, (SS::hDS) * (SS::hPS)) }),
      .PMTCT_dropout = read_data<real_type, 3>(params.hc->PMTCT_dropout, params.hc->PMTCT_dropout_length, "PMTCT_dropout", { nda::dim<>(0, SS::hPS, 1), nda::dim<>(0, SS::hVT_dropout, (SS::hPS)), nda::dim<>(0, opts.proj_steps, (SS::hPS) * (SS::hVT_dropout)) }),
      .PMTCT_input_is_percent = read_data<int, 1>(params.hc->PMTCT_input_is_percent, params.hc->PMTCT_input_is_percent_length, "PMTCT_input_is_percent", { nda::dim<>(0, opts.proj_steps, 1) }),
      .breastfeeding_duration_art = read_data<real_type, 2>(params.hc->breastfeeding_duration_art, params.hc->breastfeeding_duration_art_length, "breastfeeding_duration_art", { nda::dim<>(0, SS::hBF, 1), nda::dim<>(0, opts.proj_steps, (SS::hBF)) }),
      .breastfeeding_duration_no_art = read_data<real_type, 2>(params.hc->breastfeeding_duration_no_art, params.hc->breastfeeding_duration_no_art_length, "breastfeeding_duration_no_art", { nda::dim<>(0, SS::hBF, 1), nda::dim<>(0, opts.proj_steps, (SS::hBF)) }),
      .infant_pop = read_data<real_type, 3>(params.hc->infant_pop, params.hc->infant_pop_length, "infant_pop", { nda::dim<>(0, SS::hc_infant, 1), nda::dim<>(0, SS::NS, (SS::hc_infant)), nda::dim<>(0, opts.proj_steps, (SS::hc_infant) * (SS::NS)) }),
      .mat_hiv_births = read_data<real_type, 1>(params.hc->mat_hiv_births, params.hc->mat_hiv_births_length, "mat_hiv_births", { nda::dim<>(0, opts.proj_steps, 1) }),
      .mat_prev_input = read_data<int, 1>(params.hc->mat_prev_input, params.hc->mat_prev_input_length, "mat_prev_input", { nda::dim<>(0, opts.proj_steps, 1) }),
      .prop_lt200 = read_data<real_type, 1>(params.hc->prop_lt200, params.hc->prop_lt200_length, "prop_lt200", { nda::dim<>(0, opts.proj_steps, 1) }),
      .prop_gte350 = read_data<real_type, 1>(params.hc->prop_gte350, params.hc->prop_gte350_length, "prop_gte350", { nda::dim<>(0, opts.proj_steps, 1) }),
      .ctx_val_is_percent = read_data<int, 1>(params.hc->ctx_val_is_percent, params.hc->ctx_val_is_percent_length, "ctx_val_is_percent", { nda::dim<>(0, opts.proj_steps, 1) }),
      .hc_art_is_age_spec = read_data<int, 1>(params.hc->hc_art_is_age_spec, params.hc->hc_art_is_age_spec_length, "hc_art_is_age_spec", { nda::dim<>(0, opts.proj_steps, 1) }),
      .abortion = read_data<real_type, 2>(params.hc->abortion, params.hc->abortion_length, "abortion", { nda::dim<>(0, SS::hAB_ind, 1), nda::dim<>(0, opts.proj_steps, (SS::hAB_ind)) }),
      .patients_reallocated = read_data<real_type, 1>(params.hc->patients_reallocated, params.hc->patients_reallocated_length, "patients_reallocated", { nda::dim<>(0, opts.proj_steps, 1) }),
      .hc_art_ltfu = read_data<real_type, 1>(params.hc->hc_art_ltfu, params.hc->hc_art_ltfu_length, "hc_art_ltfu", { nda::dim<>(0, opts.proj_steps, 1) }),
      .adult_female_infections = read_data<real_type, 2>(params.hc->adult_female_infections, params.hc->adult_female_infections_length, "adult_female_infections", { nda::dim<>(0, SS::hc_p_fertility_age_groups, 1), nda::dim<>(0, opts.proj_steps, (SS::hc_p_fertility_age_groups)) }),
      .adult_female_hivnpop = read_data<real_type, 2>(params.hc->adult_female_hivnpop, params.hc->adult_female_hivnpop_length, "adult_female_hivnpop", { nda::dim<>(0, SS::hc_p_fertility_age_groups, 1), nda::dim<>(0, opts.proj_steps, (SS::hc_p_fertility_age_groups)) }),
      .total_births = read_data<real_type, 1>(params.hc->total_births, params.hc->total_births_length, "total_births", { nda::dim<>(0, opts.proj_steps, 1) }),
      .ctx_effect = read_data<real_type, 1>(params.hc->ctx_effect, params.hc->ctx_effect_length, "ctx_effect", { nda::dim<>(0, 3, 1) }),
      .hc_art_start = params.hc->hc_art_start,
      .local_adj_factor = params.hc->local_adj_factor,
      .hc_age_specific_fertility_rate = read_data<real_type, 2>(params.hc->hc_age_specific_fertility_rate, params.hc->hc_age_specific_fertility_rate_length, "hc_age_specific_fertility_rate", { nda::dim<>(0, SS::hc_p_fertility_age_groups, 1), nda::dim<>(0, opts.proj_steps, (SS::hc_p_fertility_age_groups)) })
    };
  };

  static Config::State get_initial_state(
    const CState<real_type>& state
  ){
    typename Config::State initial_state;
    fill_initial_state<real_type, typename Config::State::shape_hiv_births_by_mat_age>(state.hc->hiv_births_by_mat_age, state.hc->hiv_births_by_mat_age_length, "hiv_births_by_mat_age", initial_state.hiv_births_by_mat_age);
    fill_initial_state<real_type, typename Config::State::shape_hc1_hivpop>(state.hc->hc1_hivpop, state.hc->hc1_hivpop_length, "hc1_hivpop", initial_state.hc1_hivpop);
    fill_initial_state<real_type, typename Config::State::shape_hc2_hivpop>(state.hc->hc2_hivpop, state.hc->hc2_hivpop_length, "hc2_hivpop", initial_state.hc2_hivpop);
    fill_initial_state<real_type, typename Config::State::shape_hc1_artpop>(state.hc->hc1_artpop, state.hc->hc1_artpop_length, "hc1_artpop", initial_state.hc1_artpop);
    fill_initial_state<real_type, typename Config::State::shape_hc2_artpop>(state.hc->hc2_artpop, state.hc->hc2_artpop_length, "hc2_artpop", initial_state.hc2_artpop);
    fill_initial_state<real_type, typename Config::State::shape_hc1_noart_aids_deaths>(state.hc->hc1_noart_aids_deaths, state.hc->hc1_noart_aids_deaths_length, "hc1_noart_aids_deaths", initial_state.hc1_noart_aids_deaths);
    fill_initial_state<real_type, typename Config::State::shape_hc2_noart_aids_deaths>(state.hc->hc2_noart_aids_deaths, state.hc->hc2_noart_aids_deaths_length, "hc2_noart_aids_deaths", initial_state.hc2_noart_aids_deaths);
    fill_initial_state<real_type, typename Config::State::shape_hc1_art_aids_deaths>(state.hc->hc1_art_aids_deaths, state.hc->hc1_art_aids_deaths_length, "hc1_art_aids_deaths", initial_state.hc1_art_aids_deaths);
    fill_initial_state<real_type, typename Config::State::shape_hc2_art_aids_deaths>(state.hc->hc2_art_aids_deaths, state.hc->hc2_art_aids_deaths_length, "hc2_art_aids_deaths", initial_state.hc2_art_aids_deaths);
    fill_initial_state<real_type, typename Config::State::shape_hc_art_init>(state.hc->hc_art_init, state.hc->hc_art_init_length, "hc_art_init", initial_state.hc_art_init);
    fill_initial_state<real_type, typename Config::State::shape_hc_art_need_init>(state.hc->hc_art_need_init, state.hc->hc_art_need_init_length, "hc_art_need_init", initial_state.hc_art_need_init);
    initial_state.hiv_births = *(state.hc->hiv_births);
    initial_state.ctx_need = *(state.hc->ctx_need);
    fill_initial_state<real_type, typename Config::State::shape_infection_by_type>(state.hc->infection_by_type, state.hc->infection_by_type_length, "infection_by_type", initial_state.infection_by_type);
    fill_initial_state<real_type, typename Config::State::shape_mtct_by_source_tr>(state.hc->mtct_by_source_tr, state.hc->mtct_by_source_tr_length, "mtct_by_source_tr", initial_state.mtct_by_source_tr);
    fill_initial_state<real_type, typename Config::State::shape_mtct_by_source_women>(state.hc->mtct_by_source_women, state.hc->mtct_by_source_women_length, "mtct_by_source_women", initial_state.mtct_by_source_women);
    fill_initial_state<real_type, typename Config::State::shape_mtct_by_source_hc_infections>(state.hc->mtct_by_source_hc_infections, state.hc->mtct_by_source_hc_infections_length, "mtct_by_source_hc_infections", initial_state.mtct_by_source_hc_infections);
    fill_initial_state<real_type, typename Config::State::shape_pmtct_coverage_at_delivery>(state.hc->pmtct_coverage_at_delivery, state.hc->pmtct_coverage_at_delivery_length, "pmtct_coverage_at_delivery", initial_state.pmtct_coverage_at_delivery);
    return initial_state;
  };

  static constexpr int output_count = 18;

  static int build_output(
    int index,
    const Config::OutputState& state,
    CState<real_type>& out
  ) {
    write_data<real_type, typename Config::OutputState::shape_hiv_births_by_mat_age>(state.hiv_births_by_mat_age, out.hc->hiv_births_by_mat_age, out.hc->hiv_births_by_mat_age_length, "hiv_births_by_mat_age");
    write_data<real_type, typename Config::OutputState::shape_hc1_hivpop>(state.hc1_hivpop, out.hc->hc1_hivpop, out.hc->hc1_hivpop_length, "hc1_hivpop");
    write_data<real_type, typename Config::OutputState::shape_hc2_hivpop>(state.hc2_hivpop, out.hc->hc2_hivpop, out.hc->hc2_hivpop_length, "hc2_hivpop");
    write_data<real_type, typename Config::OutputState::shape_hc1_artpop>(state.hc1_artpop, out.hc->hc1_artpop, out.hc->hc1_artpop_length, "hc1_artpop");
    write_data<real_type, typename Config::OutputState::shape_hc2_artpop>(state.hc2_artpop, out.hc->hc2_artpop, out.hc->hc2_artpop_length, "hc2_artpop");
    write_data<real_type, typename Config::OutputState::shape_hc1_noart_aids_deaths>(state.hc1_noart_aids_deaths, out.hc->hc1_noart_aids_deaths, out.hc->hc1_noart_aids_deaths_length, "hc1_noart_aids_deaths");
    write_data<real_type, typename Config::OutputState::shape_hc2_noart_aids_deaths>(state.hc2_noart_aids_deaths, out.hc->hc2_noart_aids_deaths, out.hc->hc2_noart_aids_deaths_length, "hc2_noart_aids_deaths");
    write_data<real_type, typename Config::OutputState::shape_hc1_art_aids_deaths>(state.hc1_art_aids_deaths, out.hc->hc1_art_aids_deaths, out.hc->hc1_art_aids_deaths_length, "hc1_art_aids_deaths");
    write_data<real_type, typename Config::OutputState::shape_hc2_art_aids_deaths>(state.hc2_art_aids_deaths, out.hc->hc2_art_aids_deaths, out.hc->hc2_art_aids_deaths_length, "hc2_art_aids_deaths");
    write_data<real_type, typename Config::OutputState::shape_hc_art_init>(state.hc_art_init, out.hc->hc_art_init, out.hc->hc_art_init_length, "hc_art_init");
    write_data<real_type, typename Config::OutputState::shape_hc_art_need_init>(state.hc_art_need_init, out.hc->hc_art_need_init, out.hc->hc_art_need_init_length, "hc_art_need_init");
    write_data<real_type, typename Config::OutputState::shape_hiv_births>(state.hiv_births, out.hc->hiv_births, out.hc->hiv_births_length, "hiv_births");
    write_data<real_type, typename Config::OutputState::shape_ctx_need>(state.ctx_need, out.hc->ctx_need, out.hc->ctx_need_length, "ctx_need");
    write_data<real_type, typename Config::OutputState::shape_infection_by_type>(state.infection_by_type, out.hc->infection_by_type, out.hc->infection_by_type_length, "infection_by_type");
    write_data<real_type, typename Config::OutputState::shape_mtct_by_source_tr>(state.mtct_by_source_tr, out.hc->mtct_by_source_tr, out.hc->mtct_by_source_tr_length, "mtct_by_source_tr");
    write_data<real_type, typename Config::OutputState::shape_mtct_by_source_women>(state.mtct_by_source_women, out.hc->mtct_by_source_women, out.hc->mtct_by_source_women_length, "mtct_by_source_women");
    write_data<real_type, typename Config::OutputState::shape_mtct_by_source_hc_infections>(state.mtct_by_source_hc_infections, out.hc->mtct_by_source_hc_infections, out.hc->mtct_by_source_hc_infections_length, "mtct_by_source_hc_infections");
    write_data<real_type, typename Config::OutputState::shape_pmtct_coverage_at_delivery>(state.pmtct_coverage_at_delivery, out.hc->pmtct_coverage_at_delivery, out.hc->pmtct_coverage_at_delivery_length, "pmtct_coverage_at_delivery");
    return index + output_count;
  };

  static int build_output_single_year(
    int index,
    const Config::State& state,
    CState<real_type>& out
  ) {
    write_data<real_type, typename Config::State::shape_hiv_births_by_mat_age>(state.hiv_births_by_mat_age, out.hc->hiv_births_by_mat_age, out.hc->hiv_births_by_mat_age_length, "hiv_births_by_mat_age");
    write_data<real_type, typename Config::State::shape_hc1_hivpop>(state.hc1_hivpop, out.hc->hc1_hivpop, out.hc->hc1_hivpop_length, "hc1_hivpop");
    write_data<real_type, typename Config::State::shape_hc2_hivpop>(state.hc2_hivpop, out.hc->hc2_hivpop, out.hc->hc2_hivpop_length, "hc2_hivpop");
    write_data<real_type, typename Config::State::shape_hc1_artpop>(state.hc1_artpop, out.hc->hc1_artpop, out.hc->hc1_artpop_length, "hc1_artpop");
    write_data<real_type, typename Config::State::shape_hc2_artpop>(state.hc2_artpop, out.hc->hc2_artpop, out.hc->hc2_artpop_length, "hc2_artpop");
    write_data<real_type, typename Config::State::shape_hc1_noart_aids_deaths>(state.hc1_noart_aids_deaths, out.hc->hc1_noart_aids_deaths, out.hc->hc1_noart_aids_deaths_length, "hc1_noart_aids_deaths");
    write_data<real_type, typename Config::State::shape_hc2_noart_aids_deaths>(state.hc2_noart_aids_deaths, out.hc->hc2_noart_aids_deaths, out.hc->hc2_noart_aids_deaths_length, "hc2_noart_aids_deaths");
    write_data<real_type, typename Config::State::shape_hc1_art_aids_deaths>(state.hc1_art_aids_deaths, out.hc->hc1_art_aids_deaths, out.hc->hc1_art_aids_deaths_length, "hc1_art_aids_deaths");
    write_data<real_type, typename Config::State::shape_hc2_art_aids_deaths>(state.hc2_art_aids_deaths, out.hc->hc2_art_aids_deaths, out.hc->hc2_art_aids_deaths_length, "hc2_art_aids_deaths");
    write_data<real_type, typename Config::State::shape_hc_art_init>(state.hc_art_init, out.hc->hc_art_init, out.hc->hc_art_init_length, "hc_art_init");
    write_data<real_type, typename Config::State::shape_hc_art_need_init>(state.hc_art_need_init, out.hc->hc_art_need_init, out.hc->hc_art_need_init_length, "hc_art_need_init");
    *(out.hc->hiv_births) = state.hiv_births;
    *(out.hc->ctx_need) = state.ctx_need;
    write_data<real_type, typename Config::State::shape_infection_by_type>(state.infection_by_type, out.hc->infection_by_type, out.hc->infection_by_type_length, "infection_by_type");
    write_data<real_type, typename Config::State::shape_mtct_by_source_tr>(state.mtct_by_source_tr, out.hc->mtct_by_source_tr, out.hc->mtct_by_source_tr_length, "mtct_by_source_tr");
    write_data<real_type, typename Config::State::shape_mtct_by_source_women>(state.mtct_by_source_women, out.hc->mtct_by_source_women, out.hc->mtct_by_source_women_length, "mtct_by_source_women");
    write_data<real_type, typename Config::State::shape_mtct_by_source_hc_infections>(state.mtct_by_source_hc_infections, out.hc->mtct_by_source_hc_infections, out.hc->mtct_by_source_hc_infections_length, "mtct_by_source_hc_infections");
    write_data<real_type, typename Config::State::shape_pmtct_coverage_at_delivery>(state.pmtct_coverage_at_delivery, out.hc->pmtct_coverage_at_delivery, out.hc->pmtct_coverage_at_delivery_length, "pmtct_coverage_at_delivery");
    return index + output_count;
  };
};

} // namespace internal
} // namespace leapfrog
