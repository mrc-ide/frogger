// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// list_model_configurations
std::vector<std::string> list_model_configurations();
RcppExport SEXP _frogger_list_model_configurations() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(list_model_configurations());
    return rcpp_result_gen;
END_RCPP
}
// run_base_model
Rcpp::List run_base_model(const Rcpp::List parameters, const std::string configuration, const std::vector<int> output_years);
RcppExport SEXP _frogger_run_base_model(SEXP parametersSEXP, SEXP configurationSEXP, SEXP output_yearsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const std::string >::type configuration(configurationSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type output_years(output_yearsSEXP);
    rcpp_result_gen = Rcpp::wrap(run_base_model(parameters, configuration, output_years));
    return rcpp_result_gen;
END_RCPP
}
// run_base_model_from_state
Rcpp::List run_base_model_from_state(const Rcpp::List parameters, const std::string configuration, const Rcpp::List initial_state, int simulation_start_year, const std::vector<int> output_years);
RcppExport SEXP _frogger_run_base_model_from_state(SEXP parametersSEXP, SEXP configurationSEXP, SEXP initial_stateSEXP, SEXP simulation_start_yearSEXP, SEXP output_yearsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const std::string >::type configuration(configurationSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type initial_state(initial_stateSEXP);
    Rcpp::traits::input_parameter< int >::type simulation_start_year(simulation_start_yearSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type output_years(output_yearsSEXP);
    rcpp_result_gen = Rcpp::wrap(run_base_model_from_state(parameters, configuration, initial_state, simulation_start_year, output_years));
    return rcpp_result_gen;
END_RCPP
}
// run_base_model_single_year
Rcpp::List run_base_model_single_year(const Rcpp::List parameters, const std::string configuration, const Rcpp::List initial_state, int simulation_start_year);
RcppExport SEXP _frogger_run_base_model_single_year(SEXP parametersSEXP, SEXP configurationSEXP, SEXP initial_stateSEXP, SEXP simulation_start_yearSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const std::string >::type configuration(configurationSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type initial_state(initial_stateSEXP);
    Rcpp::traits::input_parameter< int >::type simulation_start_year(simulation_start_yearSEXP);
    rcpp_result_gen = Rcpp::wrap(run_base_model_single_year(parameters, configuration, initial_state, simulation_start_year));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_frogger_list_model_configurations", (DL_FUNC) &_frogger_list_model_configurations, 0},
    {"_frogger_run_base_model", (DL_FUNC) &_frogger_run_base_model, 3},
    {"_frogger_run_base_model_from_state", (DL_FUNC) &_frogger_run_base_model_from_state, 5},
    {"_frogger_run_base_model_single_year", (DL_FUNC) &_frogger_run_base_model_single_year, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_frogger(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
