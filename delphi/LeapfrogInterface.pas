// Generated by leapfrog cpp_generation: do not edit by hand
// This file is automatically generated. Do not edit this file. If you want to make changes
// edit leapfrog json files in `cpp_generation/modelSchemas` and run `uv run ./src/main.py` inside
// the `cpp_generation` folder.

unit LeapfrogInterface;

interface

uses SysUtils, GBFixedArray;

{$ALIGN 8}
type
  LeapfrogOptions = record
  public
    // Year projection started e.g. 1970
    projStartYear: Integer;
    // Year projection end e.g. 2030
    projEndYear: Integer;
    // Time index to start ART initiation e.g. 34 would mean in 2004
    tsArtStart: Integer;
    // Projection period 0 for calendar year, 1 for mid year
    projPeriod: Integer;
end;

{$ALIGN 8}
type
  LeapfrogDemProjParamsView = record
  private
    basePop: PDouble;
    basePopLength: Integer;
    survivalProbability: PDouble;
    survivalProbabilityLength: Integer;
    netMigration: PDouble;
    netMigrationLength: Integer;
    ageSpecificFertilityRate: PDouble;
    ageSpecificFertilityRateLength: Integer;
    birthsSexProp: PDouble;
    birthsSexPropLength: Integer;
end;

type
  LeapfrogDemProjParams = class
  public
    basePop: TGBFixedArray<Double>;
    survivalProbability: TGBFixedArray<Double>;
    netMigration: TGBFixedArray<Double>;
    ageSpecificFertilityRate: TGBFixedArray<Double>;
    birthsSexProp: TGBFixedArray<Double>;
    function getView(): LeapfrogDemProjParamsView;
    procedure writeToDisk(dir: string);
    Destructor Destroy; override;
end;

{$ALIGN 8}
type
  LeapfrogDemProjStateView = record
  private
    pTotalPop: PDouble;
    pTotalPopLength: Integer;
    pTotalPopBackgroundDeaths: PDouble;
    pTotalPopBackgroundDeathsLength: Integer;
    births: PDouble;
    birthsLength: Integer;
end;

type
  LeapfrogDemProjState = class
  public
    pTotalPop: TGBFixedArray<Double>;
    pTotalPopBackgroundDeaths: TGBFixedArray<Double>;
    births: TGBFixedArray<Double>;
    function getView(): LeapfrogDemProjStateView;
    procedure writeToDisk(dir: string);
    Destructor Destroy; override;
end;

{$ALIGN 8}
type
  LeapfrogHivAdultParamsView = record
  private
    totalRate: PDouble;
    totalRateLength: Integer;
    relativeRiskAge: PDouble;
    relativeRiskAgeLength: Integer;
    relativeRiskSex: PDouble;
    relativeRiskSexLength: Integer;
    cd4Mortality: PDouble;
    cd4MortalityLength: Integer;
    cd4Progression: PDouble;
    cd4ProgressionLength: Integer;
    cd4InitialDistribution: PDouble;
    cd4InitialDistributionLength: Integer;
    scaleCd4Mortality: Integer;
    scaleCd4MortalityLength: Integer;
    idxHmElig: PInteger;
    idxHmEligLength: Integer;
    mortality: PDouble;
    mortalityLength: Integer;
    mortalityTimeRateRatio: PDouble;
    mortalityTimeRateRatioLength: Integer;
    dropoutRecoverCd4: Integer;
    dropoutRecoverCd4Length: Integer;
    dropoutRate: PDouble;
    dropoutRateLength: Integer;
    adultsOnArt: PDouble;
    adultsOnArtLength: Integer;
    adultsOnArtIsPercent: PInteger;
    adultsOnArtIsPercentLength: Integer;
    initiationMortalityWeight: Double;
    initiationMortalityWeightLength: Integer;
    hArtStageDur: PDouble;
    hArtStageDurLength: Integer;
end;

type
  LeapfrogHivAdultParams = class
  public
    totalRate: TGBFixedArray<Double>;
    relativeRiskAge: TGBFixedArray<Double>;
    relativeRiskSex: TGBFixedArray<Double>;
    cd4Mortality: TGBFixedArray<Double>;
    cd4Progression: TGBFixedArray<Double>;
    cd4InitialDistribution: TGBFixedArray<Double>;
    scaleCd4Mortality: Integer;
    idxHmElig: TGBFixedArray<Integer>;
    mortality: TGBFixedArray<Double>;
    mortalityTimeRateRatio: TGBFixedArray<Double>;
    dropoutRecoverCd4: Integer;
    dropoutRate: TGBFixedArray<Double>;
    adultsOnArt: TGBFixedArray<Double>;
    adultsOnArtIsPercent: TGBFixedArray<Integer>;
    initiationMortalityWeight: Double;
    hArtStageDur: TGBFixedArray<Double>;
    function getView(): LeapfrogHivAdultParamsView;
    procedure writeToDisk(dir: string);
    Destructor Destroy; override;
end;

{$ALIGN 8}
type
  LeapfrogHivAdultStateView = record
  private
    pHivPop: PDouble;
    pHivPopLength: Integer;
    pHivPopBackgroundDeaths: PDouble;
    pHivPopBackgroundDeathsLength: Integer;
    hHivAdult: PDouble;
    hHivAdultLength: Integer;
    hArtAdult: PDouble;
    hArtAdultLength: Integer;
    hHivDeathsNoArt: PDouble;
    hHivDeathsNoArtLength: Integer;
    pInfections: PDouble;
    pInfectionsLength: Integer;
    hHivDeathsArt: PDouble;
    hHivDeathsArtLength: Integer;
    hArtInitiation: PDouble;
    hArtInitiationLength: Integer;
    pHivDeaths: PDouble;
    pHivDeathsLength: Integer;
end;

type
  LeapfrogHivAdultState = class
  public
    pHivPop: TGBFixedArray<Double>;
    pHivPopBackgroundDeaths: TGBFixedArray<Double>;
    hHivAdult: TGBFixedArray<Double>;
    hArtAdult: TGBFixedArray<Double>;
    hHivDeathsNoArt: TGBFixedArray<Double>;
    pInfections: TGBFixedArray<Double>;
    hHivDeathsArt: TGBFixedArray<Double>;
    hArtInitiation: TGBFixedArray<Double>;
    pHivDeaths: TGBFixedArray<Double>;
    function getView(): LeapfrogHivAdultStateView;
    procedure writeToDisk(dir: string);
    Destructor Destroy; override;
end;

{$ALIGN 8}
type
  LeapfrogHivChildParamsView = record
  private
    hcNosocomial: PDouble;
    hcNosocomialLength: Integer;
    hc1Cd4Dist: PDouble;
    hc1Cd4DistLength: Integer;
    hc1Cd4Mort: PDouble;
    hc1Cd4MortLength: Integer;
    hc2Cd4Mort: PDouble;
    hc2Cd4MortLength: Integer;
    hc1Cd4Prog: PDouble;
    hc1Cd4ProgLength: Integer;
    hc2Cd4Prog: PDouble;
    hc2Cd4ProgLength: Integer;
    ctxVal: PDouble;
    ctxValLength: Integer;
    hcArtEligAge: PInteger;
    hcArtEligAgeLength: Integer;
    hcArtEligCd4: PInteger;
    hcArtEligCd4Length: Integer;
    hcArtMortRr: PDouble;
    hcArtMortRrLength: Integer;
    hc1ArtMort: PDouble;
    hc1ArtMortLength: Integer;
    hc2ArtMort: PDouble;
    hc2ArtMortLength: Integer;
    hcArtIsperc: PInteger;
    hcArtIspercLength: Integer;
    hcArtVal: PDouble;
    hcArtValLength: Integer;
    hcArtInitDist: PDouble;
    hcArtInitDistLength: Integer;
    fertMultByAge: PDouble;
    fertMultByAgeLength: Integer;
    fertMultOffArt: PDouble;
    fertMultOffArtLength: Integer;
    fertMultOnArt: PDouble;
    fertMultOnArtLength: Integer;
    totalFertilityRate: PDouble;
    totalFertilityRateLength: Integer;
    pmtct: PDouble;
    pmtctLength: Integer;
    verticalTransmissionRate: PDouble;
    verticalTransmissionRateLength: Integer;
    pmtctTransmissionRate: PDouble;
    pmtctTransmissionRateLength: Integer;
    pmtctDropout: PDouble;
    pmtctDropoutLength: Integer;
    pmtctInputIsPercent: PInteger;
    pmtctInputIsPercentLength: Integer;
    breastfeedingDurationArt: PDouble;
    breastfeedingDurationArtLength: Integer;
    breastfeedingDurationNoArt: PDouble;
    breastfeedingDurationNoArtLength: Integer;
    bigpop: PDouble;
    bigpopLength: Integer;
    matHivBirths: PDouble;
    matHivBirthsLength: Integer;
    matPrevInput: PInteger;
    matPrevInputLength: Integer;
    propLt200: PDouble;
    propLt200Length: Integer;
    propGte350: PDouble;
    propGte350Length: Integer;
    ctxValIsPercent: PInteger;
    ctxValIsPercentLength: Integer;
    hcArtIsAgeSpec: PInteger;
    hcArtIsAgeSpecLength: Integer;
    abortion: PDouble;
    abortionLength: Integer;
    patientsReallocated: PDouble;
    patientsReallocatedLength: Integer;
    hcArtLtfu: PDouble;
    hcArtLtfuLength: Integer;
    adultFemaleInfections: PDouble;
    adultFemaleInfectionsLength: Integer;
    adultFemaleHivnpop: PDouble;
    adultFemaleHivnpopLength: Integer;
    totalBirths: PDouble;
    totalBirthsLength: Integer;
    ctxEffect: PDouble;
    ctxEffectLength: Integer;
    hcArtStart: Integer;
    hcArtStartLength: Integer;
    localAdjFactor: Double;
    localAdjFactorLength: Integer;
end;

type
  LeapfrogHivChildParams = class
  public
    hcNosocomial: TGBFixedArray<Double>;
    hc1Cd4Dist: TGBFixedArray<Double>;
    hc1Cd4Mort: TGBFixedArray<Double>;
    hc2Cd4Mort: TGBFixedArray<Double>;
    hc1Cd4Prog: TGBFixedArray<Double>;
    hc2Cd4Prog: TGBFixedArray<Double>;
    ctxVal: TGBFixedArray<Double>;
    hcArtEligAge: TGBFixedArray<Integer>;
    hcArtEligCd4: TGBFixedArray<Integer>;
    hcArtMortRr: TGBFixedArray<Double>;
    hc1ArtMort: TGBFixedArray<Double>;
    hc2ArtMort: TGBFixedArray<Double>;
    hcArtIsperc: TGBFixedArray<Integer>;
    hcArtVal: TGBFixedArray<Double>;
    hcArtInitDist: TGBFixedArray<Double>;
    fertMultByAge: TGBFixedArray<Double>;
    fertMultOffArt: TGBFixedArray<Double>;
    fertMultOnArt: TGBFixedArray<Double>;
    totalFertilityRate: TGBFixedArray<Double>;
    pmtct: TGBFixedArray<Double>;
    verticalTransmissionRate: TGBFixedArray<Double>;
    pmtctTransmissionRate: TGBFixedArray<Double>;
    pmtctDropout: TGBFixedArray<Double>;
    pmtctInputIsPercent: TGBFixedArray<Integer>;
    breastfeedingDurationArt: TGBFixedArray<Double>;
    breastfeedingDurationNoArt: TGBFixedArray<Double>;
    bigpop: TGBFixedArray<Double>;
    matHivBirths: TGBFixedArray<Double>;
    matPrevInput: TGBFixedArray<Integer>;
    propLt200: TGBFixedArray<Double>;
    propGte350: TGBFixedArray<Double>;
    ctxValIsPercent: TGBFixedArray<Integer>;
    hcArtIsAgeSpec: TGBFixedArray<Integer>;
    abortion: TGBFixedArray<Double>;
    patientsReallocated: TGBFixedArray<Double>;
    hcArtLtfu: TGBFixedArray<Double>;
    adultFemaleInfections: TGBFixedArray<Double>;
    adultFemaleHivnpop: TGBFixedArray<Double>;
    totalBirths: TGBFixedArray<Double>;
    ctxEffect: TGBFixedArray<Double>;
    hcArtStart: Integer;
    localAdjFactor: Double;
    function getView(): LeapfrogHivChildParamsView;
    procedure writeToDisk(dir: string);
    Destructor Destroy; override;
end;

{$ALIGN 8}
type
  LeapfrogHivChildStateView = record
  private
    hc1HivPop: PDouble;
    hc1HivPopLength: Integer;
    hc2HivPop: PDouble;
    hc2HivPopLength: Integer;
    hc1ArtPop: PDouble;
    hc1ArtPopLength: Integer;
    hc2ArtPop: PDouble;
    hc2ArtPopLength: Integer;
    hc1NoartAidsDeaths: PDouble;
    hc1NoartAidsDeathsLength: Integer;
    hc2NoartAidsDeaths: PDouble;
    hc2NoartAidsDeathsLength: Integer;
    hc1ArtAidsDeaths: PDouble;
    hc1ArtAidsDeathsLength: Integer;
    hc2ArtAidsDeaths: PDouble;
    hc2ArtAidsDeathsLength: Integer;
    hcArtInit: PDouble;
    hcArtInitLength: Integer;
    hcArtNeedInit: PDouble;
    hcArtNeedInitLength: Integer;
    hivBirths: PDouble;
    hivBirthsLength: Integer;
    ctxNeed: PDouble;
    ctxNeedLength: Integer;
    infectionByType: PDouble;
    infectionByTypeLength: Integer;
end;

type
  LeapfrogHivChildState = class
  public
    hc1HivPop: TGBFixedArray<Double>;
    hc2HivPop: TGBFixedArray<Double>;
    hc1ArtPop: TGBFixedArray<Double>;
    hc2ArtPop: TGBFixedArray<Double>;
    hc1NoartAidsDeaths: TGBFixedArray<Double>;
    hc2NoartAidsDeaths: TGBFixedArray<Double>;
    hc1ArtAidsDeaths: TGBFixedArray<Double>;
    hc2ArtAidsDeaths: TGBFixedArray<Double>;
    hcArtInit: TGBFixedArray<Double>;
    hcArtNeedInit: TGBFixedArray<Double>;
    hivBirths: TGBFixedArray<Double>;
    ctxNeed: TGBFixedArray<Double>;
    infectionByType: TGBFixedArray<Double>;
    function getView(): LeapfrogHivChildStateView;
    procedure writeToDisk(dir: string);
    Destructor Destroy; override;
end;

{$ALIGN 8}
type
  LeapfrogParams = record
  private
    demproj: ^LeapfrogDemProjParamsView;
    hivadult: ^LeapfrogHivAdultParamsView;
    hivchild: ^LeapfrogHivChildParamsView;
  public
    procedure SetDemProjParams(const demprojParams: LeapfrogDemProjParamsView);
    procedure SetHivAdultParams(const hivadultParams: LeapfrogHivAdultParamsView);
    procedure SetHivChildParams(const hivchildParams: LeapfrogHivChildParamsView);
end;

{$ALIGN 8}
type
  LeapfrogState = record
  private
    demproj: ^LeapfrogDemProjStateView;
    hivadult: ^LeapfrogHivAdultStateView;
    hivchild: ^LeapfrogHivChildStateView;
  public
    procedure SetDemProjState(const demprojState: LeapfrogDemProjStateView);
    procedure SetHivAdultState(const hivadultState: LeapfrogHivAdultStateView);
    procedure SetHivChildState(const hivchildState: LeapfrogHivChildStateView);
end;

type TCallbackFunction = procedure(Msg: PAnsiChar); stdcall;

procedure LeapfrogRunDp(const params: LeapfrogParams; const opts: LeapfrogOptions; const outputState: LeapfrogState; errorHandler: TCallbackFunction); safecall; external 'leapfrog.dll' name 'run_dp';
procedure LeapfrogRunAim(const params: LeapfrogParams; const opts: LeapfrogOptions; const outputState: LeapfrogState; errorHandler: TCallbackFunction); safecall; external 'leapfrog.dll' name 'run_aim';
procedure LeapfrogRunDpSingleYear(const params: LeapfrogParams; const opts: LeapfrogOptions; const initial_state: LeapfrogState; start_year: Integer; const state: LeapfrogState; errorHandler: TCallbackFunction); safecall; external 'leapfrog.dll' name 'run_dp_single_year';
procedure LeapfrogRunAimSingleYear(const params: LeapfrogParams; const opts: LeapfrogOptions; const initial_state: LeapfrogState; start_year: Integer; const state: LeapfrogState; errorHandler: TCallbackFunction); safecall; external 'leapfrog.dll' name 'run_aim_single_year';

implementation

destructor LeapfrogDemProjParams.Destroy;
begin;
  basePop.Free;
  survivalProbability.Free;
  netMigration.Free;
  ageSpecificFertilityRate.Free;
  birthsSexProp.Free;
  inherited;
end;

destructor LeapfrogDemProjState.Destroy;
begin;
  pTotalPop.Free;
  pTotalPopBackgroundDeaths.Free;
  births.Free;
  inherited;
end;

function LeapfrogDemProjParams.getView(): LeapfrogDemProjParamsView;
begin;
  Result.basePop := PDouble(basePop.data);
  Result.basePopLength := basePop.GetLength();
  Result.survivalProbability := PDouble(survivalProbability.data);
  Result.survivalProbabilityLength := survivalProbability.GetLength();
  Result.netMigration := PDouble(netMigration.data);
  Result.netMigrationLength := netMigration.GetLength();
  Result.ageSpecificFertilityRate := PDouble(ageSpecificFertilityRate.data);
  Result.ageSpecificFertilityRateLength := ageSpecificFertilityRate.GetLength();
  Result.birthsSexProp := PDouble(birthsSexProp.data);
  Result.birthsSexPropLength := birthsSexProp.GetLength();
end;

function LeapfrogDemProjState.getView(): LeapfrogDemProjStateView;
begin;
  Result.pTotalPop := PDouble(pTotalPop.data);
  Result.pTotalPopLength := pTotalPop.GetLength();
  Result.pTotalPopBackgroundDeaths := PDouble(pTotalPopBackgroundDeaths.data);
  Result.pTotalPopBackgroundDeathsLength := pTotalPopBackgroundDeaths.GetLength();
  Result.births := PDouble(births.data);
  Result.birthsLength := births.GetLength();
end;

destructor LeapfrogHivAdultParams.Destroy;
begin;
  totalRate.Free;
  relativeRiskAge.Free;
  relativeRiskSex.Free;
  cd4Mortality.Free;
  cd4Progression.Free;
  cd4InitialDistribution.Free;
  idxHmElig.Free;
  mortality.Free;
  mortalityTimeRateRatio.Free;
  dropoutRate.Free;
  adultsOnArt.Free;
  adultsOnArtIsPercent.Free;
  hArtStageDur.Free;
  inherited;
end;

destructor LeapfrogHivAdultState.Destroy;
begin;
  pHivPop.Free;
  pHivPopBackgroundDeaths.Free;
  hHivAdult.Free;
  hArtAdult.Free;
  hHivDeathsNoArt.Free;
  pInfections.Free;
  hHivDeathsArt.Free;
  hArtInitiation.Free;
  pHivDeaths.Free;
  inherited;
end;

function LeapfrogHivAdultParams.getView(): LeapfrogHivAdultParamsView;
begin;
  Result.totalRate := PDouble(totalRate.data);
  Result.totalRateLength := totalRate.GetLength();
  Result.relativeRiskAge := PDouble(relativeRiskAge.data);
  Result.relativeRiskAgeLength := relativeRiskAge.GetLength();
  Result.relativeRiskSex := PDouble(relativeRiskSex.data);
  Result.relativeRiskSexLength := relativeRiskSex.GetLength();
  Result.cd4Mortality := PDouble(cd4Mortality.data);
  Result.cd4MortalityLength := cd4Mortality.GetLength();
  Result.cd4Progression := PDouble(cd4Progression.data);
  Result.cd4ProgressionLength := cd4Progression.GetLength();
  Result.cd4InitialDistribution := PDouble(cd4InitialDistribution.data);
  Result.cd4InitialDistributionLength := cd4InitialDistribution.GetLength();
  Result.scaleCd4Mortality := scaleCd4Mortality;
  Result.scaleCd4MortalityLength := 1;
  Result.idxHmElig := PInteger(idxHmElig.data);
  Result.idxHmEligLength := idxHmElig.GetLength();
  Result.mortality := PDouble(mortality.data);
  Result.mortalityLength := mortality.GetLength();
  Result.mortalityTimeRateRatio := PDouble(mortalityTimeRateRatio.data);
  Result.mortalityTimeRateRatioLength := mortalityTimeRateRatio.GetLength();
  Result.dropoutRecoverCd4 := dropoutRecoverCd4;
  Result.dropoutRecoverCd4Length := 1;
  Result.dropoutRate := PDouble(dropoutRate.data);
  Result.dropoutRateLength := dropoutRate.GetLength();
  Result.adultsOnArt := PDouble(adultsOnArt.data);
  Result.adultsOnArtLength := adultsOnArt.GetLength();
  Result.adultsOnArtIsPercent := PInteger(adultsOnArtIsPercent.data);
  Result.adultsOnArtIsPercentLength := adultsOnArtIsPercent.GetLength();
  Result.initiationMortalityWeight := initiationMortalityWeight;
  Result.initiationMortalityWeightLength := 1;
  Result.hArtStageDur := PDouble(hArtStageDur.data);
  Result.hArtStageDurLength := hArtStageDur.GetLength();
end;

function LeapfrogHivAdultState.getView(): LeapfrogHivAdultStateView;
begin;
  Result.pHivPop := PDouble(pHivPop.data);
  Result.pHivPopLength := pHivPop.GetLength();
  Result.pHivPopBackgroundDeaths := PDouble(pHivPopBackgroundDeaths.data);
  Result.pHivPopBackgroundDeathsLength := pHivPopBackgroundDeaths.GetLength();
  Result.hHivAdult := PDouble(hHivAdult.data);
  Result.hHivAdultLength := hHivAdult.GetLength();
  Result.hArtAdult := PDouble(hArtAdult.data);
  Result.hArtAdultLength := hArtAdult.GetLength();
  Result.hHivDeathsNoArt := PDouble(hHivDeathsNoArt.data);
  Result.hHivDeathsNoArtLength := hHivDeathsNoArt.GetLength();
  Result.pInfections := PDouble(pInfections.data);
  Result.pInfectionsLength := pInfections.GetLength();
  Result.hHivDeathsArt := PDouble(hHivDeathsArt.data);
  Result.hHivDeathsArtLength := hHivDeathsArt.GetLength();
  Result.hArtInitiation := PDouble(hArtInitiation.data);
  Result.hArtInitiationLength := hArtInitiation.GetLength();
  Result.pHivDeaths := PDouble(pHivDeaths.data);
  Result.pHivDeathsLength := pHivDeaths.GetLength();
end;

destructor LeapfrogHivChildParams.Destroy;
begin;
  hcNosocomial.Free;
  hc1Cd4Dist.Free;
  hc1Cd4Mort.Free;
  hc2Cd4Mort.Free;
  hc1Cd4Prog.Free;
  hc2Cd4Prog.Free;
  ctxVal.Free;
  hcArtEligAge.Free;
  hcArtEligCd4.Free;
  hcArtMortRr.Free;
  hc1ArtMort.Free;
  hc2ArtMort.Free;
  hcArtIsperc.Free;
  hcArtVal.Free;
  hcArtInitDist.Free;
  fertMultByAge.Free;
  fertMultOffArt.Free;
  fertMultOnArt.Free;
  totalFertilityRate.Free;
  pmtct.Free;
  verticalTransmissionRate.Free;
  pmtctTransmissionRate.Free;
  pmtctDropout.Free;
  pmtctInputIsPercent.Free;
  breastfeedingDurationArt.Free;
  breastfeedingDurationNoArt.Free;
  bigpop.Free;
  matHivBirths.Free;
  matPrevInput.Free;
  propLt200.Free;
  propGte350.Free;
  ctxValIsPercent.Free;
  hcArtIsAgeSpec.Free;
  abortion.Free;
  patientsReallocated.Free;
  hcArtLtfu.Free;
  adultFemaleInfections.Free;
  adultFemaleHivnpop.Free;
  totalBirths.Free;
  ctxEffect.Free;
  inherited;
end;

destructor LeapfrogHivChildState.Destroy;
begin;
  hc1HivPop.Free;
  hc2HivPop.Free;
  hc1ArtPop.Free;
  hc2ArtPop.Free;
  hc1NoartAidsDeaths.Free;
  hc2NoartAidsDeaths.Free;
  hc1ArtAidsDeaths.Free;
  hc2ArtAidsDeaths.Free;
  hcArtInit.Free;
  hcArtNeedInit.Free;
  hivBirths.Free;
  ctxNeed.Free;
  infectionByType.Free;
  inherited;
end;

function LeapfrogHivChildParams.getView(): LeapfrogHivChildParamsView;
begin;
  Result.hcNosocomial := PDouble(hcNosocomial.data);
  Result.hcNosocomialLength := hcNosocomial.GetLength();
  Result.hc1Cd4Dist := PDouble(hc1Cd4Dist.data);
  Result.hc1Cd4DistLength := hc1Cd4Dist.GetLength();
  Result.hc1Cd4Mort := PDouble(hc1Cd4Mort.data);
  Result.hc1Cd4MortLength := hc1Cd4Mort.GetLength();
  Result.hc2Cd4Mort := PDouble(hc2Cd4Mort.data);
  Result.hc2Cd4MortLength := hc2Cd4Mort.GetLength();
  Result.hc1Cd4Prog := PDouble(hc1Cd4Prog.data);
  Result.hc1Cd4ProgLength := hc1Cd4Prog.GetLength();
  Result.hc2Cd4Prog := PDouble(hc2Cd4Prog.data);
  Result.hc2Cd4ProgLength := hc2Cd4Prog.GetLength();
  Result.ctxVal := PDouble(ctxVal.data);
  Result.ctxValLength := ctxVal.GetLength();
  Result.hcArtEligAge := PInteger(hcArtEligAge.data);
  Result.hcArtEligAgeLength := hcArtEligAge.GetLength();
  Result.hcArtEligCd4 := PInteger(hcArtEligCd4.data);
  Result.hcArtEligCd4Length := hcArtEligCd4.GetLength();
  Result.hcArtMortRr := PDouble(hcArtMortRr.data);
  Result.hcArtMortRrLength := hcArtMortRr.GetLength();
  Result.hc1ArtMort := PDouble(hc1ArtMort.data);
  Result.hc1ArtMortLength := hc1ArtMort.GetLength();
  Result.hc2ArtMort := PDouble(hc2ArtMort.data);
  Result.hc2ArtMortLength := hc2ArtMort.GetLength();
  Result.hcArtIsperc := PInteger(hcArtIsperc.data);
  Result.hcArtIspercLength := hcArtIsperc.GetLength();
  Result.hcArtVal := PDouble(hcArtVal.data);
  Result.hcArtValLength := hcArtVal.GetLength();
  Result.hcArtInitDist := PDouble(hcArtInitDist.data);
  Result.hcArtInitDistLength := hcArtInitDist.GetLength();
  Result.fertMultByAge := PDouble(fertMultByAge.data);
  Result.fertMultByAgeLength := fertMultByAge.GetLength();
  Result.fertMultOffArt := PDouble(fertMultOffArt.data);
  Result.fertMultOffArtLength := fertMultOffArt.GetLength();
  Result.fertMultOnArt := PDouble(fertMultOnArt.data);
  Result.fertMultOnArtLength := fertMultOnArt.GetLength();
  Result.totalFertilityRate := PDouble(totalFertilityRate.data);
  Result.totalFertilityRateLength := totalFertilityRate.GetLength();
  Result.pmtct := PDouble(pmtct.data);
  Result.pmtctLength := pmtct.GetLength();
  Result.verticalTransmissionRate := PDouble(verticalTransmissionRate.data);
  Result.verticalTransmissionRateLength := verticalTransmissionRate.GetLength();
  Result.pmtctTransmissionRate := PDouble(pmtctTransmissionRate.data);
  Result.pmtctTransmissionRateLength := pmtctTransmissionRate.GetLength();
  Result.pmtctDropout := PDouble(pmtctDropout.data);
  Result.pmtctDropoutLength := pmtctDropout.GetLength();
  Result.pmtctInputIsPercent := PInteger(pmtctInputIsPercent.data);
  Result.pmtctInputIsPercentLength := pmtctInputIsPercent.GetLength();
  Result.breastfeedingDurationArt := PDouble(breastfeedingDurationArt.data);
  Result.breastfeedingDurationArtLength := breastfeedingDurationArt.GetLength();
  Result.breastfeedingDurationNoArt := PDouble(breastfeedingDurationNoArt.data);
  Result.breastfeedingDurationNoArtLength := breastfeedingDurationNoArt.GetLength();
  Result.bigpop := PDouble(bigpop.data);
  Result.bigpopLength := bigpop.GetLength();
  Result.matHivBirths := PDouble(matHivBirths.data);
  Result.matHivBirthsLength := matHivBirths.GetLength();
  Result.matPrevInput := PInteger(matPrevInput.data);
  Result.matPrevInputLength := matPrevInput.GetLength();
  Result.propLt200 := PDouble(propLt200.data);
  Result.propLt200Length := propLt200.GetLength();
  Result.propGte350 := PDouble(propGte350.data);
  Result.propGte350Length := propGte350.GetLength();
  Result.ctxValIsPercent := PInteger(ctxValIsPercent.data);
  Result.ctxValIsPercentLength := ctxValIsPercent.GetLength();
  Result.hcArtIsAgeSpec := PInteger(hcArtIsAgeSpec.data);
  Result.hcArtIsAgeSpecLength := hcArtIsAgeSpec.GetLength();
  Result.abortion := PDouble(abortion.data);
  Result.abortionLength := abortion.GetLength();
  Result.patientsReallocated := PDouble(patientsReallocated.data);
  Result.patientsReallocatedLength := patientsReallocated.GetLength();
  Result.hcArtLtfu := PDouble(hcArtLtfu.data);
  Result.hcArtLtfuLength := hcArtLtfu.GetLength();
  Result.adultFemaleInfections := PDouble(adultFemaleInfections.data);
  Result.adultFemaleInfectionsLength := adultFemaleInfections.GetLength();
  Result.adultFemaleHivnpop := PDouble(adultFemaleHivnpop.data);
  Result.adultFemaleHivnpopLength := adultFemaleHivnpop.GetLength();
  Result.totalBirths := PDouble(totalBirths.data);
  Result.totalBirthsLength := totalBirths.GetLength();
  Result.ctxEffect := PDouble(ctxEffect.data);
  Result.ctxEffectLength := ctxEffect.GetLength();
  Result.hcArtStart := hcArtStart;
  Result.hcArtStartLength := 1;
  Result.localAdjFactor := localAdjFactor;
  Result.localAdjFactorLength := 1;
end;

function LeapfrogHivChildState.getView(): LeapfrogHivChildStateView;
begin;
  Result.hc1HivPop := PDouble(hc1HivPop.data);
  Result.hc1HivPopLength := hc1HivPop.GetLength();
  Result.hc2HivPop := PDouble(hc2HivPop.data);
  Result.hc2HivPopLength := hc2HivPop.GetLength();
  Result.hc1ArtPop := PDouble(hc1ArtPop.data);
  Result.hc1ArtPopLength := hc1ArtPop.GetLength();
  Result.hc2ArtPop := PDouble(hc2ArtPop.data);
  Result.hc2ArtPopLength := hc2ArtPop.GetLength();
  Result.hc1NoartAidsDeaths := PDouble(hc1NoartAidsDeaths.data);
  Result.hc1NoartAidsDeathsLength := hc1NoartAidsDeaths.GetLength();
  Result.hc2NoartAidsDeaths := PDouble(hc2NoartAidsDeaths.data);
  Result.hc2NoartAidsDeathsLength := hc2NoartAidsDeaths.GetLength();
  Result.hc1ArtAidsDeaths := PDouble(hc1ArtAidsDeaths.data);
  Result.hc1ArtAidsDeathsLength := hc1ArtAidsDeaths.GetLength();
  Result.hc2ArtAidsDeaths := PDouble(hc2ArtAidsDeaths.data);
  Result.hc2ArtAidsDeathsLength := hc2ArtAidsDeaths.GetLength();
  Result.hcArtInit := PDouble(hcArtInit.data);
  Result.hcArtInitLength := hcArtInit.GetLength();
  Result.hcArtNeedInit := PDouble(hcArtNeedInit.data);
  Result.hcArtNeedInitLength := hcArtNeedInit.GetLength();
  Result.hivBirths := PDouble(hivBirths.data);
  Result.hivBirthsLength := hivBirths.GetLength();
  Result.ctxNeed := PDouble(ctxNeed.data);
  Result.ctxNeedLength := ctxNeed.GetLength();
  Result.infectionByType := PDouble(infectionByType.data);
  Result.infectionByTypeLength := infectionByType.GetLength();
end;

procedure LeapfrogDemProjParams.writeToDisk(dir: string);
begin;
  if not DirectoryExists(dir) then
    ForceDirectories(dir);
  basePop.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'basePop');
  survivalProbability.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'survivalProbability');
  netMigration.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'netMigration');
  ageSpecificFertilityRate.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'ageSpecificFertilityRate');
  birthsSexProp.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'birthsSexProp');
end;

procedure LeapfrogDemProjState.writeToDisk(dir: string);
begin;
  if not DirectoryExists(dir) then
    ForceDirectories(dir);
  pTotalPop.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'pTotalPop');
  pTotalPopBackgroundDeaths.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'pTotalPopBackgroundDeaths');
end;

procedure LeapfrogHivAdultParams.writeToDisk(dir: string);
begin;
  if not DirectoryExists(dir) then
    ForceDirectories(dir);
  totalRate.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'totalRate');
  relativeRiskAge.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'relativeRiskAge');
  relativeRiskSex.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'relativeRiskSex');
  cd4Mortality.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'cd4Mortality');
  cd4Progression.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'cd4Progression');
  cd4InitialDistribution.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'cd4InitialDistribution');
  idxHmElig.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'idxHmElig');
  mortality.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'mortality');
  mortalityTimeRateRatio.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'mortalityTimeRateRatio');
  dropoutRate.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'dropoutRate');
  adultsOnArt.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'adultsOnArt');
  adultsOnArtIsPercent.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'adultsOnArtIsPercent');
  hArtStageDur.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hArtStageDur');
end;

procedure LeapfrogHivAdultState.writeToDisk(dir: string);
begin;
  if not DirectoryExists(dir) then
    ForceDirectories(dir);
  pHivPop.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'pHivPop');
  pHivPopBackgroundDeaths.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'pHivPopBackgroundDeaths');
  hHivAdult.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hHivAdult');
  hArtAdult.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hArtAdult');
  hHivDeathsNoArt.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hHivDeathsNoArt');
  pInfections.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'pInfections');
  hHivDeathsArt.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hHivDeathsArt');
  hArtInitiation.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hArtInitiation');
  pHivDeaths.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'pHivDeaths');
end;

procedure LeapfrogHivChildParams.writeToDisk(dir: string);
begin;
  if not DirectoryExists(dir) then
    ForceDirectories(dir);
  hcNosocomial.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hcNosocomial');
  hc1Cd4Dist.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hc1Cd4Dist');
  hc1Cd4Mort.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hc1Cd4Mort');
  hc2Cd4Mort.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hc2Cd4Mort');
  hc1Cd4Prog.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hc1Cd4Prog');
  hc2Cd4Prog.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hc2Cd4Prog');
  ctxVal.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'ctxVal');
  hcArtEligAge.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hcArtEligAge');
  hcArtEligCd4.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hcArtEligCd4');
  hcArtMortRr.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hcArtMortRr');
  hc1ArtMort.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hc1ArtMort');
  hc2ArtMort.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hc2ArtMort');
  hcArtIsperc.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hcArtIsperc');
  hcArtVal.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hcArtVal');
  hcArtInitDist.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hcArtInitDist');
  fertMultByAge.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'fertMultByAge');
  fertMultOffArt.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'fertMultOffArt');
  fertMultOnArt.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'fertMultOnArt');
  totalFertilityRate.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'totalFertilityRate');
  pmtct.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'pmtct');
  verticalTransmissionRate.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'verticalTransmissionRate');
  pmtctTransmissionRate.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'pmtctTransmissionRate');
  pmtctDropout.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'pmtctDropout');
  pmtctInputIsPercent.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'pmtctInputIsPercent');
  breastfeedingDurationArt.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'breastfeedingDurationArt');
  breastfeedingDurationNoArt.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'breastfeedingDurationNoArt');
  bigpop.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'bigpop');
  matHivBirths.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'matHivBirths');
  matPrevInput.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'matPrevInput');
  propLt200.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'propLt200');
  propGte350.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'propGte350');
  ctxValIsPercent.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'ctxValIsPercent');
  hcArtIsAgeSpec.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hcArtIsAgeSpec');
  abortion.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'abortion');
  patientsReallocated.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'patientsReallocated');
  hcArtLtfu.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hcArtLtfu');
  adultFemaleInfections.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'adultFemaleInfections');
  adultFemaleHivnpop.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'adultFemaleHivnpop');
  totalBirths.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'totalBirths');
  ctxEffect.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'ctxEffect');
end;

procedure LeapfrogHivChildState.writeToDisk(dir: string);
begin;
  if not DirectoryExists(dir) then
    ForceDirectories(dir);
  hc1HivPop.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hc1HivPop');
  hc2HivPop.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hc2HivPop');
  hc1ArtPop.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hc1ArtPop');
  hc2ArtPop.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hc2ArtPop');
  hc1NoartAidsDeaths.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hc1NoartAidsDeaths');
  hc2NoartAidsDeaths.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hc2NoartAidsDeaths');
  hc1ArtAidsDeaths.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hc1ArtAidsDeaths');
  hc2ArtAidsDeaths.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hc2ArtAidsDeaths');
  hcArtInit.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hcArtInit');
  hcArtNeedInit.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'hcArtNeedInit');
  infectionByType.WriteToDisk(IncludeTrailingPathDelimiter(dir) +  'infectionByType');
end;

procedure LeapfrogParams.SetDemProjParams(const demprojParams: LeapfrogDemProjParamsView);
begin
  demproj := @demprojParams;
end;

procedure LeapfrogState.SetDemProjState(const demprojState: LeapfrogDemProjStateView);
begin
  demproj := @demprojState;
end;

procedure LeapfrogParams.SetHivAdultParams(const hivadultParams: LeapfrogHivAdultParamsView);
begin
  hivadult := @hivadultParams;
end;

procedure LeapfrogState.SetHivAdultState(const hivadultState: LeapfrogHivAdultStateView);
begin
  hivadult := @hivadultState;
end;

procedure LeapfrogParams.SetHivChildParams(const hivchildParams: LeapfrogHivChildParamsView);
begin
  hivchild := @hivchildParams;
end;

procedure LeapfrogState.SetHivChildState(const hivchildState: LeapfrogHivChildStateView);
begin
  hivchild := @hivchildState;
end;

end.
