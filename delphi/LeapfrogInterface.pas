// This file is automatically generated and should not be modified by hand.
// To update this, update the leapfrog cpp_generation scripts.

unit LeapfrogInterface;

interface

uses GBFixedArray;

{$ALIGN 8}
type
  LeapfrogDpParams = record
  private
    base_pop: PDouble;
    base_pop_length: Integer;
    survival_probability: PDouble;
    survival_probability_length: Integer;
    net_migration: PDouble;
    net_migration_length: Integer;
    age_specific_fertility_rate: PDouble;
    age_specific_fertility_rate_length: Integer;
    births_sex_prop: PDouble;
    births_sex_prop_length: Integer;
  public
    procedure SetBasePop(var basePop: TGBFixedArray<Double>);
    procedure SetSurvivalProbability(var survivalProbability: TGBFixedArray<Double>);
    procedure SetNetMigration(var netMigration: TGBFixedArray<Double>);
    procedure SetAgeSpecificFertilityRate(var ageSpecificFertiityRate: TGBFixedArray<Double>);
    procedure SetBirthsSexProp(var birthsSexProp: TGBFixedArray<Double>);
end;

{$ALIGN 8}
type
  LeapfrogDpOut = record
  private
    p_total_pop: PDouble;
    p_total_pop_length: Integer;
    p_total_pop_natural_deaths: PDouble;
    p_total_pop_natural_deaths_length: Integer;
    births: PDouble;
    births_length: Integer;
  public
    procedure SetTotalPop(var pTotalPop: TGBFixedArray<Double>);
    procedure SetTotalPopNaturalDeaths(var pTotalPopNaturalDeaths: TGBFixedArray<Double>);
    procedure SetBirths(var outBirths: TGBFixedArray<Double>);
end;

type TCallbackFunction = procedure(Msg: PAnsiChar); stdcall;

procedure LeapfrogRunDp(var params: LeapfrogDpParams; var leapfrogOut: LeapfrogDpOut; errorHandler: TCallbackFunction); safecall; external 'leapfrog.dll' name 'run_dp';

implementation

procedure LeapfrogDpParams.SetBasePop(var basePop: TGBFixedArray<Double>);
begin
  base_pop := PDouble(basePop.data);
  base_pop_length := basePop.GetLength();
end;

procedure LeapfrogDpParams.SetSurvivalProbability(var survivalProbability: TGBFixedArray<Double>);
begin
  survival_probability := PDouble(survivalProbability.data);
  survival_probability_length := survivalProbability.GetLength();
end;

procedure LeapfrogDpParams.SetNetMigration(var netMigration: TGBFixedArray<Double>);
begin
  net_migration := PDouble(netMigration.data);
  net_migration_length := netMigration.GetLength();
end;

procedure LeapfrogDpParams.SetAgeSpecificFertilityRate(var ageSpecificFertiityRate: TGBFixedArray<Double>);
begin
  age_specific_fertility_rate := PDouble(ageSpecificFertiityRate.data);
  age_specific_fertility_rate_length := ageSpecificFertiityRate.GetLength();
end;

procedure LeapfrogDpParams.SetBirthsSexProp(var birthsSexProp: TGBFixedArray<Double>);
begin
  births_sex_prop := PDouble(birthsSexProp.data);
  births_sex_prop_length := birthsSexProp.GetLength();
end;

procedure LeapfrogDpOut.SetTotalPop(var pTotalPop: TGBFixedArray<Double>);
begin
  p_total_pop := PDouble(pTotalPop.data);
  p_total_pop_length := pTotalPop.GetLength();
end;

procedure LeapfrogDpOut.SetTotalPopNaturalDeaths(var pTotalPopNaturalDeaths: TGBFixedArray<Double>);
begin
  p_total_pop_natural_deaths := PDouble(pTotalPopNaturalDeaths.data);
  p_total_pop_natural_deaths_length := pTotalPopNaturalDeaths.GetLength();
end;

procedure LeapfrogDpOut.SetBirths(var outBirths: TGBFixedArray<Double>);
begin
  births := PDouble(outBirths.data);
  births_length := outBirths.GetLength();
end;

end.
