// Generated by leapfrog cpp_generation: do not edit by hand
// This file is automatically generated. Do not edit this file. If you want to make changes
// edit leapfrog json files in `cpp_generation/modelSchemas` and run `uv run ./src/main.py` inside
// the `cpp_generation` folder.

unit LeapfrogInterface;

interface

uses GBFixedArray;

{$ALIGN 8}
type
  LeapfrogOptions = record
  public
    projStartYear: Integer;
    projEndYear: Integer;
end;

{$ALIGN 8}
type
  LeapfrogDpParams = record
  private
    basePop: PDouble;
    basePopLength: Integer;
    survivalProbability: PDouble;
    survivalProbabilityLength: Integer;
    netMigration: PDouble;
    netMigrationLength: Integer;
    ageSpecificFertilityRate: PDouble;
    ageSpecificFertilityRateLength: Integer;
    birthsSexProp: PDouble;
    birthsSexPropLength: Integer;
  public
    procedure SetBasePop(var inBasePop: TGBFixedArray<Double>);
    procedure SetSurvivalProbability(var inSurvivalProbability: TGBFixedArray<Double>);
    procedure SetNetMigration(var inNetMigration: TGBFixedArray<Double>);
    procedure SetAgeSpecificFertilityRate(var inAgeSpecificFertilityRate: TGBFixedArray<Double>);
    procedure SetBirthsSexProp(var inBirthsSexProp: TGBFixedArray<Double>);
end;

{$ALIGN 8}
type
  LeapfrogDpOut = record
  private
    pTotalPop: PDouble;
    pTotalPopLength: Integer;
    pTotalPopNaturalDeaths: PDouble;
    pTotalPopNaturalDeathsLength: Integer;
    births: PDouble;
    birthsLength: Integer;
  public
    procedure SetPTotalPop(var inPTotalPop: TGBFixedArray<Double>);
    procedure SetPTotalPopNaturalDeaths(var inPTotalPopNaturalDeaths: TGBFixedArray<Double>);
    procedure SetBirths(var inBirths: TGBFixedArray<Double>);
end;

{$ALIGN 8}
type
  LeapfrogHaParams = record
  private
    totalRate: PDouble;
    totalRateLength: Integer;
    relativeRiskAge: PDouble;
    relativeRiskAgeLength: Integer;
    relativeRiskSex: PDouble;
    relativeRiskSexLength: Integer;
    cd4Mortality: PDouble;
    cd4MortalityLength: Integer;
    cd4Progression: PDouble;
    cd4ProgressionLength: Integer;
    cd4InitialDistribution: PDouble;
    cd4InitialDistributionLength: Integer;
    scaleCd4Mortality: PInteger;
    scaleCd4MortalityLength: Integer;
    idxHmElig: PInteger;
    idxHmEligLength: Integer;
    mortality: PDouble;
    mortalityLength: Integer;
    mortalityTimeRateRatio: PDouble;
    mortalityTimeRateRatioLength: Integer;
    dropoutRecoverCd4: PInteger;
    dropoutRecoverCd4Length: Integer;
    dropoutRate: PDouble;
    dropoutRateLength: Integer;
    adultsOnArt: PDouble;
    adultsOnArtLength: Integer;
    adultsOnArtIsPercent: PInteger;
    adultsOnArtIsPercentLength: Integer;
    hArtStageDur: PDouble;
    hArtStageDurLength: Integer;
    initiationMortalityWeight: PDouble;
    initiationMortalityWeightLength: Integer;
  public
    procedure SetTotalRate(var inTotalRate: TGBFixedArray<Double>);
    procedure SetRelativeRiskAge(var inRelativeRiskAge: TGBFixedArray<Double>);
    procedure SetRelativeRiskSex(var inRelativeRiskSex: TGBFixedArray<Double>);
    procedure SetCd4Mortality(var inCd4Mortality: TGBFixedArray<Double>);
    procedure SetCd4Progression(var inCd4Progression: TGBFixedArray<Double>);
    procedure SetCd4InitialDistribution(var inCd4InitialDistribution: TGBFixedArray<Double>);
    procedure SetScaleCd4Mortality(var inScaleCd4Mortality: TGBFixedArray<Integer>);
    procedure SetIdxHmElig(var inIdxHmElig: TGBFixedArray<Integer>);
    procedure SetMortality(var inMortality: TGBFixedArray<Double>);
    procedure SetMortalityTimeRateRatio(var inMortalityTimeRateRatio: TGBFixedArray<Double>);
    procedure SetDropoutRecoverCd4(var inDropoutRecoverCd4: TGBFixedArray<Integer>);
    procedure SetDropoutRate(var inDropoutRate: TGBFixedArray<Double>);
    procedure SetAdultsOnArt(var inAdultsOnArt: TGBFixedArray<Double>);
    procedure SetAdultsOnArtIsPercent(var inAdultsOnArtIsPercent: TGBFixedArray<Integer>);
    procedure SetHArtStageDur(var inHArtStageDur: TGBFixedArray<Double>);
    procedure SetInitiationMortalityWeight(var inInitiationMortalityWeight: TGBFixedArray<Double>);
end;

{$ALIGN 8}
type
  LeapfrogHaOut = record
  private
    pHivPop: PDouble;
    pHivPopLength: Integer;
    pHivPopNaturalDeaths: PDouble;
    pHivPopNaturalDeathsLength: Integer;
    hHivAdult: PDouble;
    hHivAdultLength: Integer;
    hArtAdult: PDouble;
    hArtAdultLength: Integer;
    hHivDeathsNoArt: PDouble;
    hHivDeathsNoArtLength: Integer;
    pInfections: PDouble;
    pInfectionsLength: Integer;
    hHivDeathsArt: PDouble;
    hHivDeathsArtLength: Integer;
    hArtInitiation: PDouble;
    hArtInitiationLength: Integer;
    pHivDeaths: PDouble;
    pHivDeathsLength: Integer;
  public
    procedure SetPHivPop(var inPHivPop: TGBFixedArray<Double>);
    procedure SetPHivPopNaturalDeaths(var inPHivPopNaturalDeaths: TGBFixedArray<Double>);
    procedure SetHHivAdult(var inHHivAdult: TGBFixedArray<Double>);
    procedure SetHArtAdult(var inHArtAdult: TGBFixedArray<Double>);
    procedure SetHHivDeathsNoArt(var inHHivDeathsNoArt: TGBFixedArray<Double>);
    procedure SetPInfections(var inPInfections: TGBFixedArray<Double>);
    procedure SetHHivDeathsArt(var inHHivDeathsArt: TGBFixedArray<Double>);
    procedure SetHArtInitiation(var inHArtInitiation: TGBFixedArray<Double>);
    procedure SetPHivDeaths(var inPHivDeaths: TGBFixedArray<Double>);
end;

{$ALIGN 8}
type
  LeapfrogHcParams = record
  private
    hcNosocomial: PDouble;
    hcNosocomialLength: Integer;
    hc1Cd4Dist: PDouble;
    hc1Cd4DistLength: Integer;
    hcCd4Transition: PDouble;
    hcCd4TransitionLength: Integer;
    hc1Cd4Mort: PDouble;
    hc1Cd4MortLength: Integer;
    hc2Cd4Mort: PDouble;
    hc2Cd4MortLength: Integer;
    hc1Cd4Prog: PDouble;
    hc1Cd4ProgLength: Integer;
    hc2Cd4Prog: PDouble;
    hc2Cd4ProgLength: Integer;
    ctxVal: PDouble;
    ctxValLength: Integer;
    hcArtEligAge: PInteger;
    hcArtEligAgeLength: Integer;
    hcArtEligCd4: PDouble;
    hcArtEligCd4Length: Integer;
    hcArtMortRr: PDouble;
    hcArtMortRrLength: Integer;
    hc1ArtMort: PDouble;
    hc1ArtMortLength: Integer;
    hc2ArtMort: PDouble;
    hc2ArtMortLength: Integer;
    hcArtIsperc: PInteger;
    hcArtIspercLength: Integer;
    hcArtVal: PDouble;
    hcArtValLength: Integer;
    hcArtInitDist: PDouble;
    hcArtInitDistLength: Integer;
    adultCd4Dist: PDouble;
    adultCd4DistLength: Integer;
    fertMultByAge: PDouble;
    fertMultByAgeLength: Integer;
    fertMultOffArt: PDouble;
    fertMultOffArtLength: Integer;
    fertMultOnArt: PDouble;
    fertMultOnArtLength: Integer;
    totalFertilityRate: PDouble;
    totalFertilityRateLength: Integer;
    pmtct: PDouble;
    pmtctLength: Integer;
    verticalTransmissionRate: PDouble;
    verticalTransmissionRateLength: Integer;
    pmtctTransmissionRate: PDouble;
    pmtctTransmissionRateLength: Integer;
    pmtctDropout: PDouble;
    pmtctDropoutLength: Integer;
    pmtctInputIsPercent: PInteger;
    pmtctInputIsPercentLength: Integer;
    breastfeedingDurationArt: PDouble;
    breastfeedingDurationArtLength: Integer;
    breastfeedingDurationNoArt: PDouble;
    breastfeedingDurationNoArtLength: Integer;
    matHivBirths: PDouble;
    matHivBirthsLength: Integer;
    matPrevInput: PInteger;
    matPrevInputLength: Integer;
    propLt200: PDouble;
    propLt200Length: Integer;
    propGte350: PDouble;
    propGte350Length: Integer;
    incrate: PDouble;
    incrateLength: Integer;
    ctxValIsPercent: PInteger;
    ctxValIsPercentLength: Integer;
    hcArtIsAgeSpec: PInteger;
    hcArtIsAgeSpecLength: Integer;
    hcAgeCoarse: PDouble;
    hcAgeCoarseLength: Integer;
    abortion: PDouble;
    abortionLength: Integer;
    patientsReallocated: PDouble;
    patientsReallocatedLength: Integer;
    hcArtLtfu: PDouble;
    hcArtLtfuLength: Integer;
    hcAgeCoarseCd4: PInteger;
    hcAgeCoarseCd4Length: Integer;
    adultFemaleInfections: PDouble;
    adultFemaleInfectionsLength: Integer;
    adultFemaleHivnpop: PDouble;
    adultFemaleHivnpopLength: Integer;
    totalBirths: PDouble;
    totalBirthsLength: Integer;
    ctxEffect: PDouble;
    ctxEffectLength: Integer;
    hcArtStart: PDouble;
    hcArtStartLength: Integer;
    localAdjFactor: PDouble;
    localAdjFactorLength: Integer;
  public
    procedure SetHcNosocomial(var inHcNosocomial: TGBFixedArray<Double>);
    procedure SetHc1Cd4Dist(var inHc1Cd4Dist: TGBFixedArray<Double>);
    procedure SetHcCd4Transition(var inHcCd4Transition: TGBFixedArray<Double>);
    procedure SetHc1Cd4Mort(var inHc1Cd4Mort: TGBFixedArray<Double>);
    procedure SetHc2Cd4Mort(var inHc2Cd4Mort: TGBFixedArray<Double>);
    procedure SetHc1Cd4Prog(var inHc1Cd4Prog: TGBFixedArray<Double>);
    procedure SetHc2Cd4Prog(var inHc2Cd4Prog: TGBFixedArray<Double>);
    procedure SetCtxVal(var inCtxVal: TGBFixedArray<Double>);
    procedure SetHcArtEligAge(var inHcArtEligAge: TGBFixedArray<Integer>);
    procedure SetHcArtEligCd4(var inHcArtEligCd4: TGBFixedArray<Double>);
    procedure SetHcArtMortRr(var inHcArtMortRr: TGBFixedArray<Double>);
    procedure SetHc1ArtMort(var inHc1ArtMort: TGBFixedArray<Double>);
    procedure SetHc2ArtMort(var inHc2ArtMort: TGBFixedArray<Double>);
    procedure SetHcArtIsperc(var inHcArtIsperc: TGBFixedArray<Integer>);
    procedure SetHcArtVal(var inHcArtVal: TGBFixedArray<Double>);
    procedure SetHcArtInitDist(var inHcArtInitDist: TGBFixedArray<Double>);
    procedure SetAdultCd4Dist(var inAdultCd4Dist: TGBFixedArray<Double>);
    procedure SetFertMultByAge(var inFertMultByAge: TGBFixedArray<Double>);
    procedure SetFertMultOffArt(var inFertMultOffArt: TGBFixedArray<Double>);
    procedure SetFertMultOnArt(var inFertMultOnArt: TGBFixedArray<Double>);
    procedure SetTotalFertilityRate(var inTotalFertilityRate: TGBFixedArray<Double>);
    procedure SetPmtct(var inPmtct: TGBFixedArray<Double>);
    procedure SetVerticalTransmissionRate(var inVerticalTransmissionRate: TGBFixedArray<Double>);
    procedure SetPmtctTransmissionRate(var inPmtctTransmissionRate: TGBFixedArray<Double>);
    procedure SetPmtctDropout(var inPmtctDropout: TGBFixedArray<Double>);
    procedure SetPmtctInputIsPercent(var inPmtctInputIsPercent: TGBFixedArray<Integer>);
    procedure SetBreastfeedingDurationArt(var inBreastfeedingDurationArt: TGBFixedArray<Double>);
    procedure SetBreastfeedingDurationNoArt(var inBreastfeedingDurationNoArt: TGBFixedArray<Double>);
    procedure SetMatHivBirths(var inMatHivBirths: TGBFixedArray<Double>);
    procedure SetMatPrevInput(var inMatPrevInput: TGBFixedArray<Integer>);
    procedure SetPropLt200(var inPropLt200: TGBFixedArray<Double>);
    procedure SetPropGte350(var inPropGte350: TGBFixedArray<Double>);
    procedure SetIncrate(var inIncrate: TGBFixedArray<Double>);
    procedure SetCtxValIsPercent(var inCtxValIsPercent: TGBFixedArray<Integer>);
    procedure SetHcArtIsAgeSpec(var inHcArtIsAgeSpec: TGBFixedArray<Integer>);
    procedure SetHcAgeCoarse(var inHcAgeCoarse: TGBFixedArray<Double>);
    procedure SetAbortion(var inAbortion: TGBFixedArray<Double>);
    procedure SetPatientsReallocated(var inPatientsReallocated: TGBFixedArray<Double>);
    procedure SetHcArtLtfu(var inHcArtLtfu: TGBFixedArray<Double>);
    procedure SetHcAgeCoarseCd4(var inHcAgeCoarseCd4: TGBFixedArray<Integer>);
    procedure SetAdultFemaleInfections(var inAdultFemaleInfections: TGBFixedArray<Double>);
    procedure SetAdultFemaleHivnpop(var inAdultFemaleHivnpop: TGBFixedArray<Double>);
    procedure SetTotalBirths(var inTotalBirths: TGBFixedArray<Double>);
    procedure SetCtxEffect(var inCtxEffect: TGBFixedArray<Double>);
    procedure SetHcArtStart(var inHcArtStart: TGBFixedArray<Double>);
    procedure SetLocalAdjFactor(var inLocalAdjFactor: TGBFixedArray<Double>);
end;

{$ALIGN 8}
type
  LeapfrogHcOut = record
  private
    hc1HivPop: PDouble;
    hc1HivPopLength: Integer;
    hc2HivPop: PDouble;
    hc2HivPopLength: Integer;
    hc1ArtPop: PDouble;
    hc1ArtPopLength: Integer;
    hc2ArtPop: PDouble;
    hc2ArtPopLength: Integer;
    hc1NoartAidsDeaths: PDouble;
    hc1NoartAidsDeathsLength: Integer;
    hc2NoartAidsDeaths: PDouble;
    hc2NoartAidsDeathsLength: Integer;
    hc1ArtAidsDeaths: PDouble;
    hc1ArtAidsDeathsLength: Integer;
    hc2ArtAidsDeaths: PDouble;
    hc2ArtAidsDeathsLength: Integer;
    hcArtInit: PDouble;
    hcArtInitLength: Integer;
    hcArtNeedInit: PDouble;
    hcArtNeedInitLength: Integer;
    hivBirths: PDouble;
    hivBirthsLength: Integer;
    ctxNeed: PDouble;
    ctxNeedLength: Integer;
    infectionByType: PDouble;
    infectionByTypeLength: Integer;
  public
    procedure SetHc1HivPop(var inHc1HivPop: TGBFixedArray<Double>);
    procedure SetHc2HivPop(var inHc2HivPop: TGBFixedArray<Double>);
    procedure SetHc1ArtPop(var inHc1ArtPop: TGBFixedArray<Double>);
    procedure SetHc2ArtPop(var inHc2ArtPop: TGBFixedArray<Double>);
    procedure SetHc1NoartAidsDeaths(var inHc1NoartAidsDeaths: TGBFixedArray<Double>);
    procedure SetHc2NoartAidsDeaths(var inHc2NoartAidsDeaths: TGBFixedArray<Double>);
    procedure SetHc1ArtAidsDeaths(var inHc1ArtAidsDeaths: TGBFixedArray<Double>);
    procedure SetHc2ArtAidsDeaths(var inHc2ArtAidsDeaths: TGBFixedArray<Double>);
    procedure SetHcArtInit(var inHcArtInit: TGBFixedArray<Double>);
    procedure SetHcArtNeedInit(var inHcArtNeedInit: TGBFixedArray<Double>);
    procedure SetHivBirths(var inHivBirths: TGBFixedArray<Double>);
    procedure SetCtxNeed(var inCtxNeed: TGBFixedArray<Double>);
    procedure SetInfectionByType(var inInfectionByType: TGBFixedArray<Double>);
end;

{$ALIGN 8}
type
  LeapfrogParams = record
  private
    dp: ^LeapfrogDpParams;
    ha: ^LeapfrogHaParams;
    hc: ^LeapfrogHcParams;
  public
    procedure SetDpParams(var dpParams: LeapfrogDpParams);
    procedure SetHaParams(var haParams: LeapfrogHaParams);
    procedure SetHcParams(var hcParams: LeapfrogHcParams);
end;

{$ALIGN 8}
type
  LeapfrogOut = record
  private
    dp: ^LeapfrogDpOut;
    ha: ^LeapfrogHaOut;
    hc: ^LeapfrogHcOut;
  public
    procedure SetDpOut(var dpOut: LeapfrogDpOut);
    procedure SetHaOut(var haOut: LeapfrogHaOut);
    procedure SetHcOut(var hcOut: LeapfrogHcOut);
end;

type TCallbackFunction = procedure(Msg: PAnsiChar); stdcall;

procedure LeapfrogRunDp(var opts: LeapfrogOptions; var params: LeapfrogParams; var leapfrogOut: LeapfrogOut; errorHandler: TCallbackFunction); safecall; external 'leapfrog.dll' name 'run_dp';
procedure LeapfrogRunAim(var opts: LeapfrogOptions; var params: LeapfrogParams; var leapfrogOut: LeapfrogOut; errorHandler: TCallbackFunction); safecall; external 'leapfrog.dll' name 'run_aim';

implementation

procedure LeapfrogDpParams.SetBasePop(var inBasePop: TGBFixedArray<Double>);
begin
  basePop := PDouble(inBasePop.data);
  basePopLength := inBasePop.GetLength();
end;

procedure LeapfrogDpParams.SetSurvivalProbability(var inSurvivalProbability: TGBFixedArray<Double>);
begin
  survivalProbability := PDouble(inSurvivalProbability.data);
  survivalProbabilityLength := inSurvivalProbability.GetLength();
end;

procedure LeapfrogDpParams.SetNetMigration(var inNetMigration: TGBFixedArray<Double>);
begin
  netMigration := PDouble(inNetMigration.data);
  netMigrationLength := inNetMigration.GetLength();
end;

procedure LeapfrogDpParams.SetAgeSpecificFertilityRate(var inAgeSpecificFertilityRate: TGBFixedArray<Double>);
begin
  ageSpecificFertilityRate := PDouble(inAgeSpecificFertilityRate.data);
  ageSpecificFertilityRateLength := inAgeSpecificFertilityRate.GetLength();
end;

procedure LeapfrogDpParams.SetBirthsSexProp(var inBirthsSexProp: TGBFixedArray<Double>);
begin
  birthsSexProp := PDouble(inBirthsSexProp.data);
  birthsSexPropLength := inBirthsSexProp.GetLength();
end;

procedure LeapfrogDpOut.SetPTotalPop(var inPTotalPop: TGBFixedArray<Double>);
begin
  pTotalPop := PDouble(inPTotalPop.data);
  pTotalPopLength := inPTotalPop.GetLength();
end;

procedure LeapfrogDpOut.SetPTotalPopNaturalDeaths(var inPTotalPopNaturalDeaths: TGBFixedArray<Double>);
begin
  pTotalPopNaturalDeaths := PDouble(inPTotalPopNaturalDeaths.data);
  pTotalPopNaturalDeathsLength := inPTotalPopNaturalDeaths.GetLength();
end;

procedure LeapfrogDpOut.SetBirths(var inBirths: TGBFixedArray<Double>);
begin
  births := PDouble(inBirths.data);
  birthsLength := inBirths.GetLength();
end;

procedure LeapfrogHaParams.SetTotalRate(var inTotalRate: TGBFixedArray<Double>);
begin
  totalRate := PDouble(inTotalRate.data);
  totalRateLength := inTotalRate.GetLength();
end;

procedure LeapfrogHaParams.SetRelativeRiskAge(var inRelativeRiskAge: TGBFixedArray<Double>);
begin
  relativeRiskAge := PDouble(inRelativeRiskAge.data);
  relativeRiskAgeLength := inRelativeRiskAge.GetLength();
end;

procedure LeapfrogHaParams.SetRelativeRiskSex(var inRelativeRiskSex: TGBFixedArray<Double>);
begin
  relativeRiskSex := PDouble(inRelativeRiskSex.data);
  relativeRiskSexLength := inRelativeRiskSex.GetLength();
end;

procedure LeapfrogHaParams.SetCd4Mortality(var inCd4Mortality: TGBFixedArray<Double>);
begin
  cd4Mortality := PDouble(inCd4Mortality.data);
  cd4MortalityLength := inCd4Mortality.GetLength();
end;

procedure LeapfrogHaParams.SetCd4Progression(var inCd4Progression: TGBFixedArray<Double>);
begin
  cd4Progression := PDouble(inCd4Progression.data);
  cd4ProgressionLength := inCd4Progression.GetLength();
end;

procedure LeapfrogHaParams.SetCd4InitialDistribution(var inCd4InitialDistribution: TGBFixedArray<Double>);
begin
  cd4InitialDistribution := PDouble(inCd4InitialDistribution.data);
  cd4InitialDistributionLength := inCd4InitialDistribution.GetLength();
end;

procedure LeapfrogHaParams.SetScaleCd4Mortality(var inScaleCd4Mortality: TGBFixedArray<Integer>);
begin
  scaleCd4Mortality := PInteger(inScaleCd4Mortality.data);
  scaleCd4MortalityLength := inScaleCd4Mortality.GetLength();
end;

procedure LeapfrogHaParams.SetIdxHmElig(var inIdxHmElig: TGBFixedArray<Integer>);
begin
  idxHmElig := PInteger(inIdxHmElig.data);
  idxHmEligLength := inIdxHmElig.GetLength();
end;

procedure LeapfrogHaParams.SetMortality(var inMortality: TGBFixedArray<Double>);
begin
  mortality := PDouble(inMortality.data);
  mortalityLength := inMortality.GetLength();
end;

procedure LeapfrogHaParams.SetMortalityTimeRateRatio(var inMortalityTimeRateRatio: TGBFixedArray<Double>);
begin
  mortalityTimeRateRatio := PDouble(inMortalityTimeRateRatio.data);
  mortalityTimeRateRatioLength := inMortalityTimeRateRatio.GetLength();
end;

procedure LeapfrogHaParams.SetDropoutRecoverCd4(var inDropoutRecoverCd4: TGBFixedArray<Integer>);
begin
  dropoutRecoverCd4 := PInteger(inDropoutRecoverCd4.data);
  dropoutRecoverCd4Length := inDropoutRecoverCd4.GetLength();
end;

procedure LeapfrogHaParams.SetDropoutRate(var inDropoutRate: TGBFixedArray<Double>);
begin
  dropoutRate := PDouble(inDropoutRate.data);
  dropoutRateLength := inDropoutRate.GetLength();
end;

procedure LeapfrogHaParams.SetAdultsOnArt(var inAdultsOnArt: TGBFixedArray<Double>);
begin
  adultsOnArt := PDouble(inAdultsOnArt.data);
  adultsOnArtLength := inAdultsOnArt.GetLength();
end;

procedure LeapfrogHaParams.SetAdultsOnArtIsPercent(var inAdultsOnArtIsPercent: TGBFixedArray<Integer>);
begin
  adultsOnArtIsPercent := PInteger(inAdultsOnArtIsPercent.data);
  adultsOnArtIsPercentLength := inAdultsOnArtIsPercent.GetLength();
end;

procedure LeapfrogHaParams.SetHArtStageDur(var inHArtStageDur: TGBFixedArray<Double>);
begin
  hArtStageDur := PDouble(inHArtStageDur.data);
  hArtStageDurLength := inHArtStageDur.GetLength();
end;

procedure LeapfrogHaParams.SetInitiationMortalityWeight(var inInitiationMortalityWeight: TGBFixedArray<Double>);
begin
  initiationMortalityWeight := PDouble(inInitiationMortalityWeight.data);
  initiationMortalityWeightLength := inInitiationMortalityWeight.GetLength();
end;

procedure LeapfrogHaOut.SetPHivPop(var inPHivPop: TGBFixedArray<Double>);
begin
  pHivPop := PDouble(inPHivPop.data);
  pHivPopLength := inPHivPop.GetLength();
end;

procedure LeapfrogHaOut.SetPHivPopNaturalDeaths(var inPHivPopNaturalDeaths: TGBFixedArray<Double>);
begin
  pHivPopNaturalDeaths := PDouble(inPHivPopNaturalDeaths.data);
  pHivPopNaturalDeathsLength := inPHivPopNaturalDeaths.GetLength();
end;

procedure LeapfrogHaOut.SetHHivAdult(var inHHivAdult: TGBFixedArray<Double>);
begin
  hHivAdult := PDouble(inHHivAdult.data);
  hHivAdultLength := inHHivAdult.GetLength();
end;

procedure LeapfrogHaOut.SetHArtAdult(var inHArtAdult: TGBFixedArray<Double>);
begin
  hArtAdult := PDouble(inHArtAdult.data);
  hArtAdultLength := inHArtAdult.GetLength();
end;

procedure LeapfrogHaOut.SetHHivDeathsNoArt(var inHHivDeathsNoArt: TGBFixedArray<Double>);
begin
  hHivDeathsNoArt := PDouble(inHHivDeathsNoArt.data);
  hHivDeathsNoArtLength := inHHivDeathsNoArt.GetLength();
end;

procedure LeapfrogHaOut.SetPInfections(var inPInfections: TGBFixedArray<Double>);
begin
  pInfections := PDouble(inPInfections.data);
  pInfectionsLength := inPInfections.GetLength();
end;

procedure LeapfrogHaOut.SetHHivDeathsArt(var inHHivDeathsArt: TGBFixedArray<Double>);
begin
  hHivDeathsArt := PDouble(inHHivDeathsArt.data);
  hHivDeathsArtLength := inHHivDeathsArt.GetLength();
end;

procedure LeapfrogHaOut.SetHArtInitiation(var inHArtInitiation: TGBFixedArray<Double>);
begin
  hArtInitiation := PDouble(inHArtInitiation.data);
  hArtInitiationLength := inHArtInitiation.GetLength();
end;

procedure LeapfrogHaOut.SetPHivDeaths(var inPHivDeaths: TGBFixedArray<Double>);
begin
  pHivDeaths := PDouble(inPHivDeaths.data);
  pHivDeathsLength := inPHivDeaths.GetLength();
end;

procedure LeapfrogHcParams.SetHcNosocomial(var inHcNosocomial: TGBFixedArray<Double>);
begin
  hcNosocomial := PDouble(inHcNosocomial.data);
  hcNosocomialLength := inHcNosocomial.GetLength();
end;

procedure LeapfrogHcParams.SetHc1Cd4Dist(var inHc1Cd4Dist: TGBFixedArray<Double>);
begin
  hc1Cd4Dist := PDouble(inHc1Cd4Dist.data);
  hc1Cd4DistLength := inHc1Cd4Dist.GetLength();
end;

procedure LeapfrogHcParams.SetHcCd4Transition(var inHcCd4Transition: TGBFixedArray<Double>);
begin
  hcCd4Transition := PDouble(inHcCd4Transition.data);
  hcCd4TransitionLength := inHcCd4Transition.GetLength();
end;

procedure LeapfrogHcParams.SetHc1Cd4Mort(var inHc1Cd4Mort: TGBFixedArray<Double>);
begin
  hc1Cd4Mort := PDouble(inHc1Cd4Mort.data);
  hc1Cd4MortLength := inHc1Cd4Mort.GetLength();
end;

procedure LeapfrogHcParams.SetHc2Cd4Mort(var inHc2Cd4Mort: TGBFixedArray<Double>);
begin
  hc2Cd4Mort := PDouble(inHc2Cd4Mort.data);
  hc2Cd4MortLength := inHc2Cd4Mort.GetLength();
end;

procedure LeapfrogHcParams.SetHc1Cd4Prog(var inHc1Cd4Prog: TGBFixedArray<Double>);
begin
  hc1Cd4Prog := PDouble(inHc1Cd4Prog.data);
  hc1Cd4ProgLength := inHc1Cd4Prog.GetLength();
end;

procedure LeapfrogHcParams.SetHc2Cd4Prog(var inHc2Cd4Prog: TGBFixedArray<Double>);
begin
  hc2Cd4Prog := PDouble(inHc2Cd4Prog.data);
  hc2Cd4ProgLength := inHc2Cd4Prog.GetLength();
end;

procedure LeapfrogHcParams.SetCtxVal(var inCtxVal: TGBFixedArray<Double>);
begin
  ctxVal := PDouble(inCtxVal.data);
  ctxValLength := inCtxVal.GetLength();
end;

procedure LeapfrogHcParams.SetHcArtEligAge(var inHcArtEligAge: TGBFixedArray<Integer>);
begin
  hcArtEligAge := PInteger(inHcArtEligAge.data);
  hcArtEligAgeLength := inHcArtEligAge.GetLength();
end;

procedure LeapfrogHcParams.SetHcArtEligCd4(var inHcArtEligCd4: TGBFixedArray<Double>);
begin
  hcArtEligCd4 := PDouble(inHcArtEligCd4.data);
  hcArtEligCd4Length := inHcArtEligCd4.GetLength();
end;

procedure LeapfrogHcParams.SetHcArtMortRr(var inHcArtMortRr: TGBFixedArray<Double>);
begin
  hcArtMortRr := PDouble(inHcArtMortRr.data);
  hcArtMortRrLength := inHcArtMortRr.GetLength();
end;

procedure LeapfrogHcParams.SetHc1ArtMort(var inHc1ArtMort: TGBFixedArray<Double>);
begin
  hc1ArtMort := PDouble(inHc1ArtMort.data);
  hc1ArtMortLength := inHc1ArtMort.GetLength();
end;

procedure LeapfrogHcParams.SetHc2ArtMort(var inHc2ArtMort: TGBFixedArray<Double>);
begin
  hc2ArtMort := PDouble(inHc2ArtMort.data);
  hc2ArtMortLength := inHc2ArtMort.GetLength();
end;

procedure LeapfrogHcParams.SetHcArtIsperc(var inHcArtIsperc: TGBFixedArray<Integer>);
begin
  hcArtIsperc := PInteger(inHcArtIsperc.data);
  hcArtIspercLength := inHcArtIsperc.GetLength();
end;

procedure LeapfrogHcParams.SetHcArtVal(var inHcArtVal: TGBFixedArray<Double>);
begin
  hcArtVal := PDouble(inHcArtVal.data);
  hcArtValLength := inHcArtVal.GetLength();
end;

procedure LeapfrogHcParams.SetHcArtInitDist(var inHcArtInitDist: TGBFixedArray<Double>);
begin
  hcArtInitDist := PDouble(inHcArtInitDist.data);
  hcArtInitDistLength := inHcArtInitDist.GetLength();
end;

procedure LeapfrogHcParams.SetAdultCd4Dist(var inAdultCd4Dist: TGBFixedArray<Double>);
begin
  adultCd4Dist := PDouble(inAdultCd4Dist.data);
  adultCd4DistLength := inAdultCd4Dist.GetLength();
end;

procedure LeapfrogHcParams.SetFertMultByAge(var inFertMultByAge: TGBFixedArray<Double>);
begin
  fertMultByAge := PDouble(inFertMultByAge.data);
  fertMultByAgeLength := inFertMultByAge.GetLength();
end;

procedure LeapfrogHcParams.SetFertMultOffArt(var inFertMultOffArt: TGBFixedArray<Double>);
begin
  fertMultOffArt := PDouble(inFertMultOffArt.data);
  fertMultOffArtLength := inFertMultOffArt.GetLength();
end;

procedure LeapfrogHcParams.SetFertMultOnArt(var inFertMultOnArt: TGBFixedArray<Double>);
begin
  fertMultOnArt := PDouble(inFertMultOnArt.data);
  fertMultOnArtLength := inFertMultOnArt.GetLength();
end;

procedure LeapfrogHcParams.SetTotalFertilityRate(var inTotalFertilityRate: TGBFixedArray<Double>);
begin
  totalFertilityRate := PDouble(inTotalFertilityRate.data);
  totalFertilityRateLength := inTotalFertilityRate.GetLength();
end;

procedure LeapfrogHcParams.SetPmtct(var inPmtct: TGBFixedArray<Double>);
begin
  pmtct := PDouble(inPmtct.data);
  pmtctLength := inPmtct.GetLength();
end;

procedure LeapfrogHcParams.SetVerticalTransmissionRate(var inVerticalTransmissionRate: TGBFixedArray<Double>);
begin
  verticalTransmissionRate := PDouble(inVerticalTransmissionRate.data);
  verticalTransmissionRateLength := inVerticalTransmissionRate.GetLength();
end;

procedure LeapfrogHcParams.SetPmtctTransmissionRate(var inPmtctTransmissionRate: TGBFixedArray<Double>);
begin
  pmtctTransmissionRate := PDouble(inPmtctTransmissionRate.data);
  pmtctTransmissionRateLength := inPmtctTransmissionRate.GetLength();
end;

procedure LeapfrogHcParams.SetPmtctDropout(var inPmtctDropout: TGBFixedArray<Double>);
begin
  pmtctDropout := PDouble(inPmtctDropout.data);
  pmtctDropoutLength := inPmtctDropout.GetLength();
end;

procedure LeapfrogHcParams.SetPmtctInputIsPercent(var inPmtctInputIsPercent: TGBFixedArray<Integer>);
begin
  pmtctInputIsPercent := PInteger(inPmtctInputIsPercent.data);
  pmtctInputIsPercentLength := inPmtctInputIsPercent.GetLength();
end;

procedure LeapfrogHcParams.SetBreastfeedingDurationArt(var inBreastfeedingDurationArt: TGBFixedArray<Double>);
begin
  breastfeedingDurationArt := PDouble(inBreastfeedingDurationArt.data);
  breastfeedingDurationArtLength := inBreastfeedingDurationArt.GetLength();
end;

procedure LeapfrogHcParams.SetBreastfeedingDurationNoArt(var inBreastfeedingDurationNoArt: TGBFixedArray<Double>);
begin
  breastfeedingDurationNoArt := PDouble(inBreastfeedingDurationNoArt.data);
  breastfeedingDurationNoArtLength := inBreastfeedingDurationNoArt.GetLength();
end;

procedure LeapfrogHcParams.SetMatHivBirths(var inMatHivBirths: TGBFixedArray<Double>);
begin
  matHivBirths := PDouble(inMatHivBirths.data);
  matHivBirthsLength := inMatHivBirths.GetLength();
end;

procedure LeapfrogHcParams.SetMatPrevInput(var inMatPrevInput: TGBFixedArray<Integer>);
begin
  matPrevInput := PInteger(inMatPrevInput.data);
  matPrevInputLength := inMatPrevInput.GetLength();
end;

procedure LeapfrogHcParams.SetPropLt200(var inPropLt200: TGBFixedArray<Double>);
begin
  propLt200 := PDouble(inPropLt200.data);
  propLt200Length := inPropLt200.GetLength();
end;

procedure LeapfrogHcParams.SetPropGte350(var inPropGte350: TGBFixedArray<Double>);
begin
  propGte350 := PDouble(inPropGte350.data);
  propGte350Length := inPropGte350.GetLength();
end;

procedure LeapfrogHcParams.SetIncrate(var inIncrate: TGBFixedArray<Double>);
begin
  incrate := PDouble(inIncrate.data);
  incrateLength := inIncrate.GetLength();
end;

procedure LeapfrogHcParams.SetCtxValIsPercent(var inCtxValIsPercent: TGBFixedArray<Integer>);
begin
  ctxValIsPercent := PInteger(inCtxValIsPercent.data);
  ctxValIsPercentLength := inCtxValIsPercent.GetLength();
end;

procedure LeapfrogHcParams.SetHcArtIsAgeSpec(var inHcArtIsAgeSpec: TGBFixedArray<Integer>);
begin
  hcArtIsAgeSpec := PInteger(inHcArtIsAgeSpec.data);
  hcArtIsAgeSpecLength := inHcArtIsAgeSpec.GetLength();
end;

procedure LeapfrogHcParams.SetHcAgeCoarse(var inHcAgeCoarse: TGBFixedArray<Double>);
begin
  hcAgeCoarse := PDouble(inHcAgeCoarse.data);
  hcAgeCoarseLength := inHcAgeCoarse.GetLength();
end;

procedure LeapfrogHcParams.SetAbortion(var inAbortion: TGBFixedArray<Double>);
begin
  abortion := PDouble(inAbortion.data);
  abortionLength := inAbortion.GetLength();
end;

procedure LeapfrogHcParams.SetPatientsReallocated(var inPatientsReallocated: TGBFixedArray<Double>);
begin
  patientsReallocated := PDouble(inPatientsReallocated.data);
  patientsReallocatedLength := inPatientsReallocated.GetLength();
end;

procedure LeapfrogHcParams.SetHcArtLtfu(var inHcArtLtfu: TGBFixedArray<Double>);
begin
  hcArtLtfu := PDouble(inHcArtLtfu.data);
  hcArtLtfuLength := inHcArtLtfu.GetLength();
end;

procedure LeapfrogHcParams.SetHcAgeCoarseCd4(var inHcAgeCoarseCd4: TGBFixedArray<Integer>);
begin
  hcAgeCoarseCd4 := PInteger(inHcAgeCoarseCd4.data);
  hcAgeCoarseCd4Length := inHcAgeCoarseCd4.GetLength();
end;

procedure LeapfrogHcParams.SetAdultFemaleInfections(var inAdultFemaleInfections: TGBFixedArray<Double>);
begin
  adultFemaleInfections := PDouble(inAdultFemaleInfections.data);
  adultFemaleInfectionsLength := inAdultFemaleInfections.GetLength();
end;

procedure LeapfrogHcParams.SetAdultFemaleHivnpop(var inAdultFemaleHivnpop: TGBFixedArray<Double>);
begin
  adultFemaleHivnpop := PDouble(inAdultFemaleHivnpop.data);
  adultFemaleHivnpopLength := inAdultFemaleHivnpop.GetLength();
end;

procedure LeapfrogHcParams.SetTotalBirths(var inTotalBirths: TGBFixedArray<Double>);
begin
  totalBirths := PDouble(inTotalBirths.data);
  totalBirthsLength := inTotalBirths.GetLength();
end;

procedure LeapfrogHcParams.SetCtxEffect(var inCtxEffect: TGBFixedArray<Double>);
begin
  ctxEffect := PDouble(inCtxEffect.data);
  ctxEffectLength := inCtxEffect.GetLength();
end;

procedure LeapfrogHcParams.SetHcArtStart(var inHcArtStart: TGBFixedArray<Double>);
begin
  hcArtStart := PDouble(inHcArtStart.data);
  hcArtStartLength := inHcArtStart.GetLength();
end;

procedure LeapfrogHcParams.SetLocalAdjFactor(var inLocalAdjFactor: TGBFixedArray<Double>);
begin
  localAdjFactor := PDouble(inLocalAdjFactor.data);
  localAdjFactorLength := inLocalAdjFactor.GetLength();
end;

procedure LeapfrogHcOut.SetHc1HivPop(var inHc1HivPop: TGBFixedArray<Double>);
begin
  hc1HivPop := PDouble(inHc1HivPop.data);
  hc1HivPopLength := inHc1HivPop.GetLength();
end;

procedure LeapfrogHcOut.SetHc2HivPop(var inHc2HivPop: TGBFixedArray<Double>);
begin
  hc2HivPop := PDouble(inHc2HivPop.data);
  hc2HivPopLength := inHc2HivPop.GetLength();
end;

procedure LeapfrogHcOut.SetHc1ArtPop(var inHc1ArtPop: TGBFixedArray<Double>);
begin
  hc1ArtPop := PDouble(inHc1ArtPop.data);
  hc1ArtPopLength := inHc1ArtPop.GetLength();
end;

procedure LeapfrogHcOut.SetHc2ArtPop(var inHc2ArtPop: TGBFixedArray<Double>);
begin
  hc2ArtPop := PDouble(inHc2ArtPop.data);
  hc2ArtPopLength := inHc2ArtPop.GetLength();
end;

procedure LeapfrogHcOut.SetHc1NoartAidsDeaths(var inHc1NoartAidsDeaths: TGBFixedArray<Double>);
begin
  hc1NoartAidsDeaths := PDouble(inHc1NoartAidsDeaths.data);
  hc1NoartAidsDeathsLength := inHc1NoartAidsDeaths.GetLength();
end;

procedure LeapfrogHcOut.SetHc2NoartAidsDeaths(var inHc2NoartAidsDeaths: TGBFixedArray<Double>);
begin
  hc2NoartAidsDeaths := PDouble(inHc2NoartAidsDeaths.data);
  hc2NoartAidsDeathsLength := inHc2NoartAidsDeaths.GetLength();
end;

procedure LeapfrogHcOut.SetHc1ArtAidsDeaths(var inHc1ArtAidsDeaths: TGBFixedArray<Double>);
begin
  hc1ArtAidsDeaths := PDouble(inHc1ArtAidsDeaths.data);
  hc1ArtAidsDeathsLength := inHc1ArtAidsDeaths.GetLength();
end;

procedure LeapfrogHcOut.SetHc2ArtAidsDeaths(var inHc2ArtAidsDeaths: TGBFixedArray<Double>);
begin
  hc2ArtAidsDeaths := PDouble(inHc2ArtAidsDeaths.data);
  hc2ArtAidsDeathsLength := inHc2ArtAidsDeaths.GetLength();
end;

procedure LeapfrogHcOut.SetHcArtInit(var inHcArtInit: TGBFixedArray<Double>);
begin
  hcArtInit := PDouble(inHcArtInit.data);
  hcArtInitLength := inHcArtInit.GetLength();
end;

procedure LeapfrogHcOut.SetHcArtNeedInit(var inHcArtNeedInit: TGBFixedArray<Double>);
begin
  hcArtNeedInit := PDouble(inHcArtNeedInit.data);
  hcArtNeedInitLength := inHcArtNeedInit.GetLength();
end;

procedure LeapfrogHcOut.SetHivBirths(var inHivBirths: TGBFixedArray<Double>);
begin
  hivBirths := PDouble(inHivBirths.data);
  hivBirthsLength := inHivBirths.GetLength();
end;

procedure LeapfrogHcOut.SetCtxNeed(var inCtxNeed: TGBFixedArray<Double>);
begin
  ctxNeed := PDouble(inCtxNeed.data);
  ctxNeedLength := inCtxNeed.GetLength();
end;

procedure LeapfrogHcOut.SetInfectionByType(var inInfectionByType: TGBFixedArray<Double>);
begin
  infectionByType := PDouble(inInfectionByType.data);
  infectionByTypeLength := inInfectionByType.GetLength();
end;

procedure LeapfrogParams.SetDpParams(var dpParams: LeapfrogDpParams);
begin
  dp := @dpParams;
end;

procedure LeapfrogOut.SetDpOut(var dpOut: LeapfrogDpOut);
begin
  dp := @dpOut;
end;

procedure LeapfrogParams.SetHaParams(var haParams: LeapfrogHaParams);
begin
  ha := @haParams;
end;

procedure LeapfrogOut.SetHaOut(var haOut: LeapfrogHaOut);
begin
  ha := @haOut;
end;

procedure LeapfrogParams.SetHcParams(var hcParams: LeapfrogHcParams);
begin
  hc := @hcParams;
end;

procedure LeapfrogOut.SetHcOut(var hcOut: LeapfrogHcOut);
begin
  hc := @hcOut;
end;

end.
