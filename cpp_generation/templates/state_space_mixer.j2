{% from "template_utils.j2" import comma_except_last %}
{% include "header.j2" %}

#pragma once

#include "state_space.hpp"

namespace leapfrog {
namespace internal {

template<bool enable, typename Mixin>
struct Pair;

template<typename ...Ts>
struct SSMixer;

template<MV ModelVariant, typename Mixin, typename ...Ts>
struct SSMixer<ModelVariant, Pair<false, Mixin>, Ts...>: public SSMixer<ModelVariant, Ts...> {};

template<MV ModelVariant, typename Mixin, typename ...Ts>
struct SSMixer<ModelVariant, Pair<true, Mixin>, Ts...>: Mixin, public SSMixer<ModelVariant, Ts...> {};

template<MV ModelVariant>
struct SSMixer<ModelVariant>: public BaseSS {};

template<MV ModelVariant>
using SSMixed = SSMixer<
  ModelVariant,
  {% for config in configs %}
  Pair<ModelVariant::{{ config.enable_if }}, {{ config.name }}SS<ModelVariant>>{{ comma_except_last(loop) }}
  {% endfor %}
>;

}
}
