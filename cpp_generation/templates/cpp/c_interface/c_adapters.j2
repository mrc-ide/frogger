{% from "template_utils.j2" import comma_except_last %}
{% include "header.j2" %}

#pragma once

#include <filesystem>
#include <sstream>
#include <string_view>
#include <stdexcept>

#include "../../array/array.h"
#include "../config_mixer.hpp"
#include "c_types.hpp"

namespace leapfrog {
namespace internal {

template<typename T, size_t Rank>
auto read_data(T* data, int length, std::string_view name, nda::shape_of_rank<Rank> shape) {
  const auto size = shape.flat_max() + 1;
  if (length != size) {
    std::ostringstream oss;
    oss << "Input data '" << name << "' is the wrong size. "
        << "Received array of length '" << length << "', expected '" << size << "'.";
    throw std::invalid_argument(oss.str());
  }
  return nda::array_ref_of_rank<T, Rank>(data, shape);
}

template <typename T, typename Shape>
void fill_initial_state(T* data, int length, const std::string_view name, nda::array<T, Shape> array) {
  nda::array_ref<T, Shape> array_ref(data);

  nda::for_each_index(Shape(), [&](auto i) {
    array[i] = array_ref[i];
  });
}

template<typename T, typename Shape>
void write_data(const nda::array<T, Shape>& array, T* output, int length, std::string_view name) {
  const auto* dataPtr = array.data();
  std::size_t totalSize = array.size();

  if (length != totalSize) {
    std::ostringstream oss;
    oss << "Output data '" << name << "' is the wrong size. "
        << "Received array of length '" << length << "', expected '" << totalSize << "'.";
    throw std::invalid_argument(oss.str());
  }
  std::copy(dataPtr, dataPtr + totalSize, output);
}

{% for config in configs %}
template<typename real_type, MV ModelVariant>
struct {{ config.name }}Adapter<Language::C, real_type, ModelVariant> {
  using SS = SSMixed<ModelVariant>;
  using Config = {{ config.name }}Config<real_type, ModelVariant>;

  static Config::Pars get_pars(
    const CParams<real_type> &params,
    const Options<real_type> &opts
  ) {
    return {
      {% for name, cfg in config.pars.items() %}
      .{{ name }} = {{ get_c_read_data(config.name, name, cfg) }}{{ comma_except_last(loop) }}
      {% endfor %}
    };
  };

  static Config::State get_initial_state(
    const CState<real_type>& state
  ){
    typename Config::State initial_state;
    {% for name, cfg in config.state.items() %}
    {{ get_c_initial_state(config.name, name, cfg) }};
    {% endfor %}
    return initial_state;
  };

  static constexpr int output_count = {{ dict_len(config.state) }};

  static int build_output(
    int index,
    const Config::OutputState& state,
    CState<real_type>& out
  ) {
    {% for name, cfg in config.state.items() %}
    {{ get_c_write_data(config.name, name, cfg) }}
    {% endfor %}
    return index + output_count;
  };

  static int build_output_single_year(
    int index,
    const Config::State& state,
    CState<real_type>& out
  ) {
    {% for name, cfg in config.state.items() %}
    {{ get_c_write_data_single_year(config.name, name, cfg) }}
    {% endfor %}
    return index + output_count;
  };
};

{% endfor %}
} // namespace internal
} // namespace leapfrog
