{% include "header.j2" %}

unit LeapfrogInterface;

interface

uses GBFixedArray;

{$ALIGN 8}
type
  LeapfrogOptions = record
  public
    projStartYear: Integer;
    projEndYear: Integer;
end;

{% for config in configs %}
{$ALIGN 8}
type
  Leapfrog{{ config.name }}Params = record
  private
    {% for name, cfg in config.pars.items() %}
    {{ to_lower_camel_case(name) }}: {{ get_delphi_ptr_type(cfg) }};
    {{ to_lower_camel_case(name) }}Length: Integer;
    {% endfor %}
  public
    {% for name, cfg in config.pars.items() %}
    procedure Set{{ to_camel_case(name) }}(var in{{ to_camel_case(name) }}: TGBFixedArray<{{ get_delphi_num_type(cfg) }}>);
    {% endfor %}
end;

{$ALIGN 8}
type
  Leapfrog{{ config.name }}Out = record
  private
    {% for name, cfg in config.state.items() %}
    {{ to_lower_camel_case(name) }}: {{ get_delphi_ptr_type(cfg) }};
    {{ to_lower_camel_case(name) }}Length: Integer;
    {% endfor %}
  public
    {% for name, cfg in config.state.items() %}
    procedure Set{{ to_camel_case(name) }}(var in{{ to_camel_case(name) }}: TGBFixedArray<{{get_delphi_num_type(cfg)}}>);
    {% endfor %}
end;

{% endfor %}
{$ALIGN 8}
type
  LeapfrogParams = record
  private
    {% for config in configs %}
    {{ config.name.lower() }}: ^Leapfrog{{ config.name }}Params;
    {% endfor %}
  public
    {% for config in configs %}
    procedure Set{{ config.name }}Params(var {{ config.name.lower() }}Params: Leapfrog{{ config.name }}Params);
    {% endfor %}
end;

{$ALIGN 8}
type
  LeapfrogOut = record
  private
    {% for config in configs %}
    {{ config.name.lower() }}: ^Leapfrog{{ config.name }}Out;
    {% endfor %}
  public
    {% for config in configs %}
    procedure Set{{ config.name }}Out(var {{ config.name.lower() }}Out: Leapfrog{{ config.name }}Out);
    {% endfor %}
end;

type TCallbackFunction = procedure(Msg: PAnsiChar); stdcall;

procedure LeapfrogRunDp(var opts: LeapfrogOptions; var params: LeapfrogParams; var leapfrogOut: LeapfrogOut; errorHandler: TCallbackFunction); safecall; external 'leapfrog.dll' name 'run_dp';
procedure LeapfrogRunAim(var opts: LeapfrogOptions; var params: LeapfrogParams; var leapfrogOut: LeapfrogOut; errorHandler: TCallbackFunction); safecall; external 'leapfrog.dll' name 'run_aim';

implementation

{% for config in configs %}
{% for name, cfg in config.pars.items() %}
procedure Leapfrog{{ config.name }}Params.Set{{ to_camel_case(name) }}(var in{{ to_camel_case(name) }}: TGBFixedArray<{{ get_delphi_num_type(cfg) }}>);
begin
  {{ to_lower_camel_case(name) }} := {{ get_delphi_ptr_type(cfg) }}(in{{ to_camel_case(name) }}.data);
  {{ to_lower_camel_case(name) }}Length := in{{ to_camel_case(name) }}.GetLength();
end;

{% endfor %}
{% for name, cfg in config.state.items() %}
procedure Leapfrog{{ config.name }}Out.Set{{ to_camel_case(name) }}(var in{{ to_camel_case(name) }}: TGBFixedArray<{{ get_delphi_num_type(cfg) }}>);
begin
  {{ to_lower_camel_case(name) }} := {{ get_delphi_ptr_type(cfg) }}(in{{ to_camel_case(name) }}.data);
  {{ to_lower_camel_case(name) }}Length := in{{ to_camel_case(name) }}.GetLength();
end;

{% endfor %}
{% endfor %}
{% for config in configs %}
procedure LeapfrogParams.Set{{ config.name }}Params(var {{ config.name.lower() }}Params: Leapfrog{{ config.name }}Params);
begin
  {{ config.name.lower() }} := @{{ config.name.lower() }}Params;
end;

procedure LeapfrogOut.Set{{ config.name }}Out(var {{ config.name.lower() }}Out: Leapfrog{{ config.name }}Out);
begin
  {{ config.name.lower() }} := @{{ config.name.lower() }}Out;
end;

{% endfor %}
end.
