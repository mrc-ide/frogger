{% from "template_utils.j2" import comma_except_last %}
{% include "header.j2" %}

#pragma once

#include "../../options.hpp"
#include "cpp_adapter.hpp"
#include "../adapter_mixer.hpp"

namespace leapfrog {

template<typename real_type, internal::MV ModelVariant>
using AdapterCpp = internal::AdapterMixer<
  real_type, ModelVariant,
  {% for config in configs %}
  internal::Triple<ModelVariant::{{ config.enable_if }}, internal::{{ config.name }}Config<real_type, ModelVariant>, internal::{{ config.name }}AdapterCpp<real_type, ModelVariant>>{{ comma_except_last(loop) }}
  {% endfor %}
>;

} // namespace leapfrog
