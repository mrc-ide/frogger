// ========= DO NOT EDIT =========
// This file is automatically generated. Do not edit this file. If you want to make changes
// edit `model_input.hpp.in` and run `./scripts/generate` to regenerate.

#pragma once

#include <Rcpp.h>
#include <unsupported/Eigen/CXX11/Tensor>

#include "types.hpp"

template <typename T>
T* r_data(SEXP x) {
  static_assert(sizeof(T) == 0, "Only specializations of r_data can be used");
}

template <>
double* r_data(SEXP x) {
  return REAL(x);
}

template <>
int * r_data(SEXP x) {
  return INTEGER(x);
}

template<typename T, typename... Args>
auto parse_data(const Rcpp::List data, const std::string& key, Args... dims) {
  constexpr std::size_t rank = sizeof...(dims);
  Eigen::array<int, rank> dimensions{ static_cast<int>(dims)... };

  int length = std::accumulate(dimensions.begin(), dimensions.end(), 1, std::multiplies<int>());
  SEXP array_data = data[key];
  // In cases where the input data has project years we might not use all of it model fit
  // So we can take create a Map over a smaller slice of the data
  // As long as this is true we can be confident we're not referencing invalid memory
  if (LENGTH(array_data) < length) {
    Rcpp::stop("Invalid size of data for '%s', expected %d got %d",
               key,
               length,
               LENGTH(array_data));
  }

  return Eigen::TensorMap<Eigen::Tensor<T, rank>>(r_data<T>(array_data), static_cast<int>(dims)...);
}

template<typename T, std::size_t rank>
auto convert_base(Eigen::TensorMap<Eigen::Tensor<int, rank>> map) {
  static_assert(sizeof(T) == 0, "Only specializations of convert_base can be used");
}

template<std::size_t rank>
auto convert_base(Eigen::TensorMap<Eigen::Tensor<double, rank>> map) {
  for (int i = 0; i < map.size(); ++i) {
    // 0-based indexing in C++ vs 1-based indexing in R
    map.data()[i] = map.data()[i] - 1.0f;
  }
}

template<std::size_t rank>
auto convert_base(Eigen::TensorMap<Eigen::Tensor<int, rank>> map) {
  for (int i = 0; i < map.size(); ++i) {
    // 0-based indexing in C++ vs 1-based indexing in R
    map.data()[i] = map.data()[i] - 1;
  }
}

template<leapfrog::HivAgeStratification S, typename real_type>
leapfrog::Parameters <real_type> setup_model_params(const Rcpp::List data,
                                                    const leapfrog::Options<real_type> &options,
                                                    const int &proj_years) {
  constexpr auto ss = leapfrog::StateSpace<S>();
  constexpr int num_genders = ss.num_genders;
  constexpr int age_groups_pop = ss.age_groups_pop;
  constexpr int age_groups_hiv = ss.age_groups_hiv;
  constexpr int disease_stages = ss.disease_stages;
  constexpr int treatment_stages = ss.treatment_stages;
  const int age_groups_fert = options.age_groups_fert;
  const int hiv_adult_first_age_group = options.hiv_adult_first_age_group;

  const leapfrog::TensorMap2<double> base_pop = parse_data<double>(data, "basepop", age_groups_pop, num_genders);
  const leapfrog::TensorMap3<double> survival = parse_data<double>(data, "Sx", age_groups_pop + 1, num_genders, proj_years);
  const leapfrog::TensorMap3<double> net_migration = parse_data<double>(data, "netmigr_adj", age_groups_pop, num_genders, proj_years);
  const leapfrog::TensorMap2<double> age_sex_fertility_ratio = parse_data<double>(data, "asfr", age_groups_fert, proj_years);
  const leapfrog::TensorMap2<double> births_sex_prop = parse_data<double>(data, "births_sex_prop", num_genders, proj_years);
  const leapfrog::TensorMap1<double> incidence_rate = parse_data<double>(data, "incidinput", proj_years);
  const leapfrog::TensorMap3<double> incidence_relative_risk_age = parse_data<double>(data, "incrr_age", age_groups_pop - hiv_adult_first_age_group, num_genders, proj_years);
  const leapfrog::TensorMap1<double> incidence_relative_risk_sex = parse_data<double>(data, "incrr_sex", proj_years);
  const leapfrog::TensorMap3<double> cd4_mortality = parse_data<double>(data, "cd4_mort", disease_stages, age_groups_hiv, num_genders);
  const leapfrog::TensorMap3<double> cd4_progression = parse_data<double>(data, "cd4_prog", disease_stages - 1, age_groups_hiv, num_genders);
  leapfrog::TensorMap1<int> artcd4elig_idx = parse_data<int>(data, "artcd4elig_idx", proj_years + 1);
  convert_base<1>(artcd4elig_idx);
  const leapfrog::TensorMap3<double> cd4_initdist = parse_data<double>(data, "cd4_initdist", disease_stages, age_groups_hiv, num_genders);
  const leapfrog::TensorMap4<double> art_mortality = parse_data<double>(data, "art_mort", treatment_stages, disease_stages, age_groups_hiv, num_genders);
  const leapfrog::TensorMap2<double> artmx_timerr = parse_data<double>(data, "artmx_timerr", treatment_stages, proj_years);
  const leapfrog::TensorMap1<double> art_dropout = parse_data<double>(data, "art_dropout", proj_years);
  const leapfrog::TensorMap2<double> art15plus_num = parse_data<double>(data, "art15plus_num", num_genders, proj_years);
  const leapfrog::TensorMap2<int> art15plus_isperc = parse_data<int>(data, "art15plus_isperc", num_genders, proj_years);
  leapfrog::Tensor1<double> h_art_stage_dur(treatment_stages - 1);
  h_art_stage_dur.setConstant(0.5);

  const leapfrog::Demography<double> demography = {
      base_pop,
      survival,
      net_migration,
      age_sex_fertility_ratio,
      births_sex_prop
  };

  const leapfrog::Incidence<double> incidence = {
      incidence_rate,
      incidence_relative_risk_age,
      incidence_relative_risk_sex
  };

  const leapfrog::NaturalHistory<double> natural_history = {
      cd4_mortality,
      cd4_progression,
      cd4_initdist
  };

  const leapfrog::Art<double> art = {
      artcd4elig_idx,
      art_mortality,
      artmx_timerr,
      h_art_stage_dur,
      art_dropout,
      art15plus_num,
      art15plus_isperc
  };

  const leapfrog::Parameters<double> params = {options,
                                               demography,
                                               incidence,
                                               natural_history,
                                               art};
  return params;
}
