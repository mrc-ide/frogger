// Generated by frogger: do not edit by hand
// This file is automatically generated. Do not edit this file. If you want to make changes
// edit `model_output.hpp.in` and run `./scripts/generate` to regenerate.

#pragma once

#include <Rcpp.h>
#include <unsupported/Eigen/CXX11/Tensor>

#include "state_saver.hpp"
#include "r_utils.hpp"

template<leapfrog::HivAgeStratification S, typename real_type>
Rcpp::List build_r_output(const typename leapfrog::StateSaver<S, real_type>::OutputState &state,
                          const std::vector<int> save_steps) {
  size_t output_years = save_steps.size();
  constexpr auto ss = leapfrog::StateSpace<S>();
  constexpr int NS = ss.NS;
  constexpr int pAG = ss.pAG;
  constexpr int hAG = ss.hAG;
  constexpr int hDS = ss.hDS;
  constexpr int hTS = ss.hTS;
  constexpr int hc1DS = ss.hc1DS;
  constexpr int hc2DS = ss.hc2DS;
  constexpr int hc1AG = ss.hc1AG;
  constexpr int hc2AG = ss.hc2AG;
  constexpr int hcTT = ss.hcTT;

  Rcpp::NumericVector r_p_total_pop(pAG * NS * output_years);
  Rcpp::NumericVector r_births(output_years);
  Rcpp::NumericVector r_p_total_pop_natural_deaths(pAG * NS * output_years);
  Rcpp::NumericVector r_p_hiv_pop(pAG * NS * output_years);
  Rcpp::NumericVector r_p_hiv_pop_natural_deaths(pAG * NS * output_years);
  Rcpp::NumericVector r_h_hiv_adult(hDS * hAG * NS * output_years);
  Rcpp::NumericVector r_h_art_adult(hTS * hDS * hAG * NS * output_years);
  Rcpp::NumericVector r_h_hiv_deaths_no_art(hDS * hAG * NS * output_years);
  Rcpp::NumericVector r_p_infections(pAG * NS * output_years);
  Rcpp::NumericVector r_h_hiv_deaths_art(hTS * hDS * hAG * NS * output_years);
  Rcpp::NumericVector r_h_art_initiation(hDS * hAG * NS * output_years);
  Rcpp::NumericVector r_p_hiv_deaths(pAG * NS * output_years);
  Rcpp::NumericVector r_hc1_hiv_pop(hc1DS * hcTT * hc1AG * NS * output_years);
  Rcpp::NumericVector r_hc2_hiv_pop(hc2DS * hcTT * hc2AG * NS * output_years);
  Rcpp::NumericVector r_hc1_art_pop(hTS * hc1DS * hc1AG * NS * output_years);
  Rcpp::NumericVector r_hc2_art_pop(hTS * hc2DS * hc2AG * NS * output_years);
  Rcpp::NumericVector r_hc1_noart_aids_deaths(hc1DS * hcTT * hc1AG * NS * output_years);
  Rcpp::NumericVector r_hc2_noart_aids_deaths(hc2DS * hcTT * hc2AG * NS * output_years);
  Rcpp::NumericVector r_hc1_art_aids_deaths(hTS * hc1DS * hc1AG * NS * output_years);
  Rcpp::NumericVector r_hc2_art_aids_deaths(hTS * hc2DS * hc2AG * NS * output_years);

  r_p_total_pop.attr("dim") = Rcpp::NumericVector::create(pAG, NS, output_years);
  r_births.attr("dim") = Rcpp::NumericVector::create(output_years);
  r_p_total_pop_natural_deaths.attr("dim") = Rcpp::NumericVector::create(pAG, NS, output_years);
  r_p_hiv_pop.attr("dim") = Rcpp::NumericVector::create(pAG, NS, output_years);
  r_p_hiv_pop_natural_deaths.attr("dim") = Rcpp::NumericVector::create(pAG, NS, output_years);
  r_h_hiv_adult.attr("dim") = Rcpp::NumericVector::create(hDS, hAG, NS, output_years);
  r_h_art_adult.attr("dim") = Rcpp::NumericVector::create(hTS, hDS, hAG, NS, output_years);
  r_h_hiv_deaths_no_art.attr("dim") = Rcpp::NumericVector::create(hDS, hAG, NS, output_years);
  r_p_infections.attr("dim") = Rcpp::NumericVector::create(pAG, NS, output_years);
  r_h_hiv_deaths_art.attr("dim") = Rcpp::NumericVector::create(hTS, hDS, hAG, NS, output_years);
  r_h_art_initiation.attr("dim") = Rcpp::NumericVector::create(hDS, hAG, NS, output_years);
  r_p_hiv_deaths.attr("dim") = Rcpp::NumericVector::create(pAG, NS, output_years);
  r_hc1_hiv_pop.attr("dim") = Rcpp::NumericVector::create(hc1DS, hcTT, hc1AG, NS, output_years);
  r_hc2_hiv_pop.attr("dim") = Rcpp::NumericVector::create(hc2DS, hcTT, hc2AG, NS, output_years);
  r_hc1_art_pop.attr("dim") = Rcpp::NumericVector::create(hTS, hc1DS, hc1AG, NS, output_years);
  r_hc2_art_pop.attr("dim") = Rcpp::NumericVector::create(hTS, hc2DS, hc2AG, NS, output_years);
  r_hc1_noart_aids_deaths.attr("dim") = Rcpp::NumericVector::create(hc1DS, hcTT, hc1AG, NS, output_years);
  r_hc2_noart_aids_deaths.attr("dim") = Rcpp::NumericVector::create(hc2DS, hcTT, hc2AG, NS, output_years);
  r_hc1_art_aids_deaths.attr("dim") = Rcpp::NumericVector::create(hTS, hc1DS, hc1AG, NS, output_years);
  r_hc2_art_aids_deaths.attr("dim") = Rcpp::NumericVector::create(hTS, hc2DS, hc2AG, NS, output_years);

  std::copy_n(state.p_total_pop.data(), state.p_total_pop.size(), REAL(r_p_total_pop));
  std::copy_n(state.births.data(), state.births.size(), REAL(r_births));
  std::copy_n(state.p_total_pop_natural_deaths.data(), state.p_total_pop_natural_deaths.size(), REAL(r_p_total_pop_natural_deaths));
  std::copy_n(state.p_hiv_pop.data(), state.p_hiv_pop.size(), REAL(r_p_hiv_pop));
  std::copy_n(state.p_hiv_pop_natural_deaths.data(), state.p_hiv_pop_natural_deaths.size(), REAL(r_p_hiv_pop_natural_deaths));
  std::copy_n(state.h_hiv_adult.data(), state.h_hiv_adult.size(), REAL(r_h_hiv_adult));
  std::copy_n(state.h_art_adult.data(), state.h_art_adult.size(), REAL(r_h_art_adult));
  std::copy_n(state.h_hiv_deaths_no_art.data(), state.h_hiv_deaths_no_art.size(), REAL(r_h_hiv_deaths_no_art));
  std::copy_n(state.p_infections.data(), state.p_infections.size(), REAL(r_p_infections));
  std::copy_n(state.h_hiv_deaths_art.data(), state.h_hiv_deaths_art.size(), REAL(r_h_hiv_deaths_art));
  std::copy_n(state.h_art_initiation.data(), state.h_art_initiation.size(), REAL(r_h_art_initiation));
  std::copy_n(state.p_hiv_deaths.data(), state.p_hiv_deaths.size(), REAL(r_p_hiv_deaths));
  std::copy_n(state.hc1_hiv_pop.data(), state.hc1_hiv_pop.size(), REAL(r_hc1_hiv_pop));
  std::copy_n(state.hc2_hiv_pop.data(), state.hc2_hiv_pop.size(), REAL(r_hc2_hiv_pop));
  std::copy_n(state.hc1_art_pop.data(), state.hc1_art_pop.size(), REAL(r_hc1_art_pop));
  std::copy_n(state.hc2_art_pop.data(), state.hc2_art_pop.size(), REAL(r_hc2_art_pop));
  std::copy_n(state.hc1_noart_aids_deaths.data(), state.hc1_noart_aids_deaths.size(), REAL(r_hc1_noart_aids_deaths));
  std::copy_n(state.hc2_noart_aids_deaths.data(), state.hc2_noart_aids_deaths.size(), REAL(r_hc2_noart_aids_deaths));
  std::copy_n(state.hc1_art_aids_deaths.data(), state.hc1_art_aids_deaths.size(), REAL(r_hc1_art_aids_deaths));
  std::copy_n(state.hc2_art_aids_deaths.data(), state.hc2_art_aids_deaths.size(), REAL(r_hc2_art_aids_deaths));

  List ret = ListBuilder()
    .add("p_total_pop", r_p_total_pop)
    .add("births", r_births)
    .add("p_total_pop_natural_deaths", r_p_total_pop_natural_deaths)
    .add("p_hiv_pop", r_p_hiv_pop)
    .add("p_hiv_pop_natural_deaths", r_p_hiv_pop_natural_deaths)
    .add("h_hiv_adult", r_h_hiv_adult)
    .add("h_art_adult", r_h_art_adult)
    .add("h_hiv_deaths_no_art", r_h_hiv_deaths_no_art)
    .add("p_infections", r_p_infections)
    .add("h_hiv_deaths_art", r_h_hiv_deaths_art)
    .add("h_art_initiation", r_h_art_initiation)
    .add("p_hiv_deaths", r_p_hiv_deaths)
    .add("hc1_hiv_pop", r_hc1_hiv_pop)
    .add("hc2_hiv_pop", r_hc2_hiv_pop)
    .add("hc1_art_pop", r_hc1_art_pop)
    .add("hc2_art_pop", r_hc2_art_pop)
    .add("hc1_noart_aids_deaths", r_hc1_noart_aids_deaths)
    .add("hc2_noart_aids_deaths", r_hc2_noart_aids_deaths)
    .add("hc1_art_aids_deaths", r_hc1_art_aids_deaths)
    .add("hc2_art_aids_deaths", r_hc2_art_aids_deaths);
  return ret;
}
