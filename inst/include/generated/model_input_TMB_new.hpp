// Generated by frogger: do not edit by hand
// This file is automatically generated. Do not edit this file. If you want to make changes
// edit `model_input_TMB_new.hpp.in` and run `./scripts/generate` to regenerate.

#pragma once

#include <unsupported/Eigen/CXX11/Tensor>

#include "../tmb_utils.hpp"

template<typename Type, typename ModelVariant>
struct TMBData {
  array<Type> base_pop;
  array<Type> survival_probability;
  array<Type> net_migration;
  array<Type> age_specific_fertility_rate;
  array<Type> births_sex_prop;
  array<Type> total_rate;
  array<Type> relative_risk_age;
  array<Type> relative_risk_sex;
  array<Type> cd4_mortality;
  array<Type> cd4_progression;
  array<int> idx_hm_elig;
  array<Type> cd4_initial_distribution;
  array<Type> mortality;
  array<Type> mortaility_time_rate_ratio;
  array<Type> dropout;
  array<Type> adults_on_art;
  array<int> adults_on_art_is_percent;
  int scale_cd4_mortality;
  Type initiation_mortality_weight;
  array<Type> hc_nosocomial;
  array<Type> hc1_cd4_dist;
  array<Type> hc_cd4_transition;
  array<Type> hc1_cd4_mort;
  array<Type> hc2_cd4_mort;
  array<Type> hc1_cd4_prog;
  array<Type> hc2_cd4_prog;
  Type ctx_effect;
  array<Type> ctx_val;
  array<int> hc_art_elig_age;
  array<Type> hc_art_elig_cd4;
  array<Type> hc_art_mort_rr;
  array<Type> hc1_art_mort;
  array<Type> hc2_art_mort;
  array<int> hc_art_isperc;
  array<Type> hc_art_val;
  array<Type> hc_art_init_dist;
  array<Type> adult_cd4_dist;
  array<Type> fert_mult_by_age;
  array<Type> fert_mult_off_art;
  array<Type> fert_mult_on_art;
  array<Type> total_fertility_rate;
  Type local_adj_factor;
  array<Type> PMTCT;
  array<Type> vertical_transmission_rate;
  array<Type> PMTCT_transmission_rate;
  array<Type> PMTCT_dropout;
  array<int> PMTCT_input_is_percent;
  array<Type> breastfeeding_duration_art;
  array<Type> breastfeeding_duration_no_art;
  array<Type> mat_hiv_births;
  array<int> mat_prev_input;
  array<Type> prop_lt200;
  array<Type> prop_gte350;
  array<Type> incrate;
  array<int> ctx_val_is_percent;
  array<int> hc_art_is_age_spec;
  array<int> hc_age_coarse;

  TMBData(SEXP data) {
    base_pop = tmbutils::asArray<Type>(getListElement(data, "basepop"));
    survival_probability = tmbutils::asArray<Type>(getListElement(data, "Sx"));
    net_migration = tmbutils::asArray<Type>(getListElement(data, "netmigr_adj"));
    age_specific_fertility_rate = tmbutils::asArray<Type>(getListElement(data, "asfr"));
    births_sex_prop = tmbutils::asArray<Type>(getListElement(data, "births_sex_prop"));
    total_rate = tmbutils::asArray<Type>(getListElement(data, "incidinput"));
    relative_risk_age = tmbutils::asArray<Type>(getListElement(data, "incrr_age"));
    relative_risk_sex = tmbutils::asArray<Type>(getListElement(data, "incrr_sex"));
    cd4_mortality = tmbutils::asArray<Type>(getListElement(data, "cd4_mort"));
    cd4_progression = tmbutils::asArray<Type>(getListElement(data, "cd4_prog"));
    idx_hm_elig = tmbutils::asArray<int>(getListElement(data, "artcd4elig_idx"));
    cd4_initial_distribution = tmbutils::asArray<Type>(getListElement(data, "cd4_initdist"));
    mortality = tmbutils::asArray<Type>(getListElement(data, "art_mort"));
    mortaility_time_rate_ratio = tmbutils::asArray<Type>(getListElement(data, "artmx_timerr"));
    dropout = tmbutils::asArray<Type>(getListElement(data, "art_dropout"));
    adults_on_art = tmbutils::asArray<Type>(getListElement(data, "art15plus_num"));
    adults_on_art_is_percent = tmbutils::asArray<int>(getListElement(data, "art15plus_isperc"));
    scale_cd4_mortality = CppAD::Integer(tmbutils::asVector<Type>(REAL(getListElement(data, "scale_cd4_mort")), 1)[0]);
    initiation_mortality_weight = tmbutils::asVector<Type>(REAL(getListElement(data, "art_alloc_mxweight")), 1)[0];
    if constexpr (ModelVariant::run_child_model) {
      hc_nosocomial = tmbutils::asArray<Type>(getListElement(data, "paed_incid_input"));
      hc1_cd4_dist = tmbutils::asArray<Type>(getListElement(data, "paed_cd4_dist"));
      hc_cd4_transition = tmbutils::asArray<Type>(getListElement(data, "paed_cd4_transition"));
      hc1_cd4_mort = tmbutils::asArray<Type>(getListElement(data, "paed_cd4_mort"));
      hc2_cd4_mort = tmbutils::asArray<Type>(getListElement(data, "adol_cd4_mort"));
      hc1_cd4_prog = tmbutils::asArray<Type>(getListElement(data, "paed_cd4_prog"));
      hc2_cd4_prog = tmbutils::asArray<Type>(getListElement(data, "adol_cd4_prog"));
      ctx_effect = tmbutils::asVector<Type>(REAL(getListElement(data, "ctx_effect")), 1)[0];
      ctx_val = tmbutils::asArray<Type>(getListElement(data, "ctx_val"));
      hc_art_elig_age = tmbutils::asArray<int>(getListElement(data, "paed_art_elig_age"));
      hc_art_elig_cd4 = tmbutils::asArray<Type>(getListElement(data, "paed_art_elig_cd4"));
      hc_art_mort_rr = tmbutils::asArray<Type>(getListElement(data, "mort_art_rr"));
      hc1_art_mort = tmbutils::asArray<Type>(getListElement(data, "paed_art_mort"));
      hc2_art_mort = tmbutils::asArray<Type>(getListElement(data, "adol_art_mort"));
      hc_art_isperc = tmbutils::asArray<int>(getListElement(data, "artpaeds_isperc"));
      hc_art_val = tmbutils::asArray<Type>(getListElement(data, "paed_art_val"));
      hc_art_init_dist = tmbutils::asArray<Type>(getListElement(data, "init_art_dist"));
      adult_cd4_dist = tmbutils::asArray<Type>(getListElement(data, "adult_cd4_dist"));
      fert_mult_by_age = tmbutils::asArray<Type>(getListElement(data, "fert_mult_by_age"));
      fert_mult_off_art = tmbutils::asArray<Type>(getListElement(data, "fert_mult_offart"));
      fert_mult_on_art = tmbutils::asArray<Type>(getListElement(data, "fert_mult_onart"));
      total_fertility_rate = tmbutils::asArray<Type>(getListElement(data, "tfr"));
      local_adj_factor = tmbutils::asVector<Type>(REAL(getListElement(data, "laf")), 1)[0];
      PMTCT = tmbutils::asArray<Type>(getListElement(data, "pmtct"));
      vertical_transmission_rate = tmbutils::asArray<Type>(getListElement(data, "mtct"));
      PMTCT_transmission_rate = tmbutils::asArray<Type>(getListElement(data, "pmtct_mtct"));
      PMTCT_dropout = tmbutils::asArray<Type>(getListElement(data, "pmtct_dropout"));
      PMTCT_input_is_percent = tmbutils::asArray<int>(getListElement(data, "pmtct_input_isperc"));
      breastfeeding_duration_art = tmbutils::asArray<Type>(getListElement(data, "bf_duration_art"));
      breastfeeding_duration_no_art = tmbutils::asArray<Type>(getListElement(data, "bf_duration_no_art"));
      mat_hiv_births = tmbutils::asArray<Type>(getListElement(data, "mat_hiv_births"));
      mat_prev_input = tmbutils::asArray<int>(getListElement(data, "mat_prev_input"));
      prop_lt200 = tmbutils::asArray<Type>(getListElement(data, "prop_lt200"));
      prop_gte350 = tmbutils::asArray<Type>(getListElement(data, "prop_gte350"));
      incrate = tmbutils::asArray<Type>(getListElement(data, "incrate"));
      ctx_val_is_percent = tmbutils::asArray<int>(getListElement(data, "ctx_val_ispercent"));
      hc_art_is_age_spec = tmbutils::asArray<int>(getListElement(data, "paed_art_age_spec"));
      hc_age_coarse = tmbutils::asArray<int>(getListElement(data, "hc_age_coarse"));
    }
  }
};

template<typename ModelVariant, typename Type>
leapfrog::Parameters<ModelVariant, Type> setup_tmb_params(
  const TMBData<Type, ModelVariant> &tmb_data,
  const leapfrog::Options<Type> &options,
  const int proj_years
) {
  constexpr auto ss = leapfrog::StateSpace<ModelVariant>();
  constexpr auto base = ss.base;

  if constexpr (ModelVariant::run_child_model) {
    constexpr auto children = ss.children;
    const Eigen::TensorMap<const Eigen::Tensor<Type, 2>> base_pop = Eigen::TensorMap<const Eigen::Tensor<Type, 2>>(tmb_data.base_pop.data(), static_cast<int>(base.pAG), static_cast<int>(base.NS));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 3>> survival_probability = Eigen::TensorMap<const Eigen::Tensor<Type, 3>>(tmb_data.survival_probability.data(), static_cast<int>(base.pAG + 1), static_cast<int>(base.NS), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 3>> net_migration = Eigen::TensorMap<const Eigen::Tensor<Type, 3>>(tmb_data.net_migration.data(), static_cast<int>(base.pAG), static_cast<int>(base.NS), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 2>> age_specific_fertility_rate = Eigen::TensorMap<const Eigen::Tensor<Type, 2>>(tmb_data.age_specific_fertility_rate.data(), static_cast<int>(options.p_fertility_age_groups), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 2>> births_sex_prop = Eigen::TensorMap<const Eigen::Tensor<Type, 2>>(tmb_data.births_sex_prop.data(), static_cast<int>(base.NS), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 1>> total_rate = Eigen::TensorMap<const Eigen::Tensor<Type, 1>>(tmb_data.total_rate.data(), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 3>> relative_risk_age = Eigen::TensorMap<const Eigen::Tensor<Type, 3>>(tmb_data.relative_risk_age.data(), static_cast<int>(base.pAG - options.p_idx_hiv_first_adult), static_cast<int>(base.NS), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 1>> relative_risk_sex = Eigen::TensorMap<const Eigen::Tensor<Type, 1>>(tmb_data.relative_risk_sex.data(), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 3>> cd4_mortality = Eigen::TensorMap<const Eigen::Tensor<Type, 3>>(tmb_data.cd4_mortality.data(), static_cast<int>(base.hDS), static_cast<int>(base.hAG), static_cast<int>(base.NS));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 3>> cd4_progression = Eigen::TensorMap<const Eigen::Tensor<Type, 3>>(tmb_data.cd4_progression.data(), static_cast<int>(base.hDS - 1), static_cast<int>(base.hAG), static_cast<int>(base.NS));
    const Eigen::Tensor<int, 1> idx_hm_elig = convert_0_based_tmb_new<int>(tmb_data.idx_hm_elig, static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 3>> cd4_initial_distribution = Eigen::TensorMap<const Eigen::Tensor<Type, 3>>(tmb_data.cd4_initial_distribution.data(), static_cast<int>(base.hDS), static_cast<int>(base.hAG), static_cast<int>(base.NS));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 4>> mortality = Eigen::TensorMap<const Eigen::Tensor<Type, 4>>(tmb_data.mortality.data(), static_cast<int>(base.hTS), static_cast<int>(base.hDS), static_cast<int>(base.hAG), static_cast<int>(base.NS));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 2>> mortaility_time_rate_ratio = Eigen::TensorMap<const Eigen::Tensor<Type, 2>>(tmb_data.mortaility_time_rate_ratio.data(), static_cast<int>(base.hTS), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 1>> dropout = Eigen::TensorMap<const Eigen::Tensor<Type, 1>>(tmb_data.dropout.data(), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 2>> adults_on_art = Eigen::TensorMap<const Eigen::Tensor<Type, 2>>(tmb_data.adults_on_art.data(), static_cast<int>(base.NS), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<int, 2>> adults_on_art_is_percent = Eigen::TensorMap<const Eigen::Tensor<int, 2>>(tmb_data.adults_on_art_is_percent.data(), static_cast<int>(base.NS), static_cast<int>(proj_years));
    Eigen::Tensor<Type, 1> h_art_stage_dur(static_cast<int>(base.hTS - 1));
    h_art_stage_dur.setConstant(0.5);
    const int scale_cd4_mortality = tmb_data.scale_cd4_mortality;
    const Type initiation_mortality_weight = tmb_data.initiation_mortality_weight;
    const Eigen::TensorMap<const Eigen::Tensor<Type, 1>> hc_nosocomial = Eigen::TensorMap<const Eigen::Tensor<Type, 1>>(tmb_data.hc_nosocomial.data(), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 1>> hc1_cd4_dist = Eigen::TensorMap<const Eigen::Tensor<Type, 1>>(tmb_data.hc1_cd4_dist.data(), static_cast<int>(children.hc2DS));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 2>> hc_cd4_transition = Eigen::TensorMap<const Eigen::Tensor<Type, 2>>(tmb_data.hc_cd4_transition.data(), static_cast<int>(children.hc2DS), static_cast<int>(children.hc1DS));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 3>> hc1_cd4_mort = Eigen::TensorMap<const Eigen::Tensor<Type, 3>>(tmb_data.hc1_cd4_mort.data(), static_cast<int>(children.hc1DS), static_cast<int>(children.hcTT), static_cast<int>(children.hc1AG));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 3>> hc2_cd4_mort = Eigen::TensorMap<const Eigen::Tensor<Type, 3>>(tmb_data.hc2_cd4_mort.data(), static_cast<int>(children.hc2DS), static_cast<int>(children.hcTT), static_cast<int>(children.hc2AG));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 1>> hc1_cd4_prog = Eigen::TensorMap<const Eigen::Tensor<Type, 1>>(tmb_data.hc1_cd4_prog.data(), static_cast<int>(children.hc1DS));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 1>> hc2_cd4_prog = Eigen::TensorMap<const Eigen::Tensor<Type, 1>>(tmb_data.hc2_cd4_prog.data(), static_cast<int>(children.hc2DS));
    const Type ctx_effect = tmb_data.ctx_effect;
    const Eigen::TensorMap<const Eigen::Tensor<Type, 1>> ctx_val = Eigen::TensorMap<const Eigen::Tensor<Type, 1>>(tmb_data.ctx_val.data(), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<int, 1>> hc_art_elig_age = Eigen::TensorMap<const Eigen::Tensor<int, 1>>(tmb_data.hc_art_elig_age.data(), static_cast<int>(proj_years));
    const Eigen::Tensor<Type, 2> hc_art_elig_cd4 = convert_0_based_tmb_new<Type>(tmb_data.hc_art_elig_cd4, static_cast<int>(options.p_idx_hiv_first_adult), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 3>> hc_art_mort_rr = Eigen::TensorMap<const Eigen::Tensor<Type, 3>>(tmb_data.hc_art_mort_rr.data(), static_cast<int>(base.hTS), static_cast<int>(options.p_idx_hiv_first_adult), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 3>> hc1_art_mort = Eigen::TensorMap<const Eigen::Tensor<Type, 3>>(tmb_data.hc1_art_mort.data(), static_cast<int>(children.hc1DS), static_cast<int>(base.hTS), static_cast<int>(children.hc1AG));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 3>> hc2_art_mort = Eigen::TensorMap<const Eigen::Tensor<Type, 3>>(tmb_data.hc2_art_mort.data(), static_cast<int>(children.hc2DS), static_cast<int>(base.hTS), static_cast<int>(children.hc2AG));
    const Eigen::TensorMap<const Eigen::Tensor<int, 1>> hc_art_isperc = Eigen::TensorMap<const Eigen::Tensor<int, 1>>(tmb_data.hc_art_isperc.data(), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 2>> hc_art_val = Eigen::TensorMap<const Eigen::Tensor<Type, 2>>(tmb_data.hc_art_val.data(), static_cast<int>(4), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 2>> hc_art_init_dist = Eigen::TensorMap<const Eigen::Tensor<Type, 2>>(tmb_data.hc_art_init_dist.data(), static_cast<int>(options.p_idx_hiv_first_adult), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 2>> adult_cd4_dist = Eigen::TensorMap<const Eigen::Tensor<Type, 2>>(tmb_data.adult_cd4_dist.data(), static_cast<int>(base.hDS), static_cast<int>(children.hc2DS));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 1>> fert_mult_by_age = Eigen::TensorMap<const Eigen::Tensor<Type, 1>>(tmb_data.fert_mult_by_age.data(), static_cast<int>(options.p_fertility_age_groups));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 1>> fert_mult_off_art = Eigen::TensorMap<const Eigen::Tensor<Type, 1>>(tmb_data.fert_mult_off_art.data(), static_cast<int>(base.hDS));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 1>> fert_mult_on_art = Eigen::TensorMap<const Eigen::Tensor<Type, 1>>(tmb_data.fert_mult_on_art.data(), static_cast<int>(options.p_fertility_age_groups));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 1>> total_fertility_rate = Eigen::TensorMap<const Eigen::Tensor<Type, 1>>(tmb_data.total_fertility_rate.data(), static_cast<int>(proj_years));
    const Type local_adj_factor = tmb_data.local_adj_factor;
    const Eigen::TensorMap<const Eigen::Tensor<Type, 2>> PMTCT = Eigen::TensorMap<const Eigen::Tensor<Type, 2>>(tmb_data.PMTCT.data(), static_cast<int>(children.hPS), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 2>> vertical_transmission_rate = Eigen::TensorMap<const Eigen::Tensor<Type, 2>>(tmb_data.vertical_transmission_rate.data(), static_cast<int>(8), static_cast<int>(2));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 3>> PMTCT_transmission_rate = Eigen::TensorMap<const Eigen::Tensor<Type, 3>>(tmb_data.PMTCT_transmission_rate.data(), static_cast<int>(base.hDS), static_cast<int>(7), static_cast<int>(2));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 2>> PMTCT_dropout = Eigen::TensorMap<const Eigen::Tensor<Type, 2>>(tmb_data.PMTCT_dropout.data(), static_cast<int>(6), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<int, 1>> PMTCT_input_is_percent = Eigen::TensorMap<const Eigen::Tensor<int, 1>>(tmb_data.PMTCT_input_is_percent.data(), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 2>> breastfeeding_duration_art = Eigen::TensorMap<const Eigen::Tensor<Type, 2>>(tmb_data.breastfeeding_duration_art.data(), static_cast<int>(children.hBF), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 2>> breastfeeding_duration_no_art = Eigen::TensorMap<const Eigen::Tensor<Type, 2>>(tmb_data.breastfeeding_duration_no_art.data(), static_cast<int>(children.hBF), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 1>> mat_hiv_births = Eigen::TensorMap<const Eigen::Tensor<Type, 1>>(tmb_data.mat_hiv_births.data(), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<int, 1>> mat_prev_input = Eigen::TensorMap<const Eigen::Tensor<int, 1>>(tmb_data.mat_prev_input.data(), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 1>> prop_lt200 = Eigen::TensorMap<const Eigen::Tensor<Type, 1>>(tmb_data.prop_lt200.data(), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 1>> prop_gte350 = Eigen::TensorMap<const Eigen::Tensor<Type, 1>>(tmb_data.prop_gte350.data(), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 1>> incrate = Eigen::TensorMap<const Eigen::Tensor<Type, 1>>(tmb_data.incrate.data(), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<int, 1>> ctx_val_is_percent = Eigen::TensorMap<const Eigen::Tensor<int, 1>>(tmb_data.ctx_val_is_percent.data(), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<int, 1>> hc_art_is_age_spec = Eigen::TensorMap<const Eigen::Tensor<int, 1>>(tmb_data.hc_art_is_age_spec.data(), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<int, 1>> hc_age_coarse = Eigen::TensorMap<const Eigen::Tensor<int, 1>>(tmb_data.hc_age_coarse.data(), static_cast<int>(15));
    const leapfrog::Demography<Type> demography_params = {
      base_pop,
      survival_probability,
      net_migration,
      age_specific_fertility_rate,
      births_sex_prop,
    };
    const leapfrog::Incidence<Type> incidence_params = {
      total_rate,
      relative_risk_age,
      relative_risk_sex,
    };
    const leapfrog::NaturalHistory<Type> natural_history_params = {
      cd4_mortality,
      cd4_progression,
      cd4_initial_distribution,
      scale_cd4_mortality,
    };
    const leapfrog::Art<Type> art_params = {
      idx_hm_elig,
      mortality,
      mortaility_time_rate_ratio,
      dropout,
      adults_on_art,
      adults_on_art_is_percent,
      h_art_stage_dur,
      initiation_mortality_weight,
    };
    const leapfrog::Children<Type> children_params = {
      hc_nosocomial,
      hc1_cd4_dist,
      hc_cd4_transition,
      hc1_cd4_mort,
      hc2_cd4_mort,
      hc1_cd4_prog,
      hc2_cd4_prog,
      ctx_effect,
      ctx_val,
      hc_art_elig_age,
      hc_art_elig_cd4,
      hc_art_mort_rr,
      hc1_art_mort,
      hc2_art_mort,
      hc_art_isperc,
      hc_art_val,
      hc_art_init_dist,
      adult_cd4_dist,
      fert_mult_by_age,
      fert_mult_off_art,
      fert_mult_on_art,
      total_fertility_rate,
      local_adj_factor,
      PMTCT,
      vertical_transmission_rate,
      PMTCT_transmission_rate,
      PMTCT_dropout,
      PMTCT_input_is_percent,
      breastfeeding_duration_art,
      breastfeeding_duration_no_art,
      mat_hiv_births,
      mat_prev_input,
      prop_lt200,
      prop_gte350,
      incrate,
      ctx_val_is_percent,
      hc_art_is_age_spec,
      hc_age_coarse,
    };
    const leapfrog::BaseModelParameters<Type> base_model_params = {
      options,
      demography_params,
      incidence_params,
      natural_history_params,
      art_params
    };
    const leapfrog::ChildModelParameters<ModelVariant, Type> child_model_params = {
      children_params
    };
    return leapfrog::Parameters<ModelVariant, Type> {
      base_model_params,
      child_model_params
    };
  } else {
    const Eigen::TensorMap<const Eigen::Tensor<Type, 2>> base_pop = Eigen::TensorMap<const Eigen::Tensor<Type, 2>>(tmb_data.base_pop.data(), static_cast<int>(base.pAG), static_cast<int>(base.NS));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 3>> survival_probability = Eigen::TensorMap<const Eigen::Tensor<Type, 3>>(tmb_data.survival_probability.data(), static_cast<int>(base.pAG + 1), static_cast<int>(base.NS), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 3>> net_migration = Eigen::TensorMap<const Eigen::Tensor<Type, 3>>(tmb_data.net_migration.data(), static_cast<int>(base.pAG), static_cast<int>(base.NS), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 2>> age_specific_fertility_rate = Eigen::TensorMap<const Eigen::Tensor<Type, 2>>(tmb_data.age_specific_fertility_rate.data(), static_cast<int>(options.p_fertility_age_groups), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 2>> births_sex_prop = Eigen::TensorMap<const Eigen::Tensor<Type, 2>>(tmb_data.births_sex_prop.data(), static_cast<int>(base.NS), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 1>> total_rate = Eigen::TensorMap<const Eigen::Tensor<Type, 1>>(tmb_data.total_rate.data(), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 3>> relative_risk_age = Eigen::TensorMap<const Eigen::Tensor<Type, 3>>(tmb_data.relative_risk_age.data(), static_cast<int>(base.pAG - options.p_idx_hiv_first_adult), static_cast<int>(base.NS), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 1>> relative_risk_sex = Eigen::TensorMap<const Eigen::Tensor<Type, 1>>(tmb_data.relative_risk_sex.data(), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 3>> cd4_mortality = Eigen::TensorMap<const Eigen::Tensor<Type, 3>>(tmb_data.cd4_mortality.data(), static_cast<int>(base.hDS), static_cast<int>(base.hAG), static_cast<int>(base.NS));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 3>> cd4_progression = Eigen::TensorMap<const Eigen::Tensor<Type, 3>>(tmb_data.cd4_progression.data(), static_cast<int>(base.hDS - 1), static_cast<int>(base.hAG), static_cast<int>(base.NS));
    const Eigen::Tensor<int, 1> idx_hm_elig = convert_0_based_tmb_new<int>(tmb_data.idx_hm_elig, static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 3>> cd4_initial_distribution = Eigen::TensorMap<const Eigen::Tensor<Type, 3>>(tmb_data.cd4_initial_distribution.data(), static_cast<int>(base.hDS), static_cast<int>(base.hAG), static_cast<int>(base.NS));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 4>> mortality = Eigen::TensorMap<const Eigen::Tensor<Type, 4>>(tmb_data.mortality.data(), static_cast<int>(base.hTS), static_cast<int>(base.hDS), static_cast<int>(base.hAG), static_cast<int>(base.NS));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 2>> mortaility_time_rate_ratio = Eigen::TensorMap<const Eigen::Tensor<Type, 2>>(tmb_data.mortaility_time_rate_ratio.data(), static_cast<int>(base.hTS), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 1>> dropout = Eigen::TensorMap<const Eigen::Tensor<Type, 1>>(tmb_data.dropout.data(), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<Type, 2>> adults_on_art = Eigen::TensorMap<const Eigen::Tensor<Type, 2>>(tmb_data.adults_on_art.data(), static_cast<int>(base.NS), static_cast<int>(proj_years));
    const Eigen::TensorMap<const Eigen::Tensor<int, 2>> adults_on_art_is_percent = Eigen::TensorMap<const Eigen::Tensor<int, 2>>(tmb_data.adults_on_art_is_percent.data(), static_cast<int>(base.NS), static_cast<int>(proj_years));
    Eigen::Tensor<Type, 1> h_art_stage_dur(static_cast<int>(base.hTS - 1));
    h_art_stage_dur.setConstant(0.5);
    const int scale_cd4_mortality = tmb_data.scale_cd4_mortality;
    const Type initiation_mortality_weight = tmb_data.initiation_mortality_weight;
    const leapfrog::Demography<Type> demography_params = {
      base_pop,
      survival_probability,
      net_migration,
      age_specific_fertility_rate,
      births_sex_prop,
    };
    const leapfrog::Incidence<Type> incidence_params = {
      total_rate,
      relative_risk_age,
      relative_risk_sex,
    };
    const leapfrog::NaturalHistory<Type> natural_history_params = {
      cd4_mortality,
      cd4_progression,
      cd4_initial_distribution,
      scale_cd4_mortality,
    };
    const leapfrog::Art<Type> art_params = {
      idx_hm_elig,
      mortality,
      mortaility_time_rate_ratio,
      dropout,
      adults_on_art,
      adults_on_art_is_percent,
      h_art_stage_dur,
      initiation_mortality_weight,
    };
    const leapfrog::BaseModelParameters<Type> base_model_params = {
      options,
      demography_params,
      incidence_params,
      natural_history_params,
      art_params
    };
    return leapfrog::Parameters<ModelVariant, Type> {
      base_model_params
    };
  }
}
