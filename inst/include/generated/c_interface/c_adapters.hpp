// Generated by leapfrog cpp_generation: do not edit by hand
// This file is automatically generated. Do not edit this file. If you want to make changes
// edit leapfrog json files in `cpp_generation/modelSchemas` and run `uv run ./src/main.py` inside
// the `cpp_generation` folder.

#pragma once

#include <filesystem>
#include <string_view>
#include <format>
#include <unsupported/Eigen/CXX11/Tensor>
#include <stdexcept>

#include "../config_mixer.hpp"
#include "c_types.hpp"

namespace leapfrog {
namespace internal {

template<typename T, typename... Args>
auto read_data(T* data, int length, std::string_view name, Args... dims) {
  constexpr std::size_t rank = sizeof...(dims);
  if constexpr (rank == 0) {
    return *data;
  } else {
    const auto size = (dims * ...);
    if (length != size) {
        throw std::invalid_argument(std::format("Input data '{}' is the wrong size. Received array of length '{}', expected '{}'.", name, length, size));
    }
    return Eigen::TensorMap<Eigen::Tensor<T, rank>>(data, dims...);
  }
}

template<typename T, int Rank>
void write_data(const Eigen::Tensor<T, Rank>& tensor, T* output, int length, std::string_view name) {
  const auto* dataPtr = tensor.data();
  std::size_t totalSize = tensor.size();

  if (length != totalSize) {
    throw std::invalid_argument(std::format("Output data '{}' is the wrong size. Received array of length '{}', expected '{}'.", name, length, totalSize));
  }

  std::copy(dataPtr, dataPtr + totalSize, output);
}

template<typename real_type, MV ModelVariant>
struct DpAdapter<Language::C, real_type, ModelVariant> {
  using SS = SSMixed<ModelVariant>;
  using Config = DpConfig<real_type, ModelVariant>;

  static Config::Pars get_pars(
    const CParams<real_type> &params,
    const Options<real_type> &opts
  ) {
    return {
      .base_pop = read_data<real_type>(params.dp->base_pop, params.dp->base_pop_length, "base_pop", SS::pAG, SS::NS),
      .survival_probability = read_data<real_type>(params.dp->survival_probability, params.dp->survival_probability_length, "survival_probability", SS::pAG + 1, SS::NS, opts.proj_time_steps),
      .net_migration = read_data<real_type>(params.dp->net_migration, params.dp->net_migration_length, "net_migration", SS::pAG, SS::NS, opts.proj_time_steps),
      .age_specific_fertility_rate = read_data<real_type>(params.dp->age_specific_fertility_rate, params.dp->age_specific_fertility_rate_length, "age_specific_fertility_rate", SS::p_fertility_age_groups, opts.proj_time_steps),
      .births_sex_prop = read_data<real_type>(params.dp->births_sex_prop, params.dp->births_sex_prop_length, "births_sex_prop", SS::NS, opts.proj_time_steps)
    };
  };

  static Config::State get_initial_state(
    const CState<real_type>& state
  ){
    return {
      .p_total_pop = read_data<real_type>(state.dp->p_total_pop, state.dp->p_total_pop_length, "p_total_pop", SS::pAG, SS::NS),
      .p_total_pop_background_deaths = read_data<real_type>(state.dp->p_total_pop_background_deaths, state.dp->p_total_pop_background_deaths_length, "p_total_pop_background_deaths", SS::pAG, SS::NS),
      .births = *(state.dp->births)
    };
  };

  static constexpr int output_count = 3;

  static int build_output(
    int index,
    const Config::OutputState& state,
    CState<real_type>& out
  ) {
    write_data<real_type, 3>(state.p_total_pop, out.dp->p_total_pop, out.dp->p_total_pop_length, "p_total_pop");
    write_data<real_type, 3>(state.p_total_pop_background_deaths, out.dp->p_total_pop_background_deaths, out.dp->p_total_pop_background_deaths_length, "p_total_pop_background_deaths");
    write_data<real_type, 1>(state.births, out.dp->births, out.dp->births_length, "births");
    return index + output_count;
  };

  static int build_output_single_year(
    int index,
    const Config::State& state,
    CState<real_type>& out
  ) {
    write_data<real_type, 2>(state.p_total_pop, out.dp->p_total_pop, out.dp->p_total_pop_length, "p_total_pop");
    write_data<real_type, 2>(state.p_total_pop_background_deaths, out.dp->p_total_pop_background_deaths, out.dp->p_total_pop_background_deaths_length, "p_total_pop_background_deaths");
    *(out.dp->births) = state.births;
    return index + output_count;
  };
};

template<typename real_type, MV ModelVariant>
struct HaAdapter<Language::C, real_type, ModelVariant> {
  using SS = SSMixed<ModelVariant>;
  using Config = HaConfig<real_type, ModelVariant>;

  static Config::Pars get_pars(
    const CParams<real_type> &params,
    const Options<real_type> &opts
  ) {
    return {
      .total_rate = read_data<real_type>(params.ha->total_rate, params.ha->total_rate_length, "total_rate", opts.proj_time_steps),
      .relative_risk_age = read_data<real_type>(params.ha->relative_risk_age, params.ha->relative_risk_age_length, "relative_risk_age", SS::pAG - SS::p_idx_hiv_first_adult, SS::NS, opts.proj_time_steps),
      .relative_risk_sex = read_data<real_type>(params.ha->relative_risk_sex, params.ha->relative_risk_sex_length, "relative_risk_sex", opts.proj_time_steps),
      .cd4_mortality = read_data<real_type>(params.ha->cd4_mortality, params.ha->cd4_mortality_length, "cd4_mortality", SS::hDS, SS::hAG, SS::NS),
      .cd4_progression = read_data<real_type>(params.ha->cd4_progression, params.ha->cd4_progression_length, "cd4_progression", SS::hDS - 1, SS::hAG, SS::NS),
      .cd4_initial_distribution = read_data<real_type>(params.ha->cd4_initial_distribution, params.ha->cd4_initial_distribution_length, "cd4_initial_distribution", SS::hDS, SS::hAG, SS::NS),
      .scale_cd4_mortality = params.ha->scale_cd4_mortality,
      .idx_hm_elig = read_data<int>(params.ha->idx_hm_elig, params.ha->idx_hm_elig_length, "idx_hm_elig", opts.proj_time_steps),
      .mortality = read_data<real_type>(params.ha->mortality, params.ha->mortality_length, "mortality", SS::hTS, SS::hDS, SS::hAG, SS::NS),
      .mortality_time_rate_ratio = read_data<real_type>(params.ha->mortality_time_rate_ratio, params.ha->mortality_time_rate_ratio_length, "mortality_time_rate_ratio", SS::hTS, opts.proj_time_steps),
      .dropout_recover_cd4 = params.ha->dropout_recover_cd4,
      .dropout_rate = read_data<real_type>(params.ha->dropout_rate, params.ha->dropout_rate_length, "dropout_rate", opts.proj_time_steps),
      .adults_on_art = read_data<real_type>(params.ha->adults_on_art, params.ha->adults_on_art_length, "adults_on_art", SS::NS, opts.proj_time_steps),
      .adults_on_art_is_percent = read_data<int>(params.ha->adults_on_art_is_percent, params.ha->adults_on_art_is_percent_length, "adults_on_art_is_percent", SS::NS, opts.proj_time_steps),
      .initiation_mortality_weight = params.ha->initiation_mortality_weight,
      .h_art_stage_dur = read_data<real_type>(params.ha->h_art_stage_dur, params.ha->h_art_stage_dur_length, "h_art_stage_dur", SS::hTS - 1)
    };
  };

  static Config::State get_initial_state(
    const CState<real_type>& state
  ){
    return {
      .p_hiv_pop = read_data<real_type>(state.ha->p_hiv_pop, state.ha->p_hiv_pop_length, "p_hiv_pop", SS::pAG, SS::NS),
      .p_hiv_pop_background_deaths = read_data<real_type>(state.ha->p_hiv_pop_background_deaths, state.ha->p_hiv_pop_background_deaths_length, "p_hiv_pop_background_deaths", SS::pAG, SS::NS),
      .h_hiv_adult = read_data<real_type>(state.ha->h_hiv_adult, state.ha->h_hiv_adult_length, "h_hiv_adult", SS::hDS, SS::hAG, SS::NS),
      .h_art_adult = read_data<real_type>(state.ha->h_art_adult, state.ha->h_art_adult_length, "h_art_adult", SS::hTS, SS::hDS, SS::hAG, SS::NS),
      .h_hiv_deaths_no_art = read_data<real_type>(state.ha->h_hiv_deaths_no_art, state.ha->h_hiv_deaths_no_art_length, "h_hiv_deaths_no_art", SS::hDS, SS::hAG, SS::NS),
      .p_infections = read_data<real_type>(state.ha->p_infections, state.ha->p_infections_length, "p_infections", SS::pAG, SS::NS),
      .h_hiv_deaths_art = read_data<real_type>(state.ha->h_hiv_deaths_art, state.ha->h_hiv_deaths_art_length, "h_hiv_deaths_art", SS::hTS, SS::hDS, SS::hAG, SS::NS),
      .h_art_initiation = read_data<real_type>(state.ha->h_art_initiation, state.ha->h_art_initiation_length, "h_art_initiation", SS::hDS, SS::hAG, SS::NS),
      .p_hiv_deaths = read_data<real_type>(state.ha->p_hiv_deaths, state.ha->p_hiv_deaths_length, "p_hiv_deaths", SS::pAG, SS::NS)
    };
  };

  static constexpr int output_count = 9;

  static int build_output(
    int index,
    const Config::OutputState& state,
    CState<real_type>& out
  ) {
    write_data<real_type, 3>(state.p_hiv_pop, out.ha->p_hiv_pop, out.ha->p_hiv_pop_length, "p_hiv_pop");
    write_data<real_type, 3>(state.p_hiv_pop_background_deaths, out.ha->p_hiv_pop_background_deaths, out.ha->p_hiv_pop_background_deaths_length, "p_hiv_pop_background_deaths");
    write_data<real_type, 4>(state.h_hiv_adult, out.ha->h_hiv_adult, out.ha->h_hiv_adult_length, "h_hiv_adult");
    write_data<real_type, 5>(state.h_art_adult, out.ha->h_art_adult, out.ha->h_art_adult_length, "h_art_adult");
    write_data<real_type, 4>(state.h_hiv_deaths_no_art, out.ha->h_hiv_deaths_no_art, out.ha->h_hiv_deaths_no_art_length, "h_hiv_deaths_no_art");
    write_data<real_type, 3>(state.p_infections, out.ha->p_infections, out.ha->p_infections_length, "p_infections");
    write_data<real_type, 5>(state.h_hiv_deaths_art, out.ha->h_hiv_deaths_art, out.ha->h_hiv_deaths_art_length, "h_hiv_deaths_art");
    write_data<real_type, 4>(state.h_art_initiation, out.ha->h_art_initiation, out.ha->h_art_initiation_length, "h_art_initiation");
    write_data<real_type, 3>(state.p_hiv_deaths, out.ha->p_hiv_deaths, out.ha->p_hiv_deaths_length, "p_hiv_deaths");
    return index + output_count;
  };

  static int build_output_single_year(
    int index,
    const Config::State& state,
    CState<real_type>& out
  ) {
    write_data<real_type, 2>(state.p_hiv_pop, out.ha->p_hiv_pop, out.ha->p_hiv_pop_length, "p_hiv_pop");
    write_data<real_type, 2>(state.p_hiv_pop_background_deaths, out.ha->p_hiv_pop_background_deaths, out.ha->p_hiv_pop_background_deaths_length, "p_hiv_pop_background_deaths");
    write_data<real_type, 3>(state.h_hiv_adult, out.ha->h_hiv_adult, out.ha->h_hiv_adult_length, "h_hiv_adult");
    write_data<real_type, 4>(state.h_art_adult, out.ha->h_art_adult, out.ha->h_art_adult_length, "h_art_adult");
    write_data<real_type, 3>(state.h_hiv_deaths_no_art, out.ha->h_hiv_deaths_no_art, out.ha->h_hiv_deaths_no_art_length, "h_hiv_deaths_no_art");
    write_data<real_type, 2>(state.p_infections, out.ha->p_infections, out.ha->p_infections_length, "p_infections");
    write_data<real_type, 4>(state.h_hiv_deaths_art, out.ha->h_hiv_deaths_art, out.ha->h_hiv_deaths_art_length, "h_hiv_deaths_art");
    write_data<real_type, 3>(state.h_art_initiation, out.ha->h_art_initiation, out.ha->h_art_initiation_length, "h_art_initiation");
    write_data<real_type, 2>(state.p_hiv_deaths, out.ha->p_hiv_deaths, out.ha->p_hiv_deaths_length, "p_hiv_deaths");
    return index + output_count;
  };
};

template<typename real_type, MV ModelVariant>
struct HcAdapter<Language::C, real_type, ModelVariant> {
  using SS = SSMixed<ModelVariant>;
  using Config = HcConfig<real_type, ModelVariant>;

  static Config::Pars get_pars(
    const CParams<real_type> &params,
    const Options<real_type> &opts
  ) {
    return {
      .hc_nosocomial = read_data<real_type>(params.hc->hc_nosocomial, params.hc->hc_nosocomial_length, "hc_nosocomial", opts.proj_time_steps),
      .hc1_cd4_dist = read_data<real_type>(params.hc->hc1_cd4_dist, params.hc->hc1_cd4_dist_length, "hc1_cd4_dist", SS::hc2DS),
      .hc_cd4_transition = read_data<real_type>(params.hc->hc_cd4_transition, params.hc->hc_cd4_transition_length, "hc_cd4_transition", SS::hc2DS, SS::hc1DS),
      .hc1_cd4_mort = read_data<real_type>(params.hc->hc1_cd4_mort, params.hc->hc1_cd4_mort_length, "hc1_cd4_mort", SS::hc1DS, SS::hcTT, SS::hc1AG),
      .hc2_cd4_mort = read_data<real_type>(params.hc->hc2_cd4_mort, params.hc->hc2_cd4_mort_length, "hc2_cd4_mort", SS::hc2DS, SS::hcTT, SS::hc2AG),
      .hc1_cd4_prog = read_data<real_type>(params.hc->hc1_cd4_prog, params.hc->hc1_cd4_prog_length, "hc1_cd4_prog", SS::hc1DS, SS::hc1AG_c, SS::NS),
      .hc2_cd4_prog = read_data<real_type>(params.hc->hc2_cd4_prog, params.hc->hc2_cd4_prog_length, "hc2_cd4_prog", SS::hc2DS, SS::hc2AG_c, SS::NS),
      .ctx_val = read_data<real_type>(params.hc->ctx_val, params.hc->ctx_val_length, "ctx_val", opts.proj_time_steps),
      .hc_art_elig_age = read_data<int>(params.hc->hc_art_elig_age, params.hc->hc_art_elig_age_length, "hc_art_elig_age", opts.proj_time_steps),
      .hc_art_elig_cd4 = read_data<real_type>(params.hc->hc_art_elig_cd4, params.hc->hc_art_elig_cd4_length, "hc_art_elig_cd4", SS::p_idx_hiv_first_adult, opts.proj_time_steps),
      .hc_art_mort_rr = read_data<real_type>(params.hc->hc_art_mort_rr, params.hc->hc_art_mort_rr_length, "hc_art_mort_rr", SS::hTS, SS::p_idx_hiv_first_adult, opts.proj_time_steps),
      .hc1_art_mort = read_data<real_type>(params.hc->hc1_art_mort, params.hc->hc1_art_mort_length, "hc1_art_mort", SS::hc1DS, SS::hTS, SS::hc1AG),
      .hc2_art_mort = read_data<real_type>(params.hc->hc2_art_mort, params.hc->hc2_art_mort_length, "hc2_art_mort", SS::hc2DS, SS::hTS, SS::hc2AG),
      .hc_art_isperc = read_data<int>(params.hc->hc_art_isperc, params.hc->hc_art_isperc_length, "hc_art_isperc", opts.proj_time_steps),
      .hc_art_val = read_data<real_type>(params.hc->hc_art_val, params.hc->hc_art_val_length, "hc_art_val", SS::hcAG_coarse, opts.proj_time_steps),
      .hc_art_init_dist = read_data<real_type>(params.hc->hc_art_init_dist, params.hc->hc_art_init_dist_length, "hc_art_init_dist", SS::p_idx_hiv_first_adult, opts.proj_time_steps),
      .adult_cd4_dist = read_data<real_type>(params.hc->adult_cd4_dist, params.hc->adult_cd4_dist_length, "adult_cd4_dist", SS::hDS, SS::hc2DS),
      .fert_mult_by_age = read_data<real_type>(params.hc->fert_mult_by_age, params.hc->fert_mult_by_age_length, "fert_mult_by_age", SS::p_fertility_age_groups),
      .fert_mult_off_art = read_data<real_type>(params.hc->fert_mult_off_art, params.hc->fert_mult_off_art_length, "fert_mult_off_art", SS::hDS),
      .fert_mult_on_art = read_data<real_type>(params.hc->fert_mult_on_art, params.hc->fert_mult_on_art_length, "fert_mult_on_art", SS::p_fertility_age_groups),
      .total_fertility_rate = read_data<real_type>(params.hc->total_fertility_rate, params.hc->total_fertility_rate_length, "total_fertility_rate", opts.proj_time_steps),
      .PMTCT = read_data<real_type>(params.hc->PMTCT, params.hc->PMTCT_length, "PMTCT", SS::hPS, opts.proj_time_steps),
      .vertical_transmission_rate = read_data<real_type>(params.hc->vertical_transmission_rate, params.hc->vertical_transmission_rate_length, "vertical_transmission_rate", SS::hDS + 1, SS::hVT),
      .PMTCT_transmission_rate = read_data<real_type>(params.hc->PMTCT_transmission_rate, params.hc->PMTCT_transmission_rate_length, "PMTCT_transmission_rate", SS::hDS, SS::hPS, SS::hVT),
      .PMTCT_dropout = read_data<real_type>(params.hc->PMTCT_dropout, params.hc->PMTCT_dropout_length, "PMTCT_dropout", SS::hPS_dropout, opts.proj_time_steps),
      .PMTCT_input_is_percent = read_data<int>(params.hc->PMTCT_input_is_percent, params.hc->PMTCT_input_is_percent_length, "PMTCT_input_is_percent", opts.proj_time_steps),
      .breastfeeding_duration_art = read_data<real_type>(params.hc->breastfeeding_duration_art, params.hc->breastfeeding_duration_art_length, "breastfeeding_duration_art", SS::hBF, opts.proj_time_steps),
      .breastfeeding_duration_no_art = read_data<real_type>(params.hc->breastfeeding_duration_no_art, params.hc->breastfeeding_duration_no_art_length, "breastfeeding_duration_no_art", SS::hBF, opts.proj_time_steps),
      .mat_hiv_births = read_data<real_type>(params.hc->mat_hiv_births, params.hc->mat_hiv_births_length, "mat_hiv_births", opts.proj_time_steps),
      .mat_prev_input = read_data<int>(params.hc->mat_prev_input, params.hc->mat_prev_input_length, "mat_prev_input", opts.proj_time_steps),
      .prop_lt200 = read_data<real_type>(params.hc->prop_lt200, params.hc->prop_lt200_length, "prop_lt200", opts.proj_time_steps),
      .prop_gte350 = read_data<real_type>(params.hc->prop_gte350, params.hc->prop_gte350_length, "prop_gte350", opts.proj_time_steps),
      .incrate = read_data<real_type>(params.hc->incrate, params.hc->incrate_length, "incrate", opts.proj_time_steps),
      .ctx_val_is_percent = read_data<int>(params.hc->ctx_val_is_percent, params.hc->ctx_val_is_percent_length, "ctx_val_is_percent", opts.proj_time_steps),
      .hc_art_is_age_spec = read_data<int>(params.hc->hc_art_is_age_spec, params.hc->hc_art_is_age_spec_length, "hc_art_is_age_spec", opts.proj_time_steps),
      .hc_age_coarse = read_data<real_type>(params.hc->hc_age_coarse, params.hc->hc_age_coarse_length, "hc_age_coarse", SS::hcAG_end),
      .abortion = read_data<real_type>(params.hc->abortion, params.hc->abortion_length, "abortion", SS::hAB_ind, opts.proj_time_steps),
      .patients_reallocated = read_data<real_type>(params.hc->patients_reallocated, params.hc->patients_reallocated_length, "patients_reallocated", opts.proj_time_steps),
      .hc_art_ltfu = read_data<real_type>(params.hc->hc_art_ltfu, params.hc->hc_art_ltfu_length, "hc_art_ltfu", opts.proj_time_steps),
      .hc_age_coarse_cd4 = read_data<int>(params.hc->hc_age_coarse_cd4, params.hc->hc_age_coarse_cd4_length, "hc_age_coarse_cd4", SS::p_idx_hiv_first_adult),
      .adult_female_infections = read_data<real_type>(params.hc->adult_female_infections, params.hc->adult_female_infections_length, "adult_female_infections", SS::p_fertility_age_groups, opts.proj_time_steps),
      .adult_female_hivnpop = read_data<real_type>(params.hc->adult_female_hivnpop, params.hc->adult_female_hivnpop_length, "adult_female_hivnpop", SS::p_fertility_age_groups, opts.proj_time_steps),
      .total_births = read_data<real_type>(params.hc->total_births, params.hc->total_births_length, "total_births", opts.proj_time_steps),
      .ctx_effect = read_data<real_type>(params.hc->ctx_effect, params.hc->ctx_effect_length, "ctx_effect", 3),
      .hc_art_start = params.hc->hc_art_start,
      .local_adj_factor = params.hc->local_adj_factor
    };
  };

  static Config::State get_initial_state(
    const CState<real_type>& state
  ){
    return {
      .hc1_hiv_pop = read_data<real_type>(state.hc->hc1_hiv_pop, state.hc->hc1_hiv_pop_length, "hc1_hiv_pop", SS::hc1DS, SS::hcTT, SS::hc1AG, SS::NS),
      .hc2_hiv_pop = read_data<real_type>(state.hc->hc2_hiv_pop, state.hc->hc2_hiv_pop_length, "hc2_hiv_pop", SS::hc2DS, SS::hcTT, SS::hc2AG, SS::NS),
      .hc1_art_pop = read_data<real_type>(state.hc->hc1_art_pop, state.hc->hc1_art_pop_length, "hc1_art_pop", SS::hTS, SS::hc1DS, SS::hc1AG, SS::NS),
      .hc2_art_pop = read_data<real_type>(state.hc->hc2_art_pop, state.hc->hc2_art_pop_length, "hc2_art_pop", SS::hTS, SS::hc2DS, SS::hc2AG, SS::NS),
      .hc1_noart_aids_deaths = read_data<real_type>(state.hc->hc1_noart_aids_deaths, state.hc->hc1_noart_aids_deaths_length, "hc1_noart_aids_deaths", SS::hc1DS, SS::hcTT, SS::hc1AG, SS::NS),
      .hc2_noart_aids_deaths = read_data<real_type>(state.hc->hc2_noart_aids_deaths, state.hc->hc2_noart_aids_deaths_length, "hc2_noart_aids_deaths", SS::hc2DS, SS::hcTT, SS::hc2AG, SS::NS),
      .hc1_art_aids_deaths = read_data<real_type>(state.hc->hc1_art_aids_deaths, state.hc->hc1_art_aids_deaths_length, "hc1_art_aids_deaths", SS::hTS, SS::hc1DS, SS::hc1AG, SS::NS),
      .hc2_art_aids_deaths = read_data<real_type>(state.hc->hc2_art_aids_deaths, state.hc->hc2_art_aids_deaths_length, "hc2_art_aids_deaths", SS::hTS, SS::hc2DS, SS::hc2AG, SS::NS),
      .hc_art_init = read_data<real_type>(state.hc->hc_art_init, state.hc->hc_art_init_length, "hc_art_init", SS::hcAG_coarse),
      .hc_art_need_init = read_data<real_type>(state.hc->hc_art_need_init, state.hc->hc_art_need_init_length, "hc_art_need_init", SS::hc1DS, SS::hcTT, SS::hcAG_end, SS::NS),
      .hiv_births = *(state.hc->hiv_births),
      .ctx_need = *(state.hc->ctx_need),
      .infection_by_type = read_data<real_type>(state.hc->infection_by_type, state.hc->infection_by_type_length, "infection_by_type", SS::hcTT, SS::hc1AG, SS::NS)
    };
  };

  static constexpr int output_count = 13;

  static int build_output(
    int index,
    const Config::OutputState& state,
    CState<real_type>& out
  ) {
    write_data<real_type, 5>(state.hc1_hiv_pop, out.hc->hc1_hiv_pop, out.hc->hc1_hiv_pop_length, "hc1_hiv_pop");
    write_data<real_type, 5>(state.hc2_hiv_pop, out.hc->hc2_hiv_pop, out.hc->hc2_hiv_pop_length, "hc2_hiv_pop");
    write_data<real_type, 5>(state.hc1_art_pop, out.hc->hc1_art_pop, out.hc->hc1_art_pop_length, "hc1_art_pop");
    write_data<real_type, 5>(state.hc2_art_pop, out.hc->hc2_art_pop, out.hc->hc2_art_pop_length, "hc2_art_pop");
    write_data<real_type, 5>(state.hc1_noart_aids_deaths, out.hc->hc1_noart_aids_deaths, out.hc->hc1_noart_aids_deaths_length, "hc1_noart_aids_deaths");
    write_data<real_type, 5>(state.hc2_noart_aids_deaths, out.hc->hc2_noart_aids_deaths, out.hc->hc2_noart_aids_deaths_length, "hc2_noart_aids_deaths");
    write_data<real_type, 5>(state.hc1_art_aids_deaths, out.hc->hc1_art_aids_deaths, out.hc->hc1_art_aids_deaths_length, "hc1_art_aids_deaths");
    write_data<real_type, 5>(state.hc2_art_aids_deaths, out.hc->hc2_art_aids_deaths, out.hc->hc2_art_aids_deaths_length, "hc2_art_aids_deaths");
    write_data<real_type, 2>(state.hc_art_init, out.hc->hc_art_init, out.hc->hc_art_init_length, "hc_art_init");
    write_data<real_type, 5>(state.hc_art_need_init, out.hc->hc_art_need_init, out.hc->hc_art_need_init_length, "hc_art_need_init");
    write_data<real_type, 1>(state.hiv_births, out.hc->hiv_births, out.hc->hiv_births_length, "hiv_births");
    write_data<real_type, 1>(state.ctx_need, out.hc->ctx_need, out.hc->ctx_need_length, "ctx_need");
    write_data<real_type, 4>(state.infection_by_type, out.hc->infection_by_type, out.hc->infection_by_type_length, "infection_by_type");
    return index + output_count;
  };

  static int build_output_single_year(
    int index,
    const Config::State& state,
    CState<real_type>& out
  ) {
    write_data<real_type, 4>(state.hc1_hiv_pop, out.hc->hc1_hiv_pop, out.hc->hc1_hiv_pop_length, "hc1_hiv_pop");
    write_data<real_type, 4>(state.hc2_hiv_pop, out.hc->hc2_hiv_pop, out.hc->hc2_hiv_pop_length, "hc2_hiv_pop");
    write_data<real_type, 4>(state.hc1_art_pop, out.hc->hc1_art_pop, out.hc->hc1_art_pop_length, "hc1_art_pop");
    write_data<real_type, 4>(state.hc2_art_pop, out.hc->hc2_art_pop, out.hc->hc2_art_pop_length, "hc2_art_pop");
    write_data<real_type, 4>(state.hc1_noart_aids_deaths, out.hc->hc1_noart_aids_deaths, out.hc->hc1_noart_aids_deaths_length, "hc1_noart_aids_deaths");
    write_data<real_type, 4>(state.hc2_noart_aids_deaths, out.hc->hc2_noart_aids_deaths, out.hc->hc2_noart_aids_deaths_length, "hc2_noart_aids_deaths");
    write_data<real_type, 4>(state.hc1_art_aids_deaths, out.hc->hc1_art_aids_deaths, out.hc->hc1_art_aids_deaths_length, "hc1_art_aids_deaths");
    write_data<real_type, 4>(state.hc2_art_aids_deaths, out.hc->hc2_art_aids_deaths, out.hc->hc2_art_aids_deaths_length, "hc2_art_aids_deaths");
    write_data<real_type, 1>(state.hc_art_init, out.hc->hc_art_init, out.hc->hc_art_init_length, "hc_art_init");
    write_data<real_type, 4>(state.hc_art_need_init, out.hc->hc_art_need_init, out.hc->hc_art_need_init_length, "hc_art_need_init");
    *(out.hc->hiv_births) = state.hiv_births;
    *(out.hc->ctx_need) = state.ctx_need;
    write_data<real_type, 3>(state.infection_by_type, out.hc->infection_by_type, out.hc->infection_by_type_length, "infection_by_type");
    return index + output_count;
  };
};

} // namespace internal
} // namespace leapfrog
