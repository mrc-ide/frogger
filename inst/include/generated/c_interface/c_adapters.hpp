// Generated by cpp_generation: do not edit by hand
// This file is automatically generated. Do not edit this file. If you want to make changes
// edit json files in `cpp_generation/modelSchemas` and run `uv run ./src/main.py` inside
// the `cpp_generation` folder.

#pragma once

#include <filesystem>
#include <string_view>
#include <format>
#include <unsupported/Eigen/CXX11/Tensor>
#include <stdexcept>

#include "../config_mixer.hpp"
#include "c_types.hpp"

namespace leapfrog {
namespace internal {

template<typename T, typename... Args>
auto read_data(T* data, int length, std::string_view name, Args... dims) {
  constexpr std::size_t rank = sizeof...(dims);
  const auto size = (dims * ...);
  if (length != size) {
    throw std::invalid_argument(std::format("Input data '{}' is the wrong size. Received array of length '{}', expected '{}'.", name, size, length));
  }
  return Eigen::TensorMap<Eigen::Tensor<T, rank>>(data, dims...);
}

template<typename T, int Rank>
void write_data(const Eigen::Tensor<T, Rank>& tensor, T* output, int length, std::string_view name) {
  const auto* dataPtr = tensor.data();
  std::size_t totalSize = tensor.size();

  if (length != totalSize) {
    throw std::invalid_argument(std::format("Output data '{}' is the wrong size. Received array of length '{}', expected '{}'.", name, totalSize, length));
  }

  std::copy(dataPtr, dataPtr + totalSize, output);
}

template<typename real_type, MV ModelVariant>
struct DpAdapter<Language::C, real_type, ModelVariant> {
  using SS = SSMixed<ModelVariant>;
  using Config = DpConfig<real_type, ModelVariant>;

  static Config::Pars get_pars(
    const DpParams &params,
    const Options<real_type> &opts
  ) {
    return {
      .base_pop = read_data<real_type>(params.base_pop, params.base_pop_length, "base_pop", SS::pAG, SS::NS),
      .survival_probability = read_data<real_type>(params.survival_probability, params.survival_probability_length, "survival_probability", SS::pAG + 1, SS::NS, opts.proj_time_steps),
      .net_migration = read_data<real_type>(params.net_migration, params.net_migration_length, "net_migration", SS::pAG, SS::NS, opts.proj_time_steps),
      .age_specific_fertility_rate = read_data<real_type>(params.age_specific_fertility_rate, params.age_specific_fertility_rate_length, "age_specific_fertility_rate", opts.p_fertility_age_groups, opts.proj_time_steps),
      .births_sex_prop = read_data<real_type>(params.births_sex_prop, params.births_sex_prop_length, "births_sex_prop", SS::NS, opts.proj_time_steps)
    };
  };

  static constexpr int output_count = 3;

  static int build_output(
    int index,
    const Config::OutputState& state,
    DpOut& out
  ) {
    write_data<real_type, 3>(state.p_total_pop, out.p_total_pop, out.p_total_pop_length, "p_total_pop");
    write_data<real_type, 3>(state.p_total_pop_natural_deaths, out.p_total_pop_natural_deaths, out.p_total_pop_natural_deaths_length, "p_total_pop_natural_deaths");
    write_data<real_type, 1>(state.births, out.births, out.births_length, "births");
    return index + output_count;
  };
};

template<typename real_type, MV ModelVariant>
struct HaAdapter<Language::C, real_type, ModelVariant> {
  using SS = SSMixed<ModelVariant>;
  using Config = HaConfig<real_type, ModelVariant>;

  // static Config::Pars get_pars(
  //   const DpParams &params,
  //   const Options<real_type> &opts
  // ) {
  //   return {
  //     .total_rate = read_data<real_type>(params.total_rate, opts.proj_time_steps),
  //     .relative_risk_age = read_data<real_type>(params.relative_risk_age, SS::pAG - opts.p_idx_hiv_first_adult, SS::NS, opts.proj_time_steps),
  //     .relative_risk_sex = read_data<real_type>(params.relative_risk_sex, opts.proj_time_steps),
  //     .cd4_mortality = read_data<real_type>(params.cd4_mortality, SS::hDS, SS::hAG, SS::NS),
  //     .cd4_progression = read_data<real_type>(params.cd4_progression, SS::hDS - 1, SS::hAG, SS::NS),
  //     .cd4_initial_distribution = read_data<real_type>(params.cd4_initial_distribution, SS::hDS, SS::hAG, SS::NS),
  //     .scale_cd4_mortality = read_data<int>(params.scale_cd4_mortality),
  //     .idx_hm_elig = read_data<int>(params.idx_hm_elig, opts.proj_time_steps),
  //     .mortality = read_data<real_type>(params.mortality, SS::hTS, SS::hDS, SS::hAG, SS::NS),
  //     .mortality_time_rate_ratio = read_data<real_type>(params.mortality_time_rate_ratio, SS::hTS, opts.proj_time_steps),
  //     .dropout_recover_cd4 = read_data<int>(params.dropout_recover_cd4),
  //     .dropout_rate = read_data<real_type>(params.dropout_rate, opts.proj_time_steps),
  //     .adults_on_art = read_data<real_type>(params.adults_on_art, SS::NS, opts.proj_time_steps),
  //     .adults_on_art_is_percent = read_data<int>(params.adults_on_art_is_percent, SS::NS, opts.proj_time_steps),
  //     .h_art_stage_dur = read_data<real_type>(params.h_art_stage_dur, SS::hTS - 1),
  //     .initiation_mortality_weight = read_data<real_type>(params.initiation_mortality_weight)
  //   };
  // };

  static constexpr int output_count = 9;

  static int build_output(
    int index,
    const Config::OutputState& state,
    DpOut& out
  ) {
    return index + output_count;
  };
};

template<typename real_type, MV ModelVariant>
struct HcAdapter<Language::C, real_type, ModelVariant> {
  using SS = SSMixed<ModelVariant>;
  using Config = HcConfig<real_type, ModelVariant>;

  // static Config::Pars get_pars(
  //   const DpParams &params,
  //   const Options<real_type> &opts
  // ) {
  //   return {
  //     .hc_nosocomial = read_data<real_type>(params.hc_nosocomial, opts.proj_time_steps),
  //     .hc1_cd4_dist = read_data<real_type>(params.hc1_cd4_dist, SS::hc2DS),
  //     .hc_cd4_transition = read_data<real_type>(params.hc_cd4_transition, SS::hc2DS, SS::hc1DS),
  //     .hc1_cd4_mort = read_data<real_type>(params.hc1_cd4_mort, SS::hc1DS, SS::hcTT, SS::hc1AG),
  //     .hc2_cd4_mort = read_data<real_type>(params.hc2_cd4_mort, SS::hc2DS, SS::hcTT, SS::hc2AG),
  //     .hc1_cd4_prog = read_data<real_type>(params.hc1_cd4_prog, SS::hc1DS, SS::hc1AG_c, SS::NS),
  //     .hc2_cd4_prog = read_data<real_type>(params.hc2_cd4_prog, SS::hc2DS, SS::hc2AG_c, SS::NS),
  //     .ctx_val = read_data<real_type>(params.ctx_val, opts.proj_time_steps),
  //     .hc_art_elig_age = read_data<int>(params.hc_art_elig_age, opts.proj_time_steps),
  //     .hc_art_elig_cd4 = read_data<real_type>(params.hc_art_elig_cd4, opts.p_idx_hiv_first_adult, opts.proj_time_steps),
  //     .hc_art_mort_rr = read_data<real_type>(params.hc_art_mort_rr, SS::hTS, opts.p_idx_hiv_first_adult, opts.proj_time_steps),
  //     .hc1_art_mort = read_data<real_type>(params.hc1_art_mort, SS::hc1DS, SS::hTS, SS::hc1AG),
  //     .hc2_art_mort = read_data<real_type>(params.hc2_art_mort, SS::hc2DS, SS::hTS, SS::hc2AG),
  //     .hc_art_isperc = read_data<int>(params.hc_art_isperc, opts.proj_time_steps),
  //     .hc_art_val = read_data<real_type>(params.hc_art_val, SS::hcAG_coarse, opts.proj_time_steps),
  //     .hc_art_init_dist = read_data<real_type>(params.hc_art_init_dist, opts.p_idx_hiv_first_adult, opts.proj_time_steps),
  //     .adult_cd4_dist = read_data<real_type>(params.adult_cd4_dist, SS::hDS, SS::hc2DS),
  //     .fert_mult_by_age = read_data<real_type>(params.fert_mult_by_age, opts.p_fertility_age_groups),
  //     .fert_mult_off_art = read_data<real_type>(params.fert_mult_off_art, SS::hDS),
  //     .fert_mult_on_art = read_data<real_type>(params.fert_mult_on_art, opts.p_fertility_age_groups),
  //     .total_fertility_rate = read_data<real_type>(params.total_fertility_rate, opts.proj_time_steps),
  //     .PMTCT = read_data<real_type>(params.PMTCT, SS::hPS, opts.proj_time_steps),
  //     .vertical_transmission_rate = read_data<real_type>(params.vertical_transmission_rate, SS::hDS + 1, SS::hVT),
  //     .PMTCT_transmission_rate = read_data<real_type>(params.PMTCT_transmission_rate, SS::hDS, SS::hPS, SS::hVT),
  //     .PMTCT_dropout = read_data<real_type>(params.PMTCT_dropout, SS::hPS_dropout, opts.proj_time_steps),
  //     .PMTCT_input_is_percent = read_data<int>(params.PMTCT_input_is_percent, opts.proj_time_steps),
  //     .breastfeeding_duration_art = read_data<real_type>(params.breastfeeding_duration_art, SS::hBF, opts.proj_time_steps),
  //     .breastfeeding_duration_no_art = read_data<real_type>(params.breastfeeding_duration_no_art, SS::hBF, opts.proj_time_steps),
  //     .mat_hiv_births = read_data<real_type>(params.mat_hiv_births, opts.proj_time_steps),
  //     .mat_prev_input = read_data<int>(params.mat_prev_input, opts.proj_time_steps),
  //     .prop_lt200 = read_data<real_type>(params.prop_lt200, opts.proj_time_steps),
  //     .prop_gte350 = read_data<real_type>(params.prop_gte350, opts.proj_time_steps),
  //     .incrate = read_data<real_type>(params.incrate, opts.proj_time_steps),
  //     .ctx_val_is_percent = read_data<int>(params.ctx_val_is_percent, opts.proj_time_steps),
  //     .hc_art_is_age_spec = read_data<int>(params.hc_art_is_age_spec, opts.proj_time_steps),
  //     .hc_age_coarse = read_data<real_type>(params.hc_age_coarse, SS::hcAG_end),
  //     .abortion = read_data<real_type>(params.abortion, SS::hAB_ind, opts.proj_time_steps),
  //     .patients_reallocated = read_data<real_type>(params.patients_reallocated, opts.proj_time_steps),
  //     .hc_art_ltfu = read_data<real_type>(params.hc_art_ltfu, opts.proj_time_steps),
  //     .hc_age_coarse_cd4 = read_data<int>(params.hc_age_coarse_cd4, opts.p_idx_hiv_first_adult),
  //     .adult_female_infections = read_data<real_type>(params.adult_female_infections, opts.p_fertility_age_groups, opts.proj_time_steps),
  //     .adult_female_hivnpop = read_data<real_type>(params.adult_female_hivnpop, opts.p_fertility_age_groups, opts.proj_time_steps),
  //     .total_births = read_data<real_type>(params.total_births, opts.proj_time_steps),
  //     .ctx_effect = read_data<real_type>(params.ctx_effect, 3),
  //     .hc_art_start = read_data<real_type>(params.hc_art_start),
  //     .local_adj_factor = read_data<real_type>(params.local_adj_factor)
  //   };
  // };

  static constexpr int output_count = 13;

  static int build_output(
    int index,
    const Config::OutputState& state,
    DpOut& out
  ) {
    return index + output_count;
  };
};

} // namespace internal
} // namespace leapfrog
